
Assignment_simulation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004f30  08004f30  00014f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005068  08005068  0002011c  2**0
                  CONTENTS
  4 .ARM          00000000  08005068  08005068  0002011c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005068  08005068  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005068  08005068  00015068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800506c  0800506c  0001506c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08005070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000011c  0800518c  0002011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  0800518c  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001547e  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a51  00000000  00000000  000355c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00038018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00038da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019181  00000000  00000000  00039a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011fb7  00000000  00000000  00052ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b4c0  00000000  00000000  00064b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0020  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aac  00000000  00000000  000f0074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000011c 	.word	0x2000011c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f18 	.word	0x08004f18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000120 	.word	0x20000120
 8000148:	08004f18 	.word	0x08004f18

0800014c <getButtonValue>:
 *
 * @param:	NONE
 * @retval:	NONE
 */

void getButtonValue(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTON; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e109      	b.n	800036c <getButtonValue+0x220>
		listButton[i].keyget1 = listButton[i].keyget2;
 8000158:	4989      	ldr	r1, [pc, #548]	; (8000380 <getButtonValue+0x234>)
 800015a:	687a      	ldr	r2, [r7, #4]
 800015c:	4613      	mov	r3, r2
 800015e:	00db      	lsls	r3, r3, #3
 8000160:	1a9b      	subs	r3, r3, r2
 8000162:	009b      	lsls	r3, r3, #2
 8000164:	440b      	add	r3, r1
 8000166:	3304      	adds	r3, #4
 8000168:	6819      	ldr	r1, [r3, #0]
 800016a:	4885      	ldr	r0, [pc, #532]	; (8000380 <getButtonValue+0x234>)
 800016c:	687a      	ldr	r2, [r7, #4]
 800016e:	4613      	mov	r3, r2
 8000170:	00db      	lsls	r3, r3, #3
 8000172:	1a9b      	subs	r3, r3, r2
 8000174:	009b      	lsls	r3, r3, #2
 8000176:	4403      	add	r3, r0
 8000178:	6019      	str	r1, [r3, #0]
		listButton[i].keyget2 = listButton[i].keyget3;
 800017a:	4981      	ldr	r1, [pc, #516]	; (8000380 <getButtonValue+0x234>)
 800017c:	687a      	ldr	r2, [r7, #4]
 800017e:	4613      	mov	r3, r2
 8000180:	00db      	lsls	r3, r3, #3
 8000182:	1a9b      	subs	r3, r3, r2
 8000184:	009b      	lsls	r3, r3, #2
 8000186:	440b      	add	r3, r1
 8000188:	3308      	adds	r3, #8
 800018a:	6819      	ldr	r1, [r3, #0]
 800018c:	487c      	ldr	r0, [pc, #496]	; (8000380 <getButtonValue+0x234>)
 800018e:	687a      	ldr	r2, [r7, #4]
 8000190:	4613      	mov	r3, r2
 8000192:	00db      	lsls	r3, r3, #3
 8000194:	1a9b      	subs	r3, r3, r2
 8000196:	009b      	lsls	r3, r3, #2
 8000198:	4403      	add	r3, r0
 800019a:	3304      	adds	r3, #4
 800019c:	6019      	str	r1, [r3, #0]
		listButton[i].keyget3 = HAL_GPIO_ReadPin(BUTTON_GPIO[i], BUTTON_PIN[i]);
 800019e:	4a79      	ldr	r2, [pc, #484]	; (8000384 <getButtonValue+0x238>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a6:	4978      	ldr	r1, [pc, #480]	; (8000388 <getButtonValue+0x23c>)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001ae:	4619      	mov	r1, r3
 80001b0:	4610      	mov	r0, r2
 80001b2:	f002 f85d 	bl	8002270 <HAL_GPIO_ReadPin>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4618      	mov	r0, r3
 80001ba:	4971      	ldr	r1, [pc, #452]	; (8000380 <getButtonValue+0x234>)
 80001bc:	687a      	ldr	r2, [r7, #4]
 80001be:	4613      	mov	r3, r2
 80001c0:	00db      	lsls	r3, r3, #3
 80001c2:	1a9b      	subs	r3, r3, r2
 80001c4:	009b      	lsls	r3, r3, #2
 80001c6:	440b      	add	r3, r1
 80001c8:	3308      	adds	r3, #8
 80001ca:	6018      	str	r0, [r3, #0]
		if((listButton[i].keyget1 == listButton[i].keyget2) && (listButton[i].keyget2 == listButton[i].keyget3)){
 80001cc:	496c      	ldr	r1, [pc, #432]	; (8000380 <getButtonValue+0x234>)
 80001ce:	687a      	ldr	r2, [r7, #4]
 80001d0:	4613      	mov	r3, r2
 80001d2:	00db      	lsls	r3, r3, #3
 80001d4:	1a9b      	subs	r3, r3, r2
 80001d6:	009b      	lsls	r3, r3, #2
 80001d8:	440b      	add	r3, r1
 80001da:	6819      	ldr	r1, [r3, #0]
 80001dc:	4868      	ldr	r0, [pc, #416]	; (8000380 <getButtonValue+0x234>)
 80001de:	687a      	ldr	r2, [r7, #4]
 80001e0:	4613      	mov	r3, r2
 80001e2:	00db      	lsls	r3, r3, #3
 80001e4:	1a9b      	subs	r3, r3, r2
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	4403      	add	r3, r0
 80001ea:	3304      	adds	r3, #4
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4299      	cmp	r1, r3
 80001f0:	f040 80b9 	bne.w	8000366 <getButtonValue+0x21a>
 80001f4:	4962      	ldr	r1, [pc, #392]	; (8000380 <getButtonValue+0x234>)
 80001f6:	687a      	ldr	r2, [r7, #4]
 80001f8:	4613      	mov	r3, r2
 80001fa:	00db      	lsls	r3, r3, #3
 80001fc:	1a9b      	subs	r3, r3, r2
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	440b      	add	r3, r1
 8000202:	3304      	adds	r3, #4
 8000204:	6819      	ldr	r1, [r3, #0]
 8000206:	485e      	ldr	r0, [pc, #376]	; (8000380 <getButtonValue+0x234>)
 8000208:	687a      	ldr	r2, [r7, #4]
 800020a:	4613      	mov	r3, r2
 800020c:	00db      	lsls	r3, r3, #3
 800020e:	1a9b      	subs	r3, r3, r2
 8000210:	009b      	lsls	r3, r3, #2
 8000212:	4403      	add	r3, r0
 8000214:	3308      	adds	r3, #8
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4299      	cmp	r1, r3
 800021a:	f040 80a4 	bne.w	8000366 <getButtonValue+0x21a>
			if (listButton[i].oldState != listButton[i].keyget3){
 800021e:	4958      	ldr	r1, [pc, #352]	; (8000380 <getButtonValue+0x234>)
 8000220:	687a      	ldr	r2, [r7, #4]
 8000222:	4613      	mov	r3, r2
 8000224:	00db      	lsls	r3, r3, #3
 8000226:	1a9b      	subs	r3, r3, r2
 8000228:	009b      	lsls	r3, r3, #2
 800022a:	440b      	add	r3, r1
 800022c:	330c      	adds	r3, #12
 800022e:	6819      	ldr	r1, [r3, #0]
 8000230:	4853      	ldr	r0, [pc, #332]	; (8000380 <getButtonValue+0x234>)
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	4613      	mov	r3, r2
 8000236:	00db      	lsls	r3, r3, #3
 8000238:	1a9b      	subs	r3, r3, r2
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	4403      	add	r3, r0
 800023e:	3308      	adds	r3, #8
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4299      	cmp	r1, r3
 8000244:	d052      	beq.n	80002ec <getButtonValue+0x1a0>
				listButton[i].oldState = listButton[i].keyget3;
 8000246:	494e      	ldr	r1, [pc, #312]	; (8000380 <getButtonValue+0x234>)
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	4613      	mov	r3, r2
 800024c:	00db      	lsls	r3, r3, #3
 800024e:	1a9b      	subs	r3, r3, r2
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	440b      	add	r3, r1
 8000254:	3308      	adds	r3, #8
 8000256:	6819      	ldr	r1, [r3, #0]
 8000258:	4849      	ldr	r0, [pc, #292]	; (8000380 <getButtonValue+0x234>)
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	4613      	mov	r3, r2
 800025e:	00db      	lsls	r3, r3, #3
 8000260:	1a9b      	subs	r3, r3, r2
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	4403      	add	r3, r0
 8000266:	330c      	adds	r3, #12
 8000268:	6019      	str	r1, [r3, #0]
				if (listButton[i].keyget3 == PRESSED){
 800026a:	4945      	ldr	r1, [pc, #276]	; (8000380 <getButtonValue+0x234>)
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	4613      	mov	r3, r2
 8000270:	00db      	lsls	r3, r3, #3
 8000272:	1a9b      	subs	r3, r3, r2
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	440b      	add	r3, r1
 8000278:	3308      	adds	r3, #8
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d114      	bne.n	80002aa <getButtonValue+0x15e>
					listButton[i].shortPress = 1;
 8000280:	493f      	ldr	r1, [pc, #252]	; (8000380 <getButtonValue+0x234>)
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	4613      	mov	r3, r2
 8000286:	00db      	lsls	r3, r3, #3
 8000288:	1a9b      	subs	r3, r3, r2
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	440b      	add	r3, r1
 800028e:	3310      	adds	r3, #16
 8000290:	2201      	movs	r2, #1
 8000292:	601a      	str	r2, [r3, #0]
					listButton[i].timePress = KEY_PRESS_TIME / TIME_CYCLE;
 8000294:	493a      	ldr	r1, [pc, #232]	; (8000380 <getButtonValue+0x234>)
 8000296:	687a      	ldr	r2, [r7, #4]
 8000298:	4613      	mov	r3, r2
 800029a:	00db      	lsls	r3, r3, #3
 800029c:	1a9b      	subs	r3, r3, r2
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	440b      	add	r3, r1
 80002a2:	3318      	adds	r3, #24
 80002a4:	2264      	movs	r2, #100	; 0x64
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	e05d      	b.n	8000366 <getButtonValue+0x21a>
				}
				else if (listButton[i].keyget3 == RELEASE){
 80002aa:	4935      	ldr	r1, [pc, #212]	; (8000380 <getButtonValue+0x234>)
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	4613      	mov	r3, r2
 80002b0:	00db      	lsls	r3, r3, #3
 80002b2:	1a9b      	subs	r3, r3, r2
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	440b      	add	r3, r1
 80002b8:	3308      	adds	r3, #8
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d152      	bne.n	8000366 <getButtonValue+0x21a>
					// if new state != old state and button is released -> Short Press is complete
					if (listButton[i].shortPress == 1) listButton[i].shortPress = 2;
 80002c0:	492f      	ldr	r1, [pc, #188]	; (8000380 <getButtonValue+0x234>)
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	4613      	mov	r3, r2
 80002c6:	00db      	lsls	r3, r3, #3
 80002c8:	1a9b      	subs	r3, r3, r2
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	440b      	add	r3, r1
 80002ce:	3310      	adds	r3, #16
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d147      	bne.n	8000366 <getButtonValue+0x21a>
 80002d6:	492a      	ldr	r1, [pc, #168]	; (8000380 <getButtonValue+0x234>)
 80002d8:	687a      	ldr	r2, [r7, #4]
 80002da:	4613      	mov	r3, r2
 80002dc:	00db      	lsls	r3, r3, #3
 80002de:	1a9b      	subs	r3, r3, r2
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	440b      	add	r3, r1
 80002e4:	3310      	adds	r3, #16
 80002e6:	2202      	movs	r2, #2
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	e03c      	b.n	8000366 <getButtonValue+0x21a>
				}
			}
			else if (listButton[i].keyget3 == PRESSED){
 80002ec:	4924      	ldr	r1, [pc, #144]	; (8000380 <getButtonValue+0x234>)
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	4613      	mov	r3, r2
 80002f2:	00db      	lsls	r3, r3, #3
 80002f4:	1a9b      	subs	r3, r3, r2
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	440b      	add	r3, r1
 80002fa:	3308      	adds	r3, #8
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d131      	bne.n	8000366 <getButtonValue+0x21a>
				listButton[i].timePress--;
 8000302:	491f      	ldr	r1, [pc, #124]	; (8000380 <getButtonValue+0x234>)
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	4613      	mov	r3, r2
 8000308:	00db      	lsls	r3, r3, #3
 800030a:	1a9b      	subs	r3, r3, r2
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	440b      	add	r3, r1
 8000310:	3318      	adds	r3, #24
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	1e59      	subs	r1, r3, #1
 8000316:	481a      	ldr	r0, [pc, #104]	; (8000380 <getButtonValue+0x234>)
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	4613      	mov	r3, r2
 800031c:	00db      	lsls	r3, r3, #3
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	4403      	add	r3, r0
 8000324:	3318      	adds	r3, #24
 8000326:	6019      	str	r1, [r3, #0]
				if (listButton[i].timePress == 0){
 8000328:	4915      	ldr	r1, [pc, #84]	; (8000380 <getButtonValue+0x234>)
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	4613      	mov	r3, r2
 800032e:	00db      	lsls	r3, r3, #3
 8000330:	1a9b      	subs	r3, r3, r2
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	440b      	add	r3, r1
 8000336:	3318      	adds	r3, #24
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d113      	bne.n	8000366 <getButtonValue+0x21a>
					listButton[i].longPress = 1;
 800033e:	4910      	ldr	r1, [pc, #64]	; (8000380 <getButtonValue+0x234>)
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	4613      	mov	r3, r2
 8000344:	00db      	lsls	r3, r3, #3
 8000346:	1a9b      	subs	r3, r3, r2
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	440b      	add	r3, r1
 800034c:	3314      	adds	r3, #20
 800034e:	2201      	movs	r2, #1
 8000350:	601a      	str	r2, [r3, #0]
					listButton[i].shortPress = 0; // When press time >= KEY_PRESS_TIME -> long press -> terminate short press
 8000352:	490b      	ldr	r1, [pc, #44]	; (8000380 <getButtonValue+0x234>)
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	4613      	mov	r3, r2
 8000358:	00db      	lsls	r3, r3, #3
 800035a:	1a9b      	subs	r3, r3, r2
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	440b      	add	r3, r1
 8000360:	3310      	adds	r3, #16
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_BUTTON; i++){
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	3301      	adds	r3, #1
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2b03      	cmp	r3, #3
 8000370:	f77f aef2 	ble.w	8000158 <getButtonValue+0xc>
				}
			}
		}
	}
}
 8000374:	bf00      	nop
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000000 	.word	0x20000000
 8000384:	20000070 	.word	0x20000070
 8000388:	20000080 	.word	0x20000080

0800038c <isButtonShortPress>:
 * @param:	index of button [0...3]
 * @retval:	1	-	button is pressed
 * 			0	-	button is not pressed
 */

int isButtonShortPress(int index){
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	if (listButton[index].shortPress == 2){
 8000394:	490e      	ldr	r1, [pc, #56]	; (80003d0 <isButtonShortPress+0x44>)
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	4613      	mov	r3, r2
 800039a:	00db      	lsls	r3, r3, #3
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	440b      	add	r3, r1
 80003a2:	3310      	adds	r3, #16
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	d10b      	bne.n	80003c2 <isButtonShortPress+0x36>
		listButton[index].shortPress = 0;
 80003aa:	4909      	ldr	r1, [pc, #36]	; (80003d0 <isButtonShortPress+0x44>)
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	4613      	mov	r3, r2
 80003b0:	00db      	lsls	r3, r3, #3
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	440b      	add	r3, r1
 80003b8:	3310      	adds	r3, #16
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
		return 1;
 80003be:	2301      	movs	r3, #1
 80003c0:	e000      	b.n	80003c4 <isButtonShortPress+0x38>
	}
	else return 0;
 80003c2:	2300      	movs	r3, #0
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	20000000 	.word	0x20000000

080003d4 <isButtonLongPress>:
 *
 * @param:	index of button [0...3]
 * @retval:	1	-	button is long pressed
 * 			0	-	button is not long pressed
 */
int isButtonLongPress(int index){
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	if (listButton[index].longPress == 1){
 80003dc:	490e      	ldr	r1, [pc, #56]	; (8000418 <isButtonLongPress+0x44>)
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	4613      	mov	r3, r2
 80003e2:	00db      	lsls	r3, r3, #3
 80003e4:	1a9b      	subs	r3, r3, r2
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	440b      	add	r3, r1
 80003ea:	3314      	adds	r3, #20
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d10b      	bne.n	800040a <isButtonLongPress+0x36>
		listButton[index].longPress = 0;
 80003f2:	4909      	ldr	r1, [pc, #36]	; (8000418 <isButtonLongPress+0x44>)
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	4613      	mov	r3, r2
 80003f8:	00db      	lsls	r3, r3, #3
 80003fa:	1a9b      	subs	r3, r3, r2
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	440b      	add	r3, r1
 8000400:	3314      	adds	r3, #20
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
		return 1;
 8000406:	2301      	movs	r3, #1
 8000408:	e000      	b.n	800040c <isButtonLongPress+0x38>
	}
	else return 0;
 800040a:	2300      	movs	r3, #0
}
 800040c:	4618      	mov	r0, r3
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	20000000 	.word	0x20000000

0800041c <fsm_traffic_auto_mode>:
int timeAmber = 2;
int timeGreen = 3;


//AUTO MODE
void fsm_traffic_auto_mode(void){
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	switch(autoStatus){
 8000420:	4b47      	ldr	r3, [pc, #284]	; (8000540 <fsm_traffic_auto_mode+0x124>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b0a      	cmp	r3, #10
 8000426:	d87f      	bhi.n	8000528 <fsm_traffic_auto_mode+0x10c>
 8000428:	a201      	add	r2, pc, #4	; (adr r2, 8000430 <fsm_traffic_auto_mode+0x14>)
 800042a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042e:	bf00      	nop
 8000430:	08000529 	.word	0x08000529
 8000434:	08000479 	.word	0x08000479
 8000438:	080004a1 	.word	0x080004a1
 800043c:	080004d1 	.word	0x080004d1
 8000440:	080004f9 	.word	0x080004f9
 8000444:	08000529 	.word	0x08000529
 8000448:	08000529 	.word	0x08000529
 800044c:	08000529 	.word	0x08000529
 8000450:	08000529 	.word	0x08000529
 8000454:	08000529 	.word	0x08000529
 8000458:	0800045d 	.word	0x0800045d
	case OFF:
		// do nothing
		break;
	case INIT:
		autoStatus = RED_GREEN;
 800045c:	4b38      	ldr	r3, [pc, #224]	; (8000540 <fsm_traffic_auto_mode+0x124>)
 800045e:	2201      	movs	r2, #1
 8000460:	601a      	str	r2, [r3, #0]
		// prepare for red green state
		clock_counter_main = timeRed;
 8000462:	4b38      	ldr	r3, [pc, #224]	; (8000544 <fsm_traffic_auto_mode+0x128>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a38      	ldr	r2, [pc, #224]	; (8000548 <fsm_traffic_auto_mode+0x12c>)
 8000468:	6013      	str	r3, [r2, #0]
		clock_counter_side = timeGreen;
 800046a:	4b38      	ldr	r3, [pc, #224]	; (800054c <fsm_traffic_auto_mode+0x130>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a38      	ldr	r2, [pc, #224]	; (8000550 <fsm_traffic_auto_mode+0x134>)
 8000470:	6013      	str	r3, [r2, #0]
		clearRoadLed();
 8000472:	f000 ff5f 	bl	8001334 <clearRoadLed>
		break;
 8000476:	e060      	b.n	800053a <fsm_traffic_auto_mode+0x11e>
	case RED_GREEN:
		turnOnRed(0);
 8000478:	2000      	movs	r0, #0
 800047a:	f000 fe91 	bl	80011a0 <turnOnRed>
		turnOnGreen(1);
 800047e:	2001      	movs	r0, #1
 8000480:	f000 fee0 	bl	8001244 <turnOnGreen>
		if (clock_counter_side == 0){
 8000484:	4b32      	ldr	r3, [pc, #200]	; (8000550 <fsm_traffic_auto_mode+0x134>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14f      	bne.n	800052c <fsm_traffic_auto_mode+0x110>
			autoStatus = RED_AMBER;
 800048c:	4b2c      	ldr	r3, [pc, #176]	; (8000540 <fsm_traffic_auto_mode+0x124>)
 800048e:	2202      	movs	r2, #2
 8000490:	601a      	str	r2, [r3, #0]
//			clock_counter_main = timeRed - timeGreen;
			clock_counter_side = timeAmber;
 8000492:	4b30      	ldr	r3, [pc, #192]	; (8000554 <fsm_traffic_auto_mode+0x138>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a2e      	ldr	r2, [pc, #184]	; (8000550 <fsm_traffic_auto_mode+0x134>)
 8000498:	6013      	str	r3, [r2, #0]
			clearRoadLed();
 800049a:	f000 ff4b 	bl	8001334 <clearRoadLed>
		}
		break;
 800049e:	e045      	b.n	800052c <fsm_traffic_auto_mode+0x110>
	case RED_AMBER:
		turnOnRed(0);
 80004a0:	2000      	movs	r0, #0
 80004a2:	f000 fe7d 	bl	80011a0 <turnOnRed>
		turnOnAmber(1);
 80004a6:	2001      	movs	r0, #1
 80004a8:	f000 fea2 	bl	80011f0 <turnOnAmber>
		if (clock_counter_side == 0){
 80004ac:	4b28      	ldr	r3, [pc, #160]	; (8000550 <fsm_traffic_auto_mode+0x134>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d13d      	bne.n	8000530 <fsm_traffic_auto_mode+0x114>
			autoStatus = GREEN_RED;
 80004b4:	4b22      	ldr	r3, [pc, #136]	; (8000540 <fsm_traffic_auto_mode+0x124>)
 80004b6:	2203      	movs	r2, #3
 80004b8:	601a      	str	r2, [r3, #0]
			clock_counter_main = timeGreen;
 80004ba:	4b24      	ldr	r3, [pc, #144]	; (800054c <fsm_traffic_auto_mode+0x130>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a22      	ldr	r2, [pc, #136]	; (8000548 <fsm_traffic_auto_mode+0x12c>)
 80004c0:	6013      	str	r3, [r2, #0]
			clock_counter_side = timeRed;
 80004c2:	4b20      	ldr	r3, [pc, #128]	; (8000544 <fsm_traffic_auto_mode+0x128>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a22      	ldr	r2, [pc, #136]	; (8000550 <fsm_traffic_auto_mode+0x134>)
 80004c8:	6013      	str	r3, [r2, #0]
			clearRoadLed();
 80004ca:	f000 ff33 	bl	8001334 <clearRoadLed>
		}
		break;
 80004ce:	e02f      	b.n	8000530 <fsm_traffic_auto_mode+0x114>
	case GREEN_RED:
		turnOnGreen(0);
 80004d0:	2000      	movs	r0, #0
 80004d2:	f000 feb7 	bl	8001244 <turnOnGreen>
		turnOnRed(1);
 80004d6:	2001      	movs	r0, #1
 80004d8:	f000 fe62 	bl	80011a0 <turnOnRed>
		if (clock_counter_main == 0){
 80004dc:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <fsm_traffic_auto_mode+0x12c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d127      	bne.n	8000534 <fsm_traffic_auto_mode+0x118>
			autoStatus = AMBER_RED;
 80004e4:	4b16      	ldr	r3, [pc, #88]	; (8000540 <fsm_traffic_auto_mode+0x124>)
 80004e6:	2204      	movs	r2, #4
 80004e8:	601a      	str	r2, [r3, #0]
			clock_counter_main = timeAmber;
 80004ea:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <fsm_traffic_auto_mode+0x138>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a16      	ldr	r2, [pc, #88]	; (8000548 <fsm_traffic_auto_mode+0x12c>)
 80004f0:	6013      	str	r3, [r2, #0]
//			clock_counter_side = timeRed - timeGreen;
			clearRoadLed();
 80004f2:	f000 ff1f 	bl	8001334 <clearRoadLed>
		}
		break;
 80004f6:	e01d      	b.n	8000534 <fsm_traffic_auto_mode+0x118>
	case AMBER_RED:
		turnOnAmber(0);
 80004f8:	2000      	movs	r0, #0
 80004fa:	f000 fe79 	bl	80011f0 <turnOnAmber>
		turnOnRed(1);
 80004fe:	2001      	movs	r0, #1
 8000500:	f000 fe4e 	bl	80011a0 <turnOnRed>
		if (clock_counter_main == 0){
 8000504:	4b10      	ldr	r3, [pc, #64]	; (8000548 <fsm_traffic_auto_mode+0x12c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d115      	bne.n	8000538 <fsm_traffic_auto_mode+0x11c>
			autoStatus = RED_GREEN;
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <fsm_traffic_auto_mode+0x124>)
 800050e:	2201      	movs	r2, #1
 8000510:	601a      	str	r2, [r3, #0]
			clock_counter_main = timeRed;
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <fsm_traffic_auto_mode+0x128>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <fsm_traffic_auto_mode+0x12c>)
 8000518:	6013      	str	r3, [r2, #0]
			clock_counter_side = timeGreen;
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <fsm_traffic_auto_mode+0x130>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a0c      	ldr	r2, [pc, #48]	; (8000550 <fsm_traffic_auto_mode+0x134>)
 8000520:	6013      	str	r3, [r2, #0]
			clearRoadLed();
 8000522:	f000 ff07 	bl	8001334 <clearRoadLed>
		}
		break;
 8000526:	e007      	b.n	8000538 <fsm_traffic_auto_mode+0x11c>
	default:
		break;
 8000528:	bf00      	nop
 800052a:	e006      	b.n	800053a <fsm_traffic_auto_mode+0x11e>
		break;
 800052c:	bf00      	nop
 800052e:	e004      	b.n	800053a <fsm_traffic_auto_mode+0x11e>
		break;
 8000530:	bf00      	nop
 8000532:	e002      	b.n	800053a <fsm_traffic_auto_mode+0x11e>
		break;
 8000534:	bf00      	nop
 8000536:	e000      	b.n	800053a <fsm_traffic_auto_mode+0x11e>
		break;
 8000538:	bf00      	nop
	}
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	2000008c 	.word	0x2000008c
 8000544:	20000090 	.word	0x20000090
 8000548:	20000150 	.word	0x20000150
 800054c:	20000098 	.word	0x20000098
 8000550:	20000154 	.word	0x20000154
 8000554:	20000094 	.word	0x20000094

08000558 <setBuzzer>:

//PEDESTRIAN (IN AUTO MODE)
void setBuzzer(void){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	switch (Buzzer.status) {
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <setBuzzer+0x84>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b0a      	cmp	r3, #10
 8000562:	d006      	beq.n	8000572 <setBuzzer+0x1a>
 8000564:	2b0a      	cmp	r3, #10
 8000566:	dc31      	bgt.n	80005cc <setBuzzer+0x74>
 8000568:	2b00      	cmp	r3, #0
 800056a:	d00c      	beq.n	8000586 <setBuzzer+0x2e>
 800056c:	2b01      	cmp	r3, #1
 800056e:	d01a      	beq.n	80005a6 <setBuzzer+0x4e>
		setTimer(Buzzer.period, 3);
		Buzzer.status = OFF;
		}
		break;
	default:
		break;
 8000570:	e02c      	b.n	80005cc <setBuzzer+0x74>
		setTimer(Buzzer.period, 3);
 8000572:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <setBuzzer+0x84>)
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	2103      	movs	r1, #3
 8000578:	4618      	mov	r0, r3
 800057a:	f001 f8f7 	bl	800176c <setTimer>
		Buzzer.status = ON;
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <setBuzzer+0x84>)
 8000580:	2201      	movs	r2, #1
 8000582:	601a      	str	r2, [r3, #0]
		break;
 8000584:	e027      	b.n	80005d6 <setBuzzer+0x7e>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <setBuzzer+0x88>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2200      	movs	r2, #0
 800058c:	635a      	str	r2, [r3, #52]	; 0x34
		if (timer_flag[3]) {
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <setBuzzer+0x8c>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d01c      	beq.n	80005d0 <setBuzzer+0x78>
			setTimer(100, 3);
 8000596:	2103      	movs	r1, #3
 8000598:	2064      	movs	r0, #100	; 0x64
 800059a:	f001 f8e7 	bl	800176c <setTimer>
			Buzzer.status = ON;
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <setBuzzer+0x84>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	601a      	str	r2, [r3, #0]
		break;
 80005a4:	e014      	b.n	80005d0 <setBuzzer+0x78>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Buzzer.volume);
 80005a6:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <setBuzzer+0x84>)
 80005a8:	685a      	ldr	r2, [r3, #4]
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <setBuzzer+0x88>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	635a      	str	r2, [r3, #52]	; 0x34
		if (timer_flag[3]) {
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <setBuzzer+0x8c>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00d      	beq.n	80005d4 <setBuzzer+0x7c>
		setTimer(Buzzer.period, 3);
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <setBuzzer+0x84>)
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	2103      	movs	r1, #3
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 f8d4 	bl	800176c <setTimer>
		Buzzer.status = OFF;
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <setBuzzer+0x84>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
		break;
 80005ca:	e003      	b.n	80005d4 <setBuzzer+0x7c>
		break;
 80005cc:	bf00      	nop
 80005ce:	e002      	b.n	80005d6 <setBuzzer+0x7e>
		break;
 80005d0:	bf00      	nop
 80005d2:	e000      	b.n	80005d6 <setBuzzer+0x7e>
		break;
 80005d4:	bf00      	nop
	}

}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000144 	.word	0x20000144
 80005e0:	20000184 	.word	0x20000184
 80005e4:	20000168 	.word	0x20000168

080005e8 <fsm_pedestrian>:

void fsm_pedestrian(void){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	switch(pedStatus){
 80005ec:	4b3f      	ldr	r3, [pc, #252]	; (80006ec <fsm_pedestrian+0x104>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b0a      	cmp	r3, #10
 80005f2:	d874      	bhi.n	80006de <fsm_pedestrian+0xf6>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <fsm_pedestrian+0x14>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	08000629 	.word	0x08000629
 8000600:	080006c9 	.word	0x080006c9
 8000604:	08000677 	.word	0x08000677
 8000608:	080006df 	.word	0x080006df
 800060c:	080006df 	.word	0x080006df
 8000610:	080006df 	.word	0x080006df
 8000614:	080006df 	.word	0x080006df
 8000618:	080006df 	.word	0x080006df
 800061c:	080006df 	.word	0x080006df
 8000620:	080006df 	.word	0x080006df
 8000624:	08000641 	.word	0x08000641
	case OFF:
		unsetPedestrianLed(0);
 8000628:	2000      	movs	r0, #0
 800062a:	f000 feb5 	bl	8001398 <unsetPedestrianLed>
		unsetPedestrianLed(1);
 800062e:	2001      	movs	r0, #1
 8000630:	f000 feb2 	bl	8001398 <unsetPedestrianLed>
		Buzzer.status = OFF;
 8000634:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <fsm_pedestrian+0x108>)
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
		setBuzzer();
 800063a:	f7ff ff8d 	bl	8000558 <setBuzzer>
		break;
 800063e:	e053      	b.n	80006e8 <fsm_pedestrian+0x100>
	case INIT:
		if (autoStatus == RED_GREEN || autoStatus == RED_AMBER) pedStatus = GREEN_PED;
 8000640:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <fsm_pedestrian+0x10c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d003      	beq.n	8000650 <fsm_pedestrian+0x68>
 8000648:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <fsm_pedestrian+0x10c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b02      	cmp	r3, #2
 800064e:	d103      	bne.n	8000658 <fsm_pedestrian+0x70>
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <fsm_pedestrian+0x104>)
 8000652:	2202      	movs	r2, #2
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	e00a      	b.n	800066e <fsm_pedestrian+0x86>
		else if (autoStatus == GREEN_RED || autoStatus == AMBER_RED) pedStatus = RED_PED;
 8000658:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <fsm_pedestrian+0x10c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b03      	cmp	r3, #3
 800065e:	d003      	beq.n	8000668 <fsm_pedestrian+0x80>
 8000660:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <fsm_pedestrian+0x10c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b04      	cmp	r3, #4
 8000666:	d102      	bne.n	800066e <fsm_pedestrian+0x86>
 8000668:	4b20      	ldr	r3, [pc, #128]	; (80006ec <fsm_pedestrian+0x104>)
 800066a:	2201      	movs	r2, #1
 800066c:	601a      	str	r2, [r3, #0]
		Buzzer.status = INIT;
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <fsm_pedestrian+0x108>)
 8000670:	220a      	movs	r2, #10
 8000672:	601a      	str	r2, [r3, #0]
		break;
 8000674:	e038      	b.n	80006e8 <fsm_pedestrian+0x100>
	case GREEN_PED:
		setPedestrianLed(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f000 fe68 	bl	800134c <setPedestrianLed>
		if (clock_counter_main <= 3 && clock_counter_main > 0) {
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <fsm_pedestrian+0x110>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b03      	cmp	r3, #3
 8000682:	dc14      	bgt.n	80006ae <fsm_pedestrian+0xc6>
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <fsm_pedestrian+0x110>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	dd10      	ble.n	80006ae <fsm_pedestrian+0xc6>
			Buzzer.period = clock_counter_main*100;
 800068c:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <fsm_pedestrian+0x110>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	fb02 f303 	mul.w	r3, r2, r3
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <fsm_pedestrian+0x108>)
 8000698:	6093      	str	r3, [r2, #8]
			Buzzer.volume = 12000/clock_counter_main;
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <fsm_pedestrian+0x110>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80006a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <fsm_pedestrian+0x108>)
 80006a8:	6053      	str	r3, [r2, #4]
			setBuzzer();
 80006aa:	f7ff ff55 	bl	8000558 <setBuzzer>
		}
		if (clock_counter_main <= 0) {
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <fsm_pedestrian+0x110>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	dc15      	bgt.n	80006e2 <fsm_pedestrian+0xfa>
			pedStatus = RED_PED;
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <fsm_pedestrian+0x104>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	601a      	str	r2, [r3, #0]
			Buzzer.status = OFF;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <fsm_pedestrian+0x108>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
			setBuzzer();
 80006c2:	f7ff ff49 	bl	8000558 <setBuzzer>
		}
		break;
 80006c6:	e00c      	b.n	80006e2 <fsm_pedestrian+0xfa>
	case RED_PED:
		setPedestrianLed(0);
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 fe3f 	bl	800134c <setPedestrianLed>
		if (clock_counter_side <= 0) {
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <fsm_pedestrian+0x114>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	dc07      	bgt.n	80006e6 <fsm_pedestrian+0xfe>
			pedStatus = GREEN_PED;
 80006d6:	4b05      	ldr	r3, [pc, #20]	; (80006ec <fsm_pedestrian+0x104>)
 80006d8:	2202      	movs	r2, #2
 80006da:	601a      	str	r2, [r3, #0]
		}
		break;
 80006dc:	e003      	b.n	80006e6 <fsm_pedestrian+0xfe>
	default:
		break;
 80006de:	bf00      	nop
 80006e0:	e002      	b.n	80006e8 <fsm_pedestrian+0x100>
		break;
 80006e2:	bf00      	nop
 80006e4:	e000      	b.n	80006e8 <fsm_pedestrian+0x100>
		break;
 80006e6:	bf00      	nop
	}
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000140 	.word	0x20000140
 80006f0:	20000144 	.word	0x20000144
 80006f4:	2000008c 	.word	0x2000008c
 80006f8:	20000150 	.word	0x20000150
 80006fc:	20000154 	.word	0x20000154

08000700 <fsm_traffic_manual_mode>:

//MANUAL MODE
void fsm_traffic_manual_mode(void){
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	switch(manualStatus){
 8000704:	4b3b      	ldr	r3, [pc, #236]	; (80007f4 <fsm_traffic_manual_mode+0xf4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b0a      	cmp	r3, #10
 800070a:	d867      	bhi.n	80007dc <fsm_traffic_manual_mode+0xdc>
 800070c:	a201      	add	r2, pc, #4	; (adr r2, 8000714 <fsm_traffic_manual_mode+0x14>)
 800070e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000712:	bf00      	nop
 8000714:	080007dd 	.word	0x080007dd
 8000718:	0800074d 	.word	0x0800074d
 800071c:	08000771 	.word	0x08000771
 8000720:	08000795 	.word	0x08000795
 8000724:	080007b9 	.word	0x080007b9
 8000728:	080007dd 	.word	0x080007dd
 800072c:	080007dd 	.word	0x080007dd
 8000730:	080007dd 	.word	0x080007dd
 8000734:	080007dd 	.word	0x080007dd
 8000738:	080007dd 	.word	0x080007dd
 800073c:	08000741 	.word	0x08000741
	case OFF:
		// do nothing
		break;
	case INIT:
		manualStatus = RED_GREEN;
 8000740:	4b2c      	ldr	r3, [pc, #176]	; (80007f4 <fsm_traffic_manual_mode+0xf4>)
 8000742:	2201      	movs	r2, #1
 8000744:	601a      	str	r2, [r3, #0]
		clearRoadLed();
 8000746:	f000 fdf5 	bl	8001334 <clearRoadLed>
		break;
 800074a:	e050      	b.n	80007ee <fsm_traffic_manual_mode+0xee>
	case RED_GREEN:
		turnOnRed(0);
 800074c:	2000      	movs	r0, #0
 800074e:	f000 fd27 	bl	80011a0 <turnOnRed>
		turnOnGreen(1);
 8000752:	2001      	movs	r0, #1
 8000754:	f000 fd76 	bl	8001244 <turnOnGreen>
		if (isButtonShortPress(0)){
 8000758:	2000      	movs	r0, #0
 800075a:	f7ff fe17 	bl	800038c <isButtonShortPress>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d03d      	beq.n	80007e0 <fsm_traffic_manual_mode+0xe0>
			manualStatus = RED_AMBER;
 8000764:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <fsm_traffic_manual_mode+0xf4>)
 8000766:	2202      	movs	r2, #2
 8000768:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 800076a:	f000 fde3 	bl	8001334 <clearRoadLed>
		}
		break;
 800076e:	e037      	b.n	80007e0 <fsm_traffic_manual_mode+0xe0>
	case RED_AMBER:
		turnOnRed(0);
 8000770:	2000      	movs	r0, #0
 8000772:	f000 fd15 	bl	80011a0 <turnOnRed>
		turnOnAmber(1);
 8000776:	2001      	movs	r0, #1
 8000778:	f000 fd3a 	bl	80011f0 <turnOnAmber>
		if(isButtonShortPress(0)){
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff fe05 	bl	800038c <isButtonShortPress>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d02d      	beq.n	80007e4 <fsm_traffic_manual_mode+0xe4>
			manualStatus = GREEN_RED;
 8000788:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <fsm_traffic_manual_mode+0xf4>)
 800078a:	2203      	movs	r2, #3
 800078c:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 800078e:	f000 fdd1 	bl	8001334 <clearRoadLed>
		}
		break;
 8000792:	e027      	b.n	80007e4 <fsm_traffic_manual_mode+0xe4>
	case GREEN_RED:
		turnOnGreen(0);
 8000794:	2000      	movs	r0, #0
 8000796:	f000 fd55 	bl	8001244 <turnOnGreen>
		turnOnRed(1);
 800079a:	2001      	movs	r0, #1
 800079c:	f000 fd00 	bl	80011a0 <turnOnRed>
		if(isButtonShortPress(0)){
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff fdf3 	bl	800038c <isButtonShortPress>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d01d      	beq.n	80007e8 <fsm_traffic_manual_mode+0xe8>
			manualStatus = AMBER_RED;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <fsm_traffic_manual_mode+0xf4>)
 80007ae:	2204      	movs	r2, #4
 80007b0:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 80007b2:	f000 fdbf 	bl	8001334 <clearRoadLed>
		}
		break;
 80007b6:	e017      	b.n	80007e8 <fsm_traffic_manual_mode+0xe8>
	case AMBER_RED:
		turnOnAmber(0);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 fd19 	bl	80011f0 <turnOnAmber>
		turnOnRed(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 fcee 	bl	80011a0 <turnOnRed>
		if(isButtonShortPress(0)){
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fde1 	bl	800038c <isButtonShortPress>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00d      	beq.n	80007ec <fsm_traffic_manual_mode+0xec>
			manualStatus = RED_GREEN;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <fsm_traffic_manual_mode+0xf4>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 80007d6:	f000 fdad 	bl	8001334 <clearRoadLed>
		}
		break;
 80007da:	e007      	b.n	80007ec <fsm_traffic_manual_mode+0xec>
	default:
		break;
 80007dc:	bf00      	nop
 80007de:	e006      	b.n	80007ee <fsm_traffic_manual_mode+0xee>
		break;
 80007e0:	bf00      	nop
 80007e2:	e004      	b.n	80007ee <fsm_traffic_manual_mode+0xee>
		break;
 80007e4:	bf00      	nop
 80007e6:	e002      	b.n	80007ee <fsm_traffic_manual_mode+0xee>
		break;
 80007e8:	bf00      	nop
 80007ea:	e000      	b.n	80007ee <fsm_traffic_manual_mode+0xee>
		break;
 80007ec:	bf00      	nop
	}
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000138 	.word	0x20000138

080007f8 <logNewTime>:

//TUNING MODE
void logNewTime(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	if (tuningStatus == RED_ADJ) HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER RED :%d#\r\n",timeRed),500);
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <logNewTime+0x7c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d10e      	bne.n	8000822 <logNewTime+0x2a>
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <logNewTime+0x80>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	491c      	ldr	r1, [pc, #112]	; (800087c <logNewTime+0x84>)
 800080c:	481c      	ldr	r0, [pc, #112]	; (8000880 <logNewTime+0x88>)
 800080e:	f003 ffff 	bl	8004810 <siprintf>
 8000812:	4603      	mov	r3, r0
 8000814:	b29a      	uxth	r2, r3
 8000816:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800081a:	4919      	ldr	r1, [pc, #100]	; (8000880 <logNewTime+0x88>)
 800081c:	4819      	ldr	r0, [pc, #100]	; (8000884 <logNewTime+0x8c>)
 800081e:	f003 f933 	bl	8003a88 <HAL_UART_Transmit>
	if (tuningStatus == AMBER_ADJ) HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER AMBER :%d#\r\n",timeAmber),500);
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <logNewTime+0x7c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d10e      	bne.n	8000848 <logNewTime+0x50>
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <logNewTime+0x90>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	461a      	mov	r2, r3
 8000830:	4916      	ldr	r1, [pc, #88]	; (800088c <logNewTime+0x94>)
 8000832:	4813      	ldr	r0, [pc, #76]	; (8000880 <logNewTime+0x88>)
 8000834:	f003 ffec 	bl	8004810 <siprintf>
 8000838:	4603      	mov	r3, r0
 800083a:	b29a      	uxth	r2, r3
 800083c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000840:	490f      	ldr	r1, [pc, #60]	; (8000880 <logNewTime+0x88>)
 8000842:	4810      	ldr	r0, [pc, #64]	; (8000884 <logNewTime+0x8c>)
 8000844:	f003 f920 	bl	8003a88 <HAL_UART_Transmit>
	if (tuningStatus == GREEN_ADJ) HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER GREEN :%d#\r\n",timeGreen),500);
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <logNewTime+0x7c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b03      	cmp	r3, #3
 800084e:	d10e      	bne.n	800086e <logNewTime+0x76>
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <logNewTime+0x98>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	490f      	ldr	r1, [pc, #60]	; (8000894 <logNewTime+0x9c>)
 8000858:	4809      	ldr	r0, [pc, #36]	; (8000880 <logNewTime+0x88>)
 800085a:	f003 ffd9 	bl	8004810 <siprintf>
 800085e:	4603      	mov	r3, r0
 8000860:	b29a      	uxth	r2, r3
 8000862:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000866:	4906      	ldr	r1, [pc, #24]	; (8000880 <logNewTime+0x88>)
 8000868:	4806      	ldr	r0, [pc, #24]	; (8000884 <logNewTime+0x8c>)
 800086a:	f003 f90d 	bl	8003a88 <HAL_UART_Transmit>
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000013c 	.word	0x2000013c
 8000878:	20000090 	.word	0x20000090
 800087c:	08004f30 	.word	0x08004f30
 8000880:	20000214 	.word	0x20000214
 8000884:	200001cc 	.word	0x200001cc
 8000888:	20000094 	.word	0x20000094
 800088c:	08004f44 	.word	0x08004f44
 8000890:	20000098 	.word	0x20000098
 8000894:	08004f58 	.word	0x08004f58

08000898 <fsm_traffic_tunning_mode>:

void fsm_traffic_tunning_mode(void){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	switch(tuningStatus){
 800089c:	4b71      	ldr	r3, [pc, #452]	; (8000a64 <fsm_traffic_tunning_mode+0x1cc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b0a      	cmp	r3, #10
 80008a2:	f200 80d5 	bhi.w	8000a50 <fsm_traffic_tunning_mode+0x1b8>
 80008a6:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <fsm_traffic_tunning_mode+0x14>)
 80008a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ac:	080008d9 	.word	0x080008d9
 80008b0:	080008f5 	.word	0x080008f5
 80008b4:	080009dd 	.word	0x080009dd
 80008b8:	08000969 	.word	0x08000969
 80008bc:	08000a51 	.word	0x08000a51
 80008c0:	08000a51 	.word	0x08000a51
 80008c4:	08000a51 	.word	0x08000a51
 80008c8:	08000a51 	.word	0x08000a51
 80008cc:	08000a51 	.word	0x08000a51
 80008d0:	08000a51 	.word	0x08000a51
 80008d4:	080008d9 	.word	0x080008d9
	case OFF:
		// do nothing
	case INIT:
		tuningStatus = RED_ADJ;
 80008d8:	4b62      	ldr	r3, [pc, #392]	; (8000a64 <fsm_traffic_tunning_mode+0x1cc>)
 80008da:	2201      	movs	r2, #1
 80008dc:	601a      	str	r2, [r3, #0]
		clearRoadLed();
 80008de:	f000 fd29 	bl	8001334 <clearRoadLed>
		logNewTime();
 80008e2:	f7ff ff89 	bl	80007f8 <logNewTime>
		setTimer(timer_duration[1], 1);
 80008e6:	4b60      	ldr	r3, [pc, #384]	; (8000a68 <fsm_traffic_tunning_mode+0x1d0>)
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2101      	movs	r1, #1
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 ff3d 	bl	800176c <setTimer>
		break;
 80008f2:	e0b4      	b.n	8000a5e <fsm_traffic_tunning_mode+0x1c6>
	case RED_ADJ:
		blinkyRed();
 80008f4:	f000 fcd0 	bl	8001298 <blinkyRed>
		if (isButtonShortPress(2)){
 80008f8:	2002      	movs	r0, #2
 80008fa:	f7ff fd47 	bl	800038c <isButtonShortPress>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d00e      	beq.n	8000922 <fsm_traffic_tunning_mode+0x8a>
			timeRed++;
 8000904:	4b59      	ldr	r3, [pc, #356]	; (8000a6c <fsm_traffic_tunning_mode+0x1d4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3301      	adds	r3, #1
 800090a:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <fsm_traffic_tunning_mode+0x1d4>)
 800090c:	6013      	str	r3, [r2, #0]
			if (timeRed > 99) timeRed = 0;
 800090e:	4b57      	ldr	r3, [pc, #348]	; (8000a6c <fsm_traffic_tunning_mode+0x1d4>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b63      	cmp	r3, #99	; 0x63
 8000914:	dd02      	ble.n	800091c <fsm_traffic_tunning_mode+0x84>
 8000916:	4b55      	ldr	r3, [pc, #340]	; (8000a6c <fsm_traffic_tunning_mode+0x1d4>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
			logNewTime();
 800091c:	f7ff ff6c 	bl	80007f8 <logNewTime>
		else if (isButtonShortPress(1)){
			tuningStatus = GREEN_ADJ;
			clearRoadLed();
			logNewTime();
		}
		break;
 8000920:	e098      	b.n	8000a54 <fsm_traffic_tunning_mode+0x1bc>
		else if (isButtonLongPress(2)){
 8000922:	2002      	movs	r0, #2
 8000924:	f7ff fd56 	bl	80003d4 <isButtonLongPress>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d00e      	beq.n	800094c <fsm_traffic_tunning_mode+0xb4>
			timeRed--;
 800092e:	4b4f      	ldr	r3, [pc, #316]	; (8000a6c <fsm_traffic_tunning_mode+0x1d4>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	4a4d      	ldr	r2, [pc, #308]	; (8000a6c <fsm_traffic_tunning_mode+0x1d4>)
 8000936:	6013      	str	r3, [r2, #0]
			if (timeRed < 0) timeRed = 99;
 8000938:	4b4c      	ldr	r3, [pc, #304]	; (8000a6c <fsm_traffic_tunning_mode+0x1d4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	da02      	bge.n	8000946 <fsm_traffic_tunning_mode+0xae>
 8000940:	4b4a      	ldr	r3, [pc, #296]	; (8000a6c <fsm_traffic_tunning_mode+0x1d4>)
 8000942:	2263      	movs	r2, #99	; 0x63
 8000944:	601a      	str	r2, [r3, #0]
			logNewTime();
 8000946:	f7ff ff57 	bl	80007f8 <logNewTime>
		break;
 800094a:	e083      	b.n	8000a54 <fsm_traffic_tunning_mode+0x1bc>
		else if (isButtonShortPress(1)){
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff fd1d 	bl	800038c <isButtonShortPress>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d07d      	beq.n	8000a54 <fsm_traffic_tunning_mode+0x1bc>
			tuningStatus = GREEN_ADJ;
 8000958:	4b42      	ldr	r3, [pc, #264]	; (8000a64 <fsm_traffic_tunning_mode+0x1cc>)
 800095a:	2203      	movs	r2, #3
 800095c:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 800095e:	f000 fce9 	bl	8001334 <clearRoadLed>
			logNewTime();
 8000962:	f7ff ff49 	bl	80007f8 <logNewTime>
		break;
 8000966:	e075      	b.n	8000a54 <fsm_traffic_tunning_mode+0x1bc>
	case GREEN_ADJ:
		blinkyGreen();
 8000968:	f000 fcca 	bl	8001300 <blinkyGreen>
		if(isButtonShortPress(2)){
 800096c:	2002      	movs	r0, #2
 800096e:	f7ff fd0d 	bl	800038c <isButtonShortPress>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00e      	beq.n	8000996 <fsm_traffic_tunning_mode+0xfe>
			timeGreen++;
 8000978:	4b3d      	ldr	r3, [pc, #244]	; (8000a70 <fsm_traffic_tunning_mode+0x1d8>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	4a3c      	ldr	r2, [pc, #240]	; (8000a70 <fsm_traffic_tunning_mode+0x1d8>)
 8000980:	6013      	str	r3, [r2, #0]
			if (timeGreen > 99) timeGreen = 0;
 8000982:	4b3b      	ldr	r3, [pc, #236]	; (8000a70 <fsm_traffic_tunning_mode+0x1d8>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b63      	cmp	r3, #99	; 0x63
 8000988:	dd02      	ble.n	8000990 <fsm_traffic_tunning_mode+0xf8>
 800098a:	4b39      	ldr	r3, [pc, #228]	; (8000a70 <fsm_traffic_tunning_mode+0x1d8>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
			logNewTime();
 8000990:	f7ff ff32 	bl	80007f8 <logNewTime>
		else if(isButtonShortPress(1)){
			tuningStatus = AMBER_ADJ;
			clearRoadLed();
			logNewTime();
		}
		break;
 8000994:	e060      	b.n	8000a58 <fsm_traffic_tunning_mode+0x1c0>
		else if(isButtonLongPress(2)){
 8000996:	2002      	movs	r0, #2
 8000998:	f7ff fd1c 	bl	80003d4 <isButtonLongPress>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d00e      	beq.n	80009c0 <fsm_traffic_tunning_mode+0x128>
			timeGreen--;
 80009a2:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <fsm_traffic_tunning_mode+0x1d8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	4a31      	ldr	r2, [pc, #196]	; (8000a70 <fsm_traffic_tunning_mode+0x1d8>)
 80009aa:	6013      	str	r3, [r2, #0]
			if (timeGreen < 0) timeGreen = 99;
 80009ac:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <fsm_traffic_tunning_mode+0x1d8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	da02      	bge.n	80009ba <fsm_traffic_tunning_mode+0x122>
 80009b4:	4b2e      	ldr	r3, [pc, #184]	; (8000a70 <fsm_traffic_tunning_mode+0x1d8>)
 80009b6:	2263      	movs	r2, #99	; 0x63
 80009b8:	601a      	str	r2, [r3, #0]
			logNewTime();
 80009ba:	f7ff ff1d 	bl	80007f8 <logNewTime>
		break;
 80009be:	e04b      	b.n	8000a58 <fsm_traffic_tunning_mode+0x1c0>
		else if(isButtonShortPress(1)){
 80009c0:	2001      	movs	r0, #1
 80009c2:	f7ff fce3 	bl	800038c <isButtonShortPress>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d045      	beq.n	8000a58 <fsm_traffic_tunning_mode+0x1c0>
			tuningStatus = AMBER_ADJ;
 80009cc:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <fsm_traffic_tunning_mode+0x1cc>)
 80009ce:	2202      	movs	r2, #2
 80009d0:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 80009d2:	f000 fcaf 	bl	8001334 <clearRoadLed>
			logNewTime();
 80009d6:	f7ff ff0f 	bl	80007f8 <logNewTime>
		break;
 80009da:	e03d      	b.n	8000a58 <fsm_traffic_tunning_mode+0x1c0>
	case AMBER_ADJ:
		blinkyAmber();
 80009dc:	f000 fc76 	bl	80012cc <blinkyAmber>
		if (isButtonShortPress(2)){
 80009e0:	2002      	movs	r0, #2
 80009e2:	f7ff fcd3 	bl	800038c <isButtonShortPress>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d00e      	beq.n	8000a0a <fsm_traffic_tunning_mode+0x172>
			timeAmber++;
 80009ec:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <fsm_traffic_tunning_mode+0x1dc>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <fsm_traffic_tunning_mode+0x1dc>)
 80009f4:	6013      	str	r3, [r2, #0]
			if (timeAmber > 99) timeAmber = 0;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <fsm_traffic_tunning_mode+0x1dc>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b63      	cmp	r3, #99	; 0x63
 80009fc:	dd02      	ble.n	8000a04 <fsm_traffic_tunning_mode+0x16c>
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <fsm_traffic_tunning_mode+0x1dc>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
			logNewTime();
 8000a04:	f7ff fef8 	bl	80007f8 <logNewTime>
		else if (isButtonShortPress(1)){
			tuningStatus = RED_ADJ;
			clearRoadLed();
			logNewTime();
		}
		break;
 8000a08:	e028      	b.n	8000a5c <fsm_traffic_tunning_mode+0x1c4>
		else if(isButtonLongPress(2)){
 8000a0a:	2002      	movs	r0, #2
 8000a0c:	f7ff fce2 	bl	80003d4 <isButtonLongPress>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d00e      	beq.n	8000a34 <fsm_traffic_tunning_mode+0x19c>
			timeAmber--;
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <fsm_traffic_tunning_mode+0x1dc>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	4a15      	ldr	r2, [pc, #84]	; (8000a74 <fsm_traffic_tunning_mode+0x1dc>)
 8000a1e:	6013      	str	r3, [r2, #0]
			if (timeAmber < 0) timeAmber = 99;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <fsm_traffic_tunning_mode+0x1dc>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	da02      	bge.n	8000a2e <fsm_traffic_tunning_mode+0x196>
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <fsm_traffic_tunning_mode+0x1dc>)
 8000a2a:	2263      	movs	r2, #99	; 0x63
 8000a2c:	601a      	str	r2, [r3, #0]
			logNewTime();
 8000a2e:	f7ff fee3 	bl	80007f8 <logNewTime>
		break;
 8000a32:	e013      	b.n	8000a5c <fsm_traffic_tunning_mode+0x1c4>
		else if (isButtonShortPress(1)){
 8000a34:	2001      	movs	r0, #1
 8000a36:	f7ff fca9 	bl	800038c <isButtonShortPress>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00d      	beq.n	8000a5c <fsm_traffic_tunning_mode+0x1c4>
			tuningStatus = RED_ADJ;
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <fsm_traffic_tunning_mode+0x1cc>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 8000a46:	f000 fc75 	bl	8001334 <clearRoadLed>
			logNewTime();
 8000a4a:	f7ff fed5 	bl	80007f8 <logNewTime>
		break;
 8000a4e:	e005      	b.n	8000a5c <fsm_traffic_tunning_mode+0x1c4>

	default:
		break;
 8000a50:	bf00      	nop
 8000a52:	e004      	b.n	8000a5e <fsm_traffic_tunning_mode+0x1c6>
		break;
 8000a54:	bf00      	nop
 8000a56:	e002      	b.n	8000a5e <fsm_traffic_tunning_mode+0x1c6>
		break;
 8000a58:	bf00      	nop
 8000a5a:	e000      	b.n	8000a5e <fsm_traffic_tunning_mode+0x1c6>
		break;
 8000a5c:	bf00      	nop
	}
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000013c 	.word	0x2000013c
 8000a68:	2000009c 	.word	0x2000009c
 8000a6c:	20000090 	.word	0x20000090
 8000a70:	20000098 	.word	0x20000098
 8000a74:	20000094 	.word	0x20000094

08000a78 <fsm_switch_mode>:

void fsm_switch_mode(void){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	if (isButtonLongPress(0)){
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff fca9 	bl	80003d4 <isButtonLongPress>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d031      	beq.n	8000aec <fsm_switch_mode+0x74>
		if (trafficMode != MANUAL_MODE) {
 8000a88:	4b35      	ldr	r3, [pc, #212]	; (8000b60 <fsm_switch_mode+0xe8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d01d      	beq.n	8000acc <fsm_switch_mode+0x54>
			trafficMode = MANUAL_MODE;
 8000a90:	4b33      	ldr	r3, [pc, #204]	; (8000b60 <fsm_switch_mode+0xe8>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO MANUAL MODE#\r\n"),500);
 8000a96:	4933      	ldr	r1, [pc, #204]	; (8000b64 <fsm_switch_mode+0xec>)
 8000a98:	4833      	ldr	r0, [pc, #204]	; (8000b68 <fsm_switch_mode+0xf0>)
 8000a9a:	f003 feb9 	bl	8004810 <siprintf>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000aa6:	4930      	ldr	r1, [pc, #192]	; (8000b68 <fsm_switch_mode+0xf0>)
 8000aa8:	4830      	ldr	r0, [pc, #192]	; (8000b6c <fsm_switch_mode+0xf4>)
 8000aaa:	f002 ffed 	bl	8003a88 <HAL_UART_Transmit>
			// TODO: prepare for manual mode
			manualStatus = INIT;
 8000aae:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <fsm_switch_mode+0xf8>)
 8000ab0:	220a      	movs	r2, #10
 8000ab2:	601a      	str	r2, [r3, #0]
			autoStatus= OFF;
 8000ab4:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <fsm_switch_mode+0xfc>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
			tuningStatus = OFF;
 8000aba:	4b2f      	ldr	r3, [pc, #188]	; (8000b78 <fsm_switch_mode+0x100>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
			pedStatus = OFF;
 8000ac0:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <fsm_switch_mode+0x104>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
			fsm_pedestrian();
 8000ac6:	f7ff fd8f 	bl	80005e8 <fsm_pedestrian>
		else {
			trafficMode = INIT;
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO AUTO MODE#\r\n"),500);
		}
	}
}
 8000aca:	e046      	b.n	8000b5a <fsm_switch_mode+0xe2>
			trafficMode = INIT;
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <fsm_switch_mode+0xe8>)
 8000ace:	220a      	movs	r2, #10
 8000ad0:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO AUTO MODE#\r\n"),500);
 8000ad2:	492b      	ldr	r1, [pc, #172]	; (8000b80 <fsm_switch_mode+0x108>)
 8000ad4:	4824      	ldr	r0, [pc, #144]	; (8000b68 <fsm_switch_mode+0xf0>)
 8000ad6:	f003 fe9b 	bl	8004810 <siprintf>
 8000ada:	4603      	mov	r3, r0
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ae2:	4921      	ldr	r1, [pc, #132]	; (8000b68 <fsm_switch_mode+0xf0>)
 8000ae4:	4821      	ldr	r0, [pc, #132]	; (8000b6c <fsm_switch_mode+0xf4>)
 8000ae6:	f002 ffcf 	bl	8003a88 <HAL_UART_Transmit>
}
 8000aea:	e036      	b.n	8000b5a <fsm_switch_mode+0xe2>
	else if (isButtonLongPress(1)){
 8000aec:	2001      	movs	r0, #1
 8000aee:	f7ff fc71 	bl	80003d4 <isButtonLongPress>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d030      	beq.n	8000b5a <fsm_switch_mode+0xe2>
		if (trafficMode != TUNING_MODE) {
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <fsm_switch_mode+0xe8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d01d      	beq.n	8000b3c <fsm_switch_mode+0xc4>
			trafficMode = TUNING_MODE;
 8000b00:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <fsm_switch_mode+0xe8>)
 8000b02:	2203      	movs	r2, #3
 8000b04:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO TUNING MODE#\r\n"),500);
 8000b06:	491f      	ldr	r1, [pc, #124]	; (8000b84 <fsm_switch_mode+0x10c>)
 8000b08:	4817      	ldr	r0, [pc, #92]	; (8000b68 <fsm_switch_mode+0xf0>)
 8000b0a:	f003 fe81 	bl	8004810 <siprintf>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b16:	4914      	ldr	r1, [pc, #80]	; (8000b68 <fsm_switch_mode+0xf0>)
 8000b18:	4814      	ldr	r0, [pc, #80]	; (8000b6c <fsm_switch_mode+0xf4>)
 8000b1a:	f002 ffb5 	bl	8003a88 <HAL_UART_Transmit>
			tuningStatus = INIT;
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <fsm_switch_mode+0x100>)
 8000b20:	220a      	movs	r2, #10
 8000b22:	601a      	str	r2, [r3, #0]
			autoStatus = OFF;
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <fsm_switch_mode+0xfc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
			manualStatus = OFF;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <fsm_switch_mode+0xf8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
			pedStatus = OFF;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <fsm_switch_mode+0x104>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
			fsm_pedestrian();
 8000b36:	f7ff fd57 	bl	80005e8 <fsm_pedestrian>
}
 8000b3a:	e00e      	b.n	8000b5a <fsm_switch_mode+0xe2>
			trafficMode = INIT;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <fsm_switch_mode+0xe8>)
 8000b3e:	220a      	movs	r2, #10
 8000b40:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO AUTO MODE#\r\n"),500);
 8000b42:	490f      	ldr	r1, [pc, #60]	; (8000b80 <fsm_switch_mode+0x108>)
 8000b44:	4808      	ldr	r0, [pc, #32]	; (8000b68 <fsm_switch_mode+0xf0>)
 8000b46:	f003 fe63 	bl	8004810 <siprintf>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b52:	4905      	ldr	r1, [pc, #20]	; (8000b68 <fsm_switch_mode+0xf0>)
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <fsm_switch_mode+0xf4>)
 8000b56:	f002 ff97 	bl	8003a88 <HAL_UART_Transmit>
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000088 	.word	0x20000088
 8000b64:	08004f6c 	.word	0x08004f6c
 8000b68:	20000214 	.word	0x20000214
 8000b6c:	200001cc 	.word	0x200001cc
 8000b70:	20000138 	.word	0x20000138
 8000b74:	2000008c 	.word	0x2000008c
 8000b78:	2000013c 	.word	0x2000013c
 8000b7c:	20000140 	.word	0x20000140
 8000b80:	08004f88 	.word	0x08004f88
 8000b84:	08004fa0 	.word	0x08004fa0

08000b88 <fsm_traffic>:

void fsm_traffic(void){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	switch(trafficMode){
 8000b8c:	4b45      	ldr	r3, [pc, #276]	; (8000ca4 <fsm_traffic+0x11c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	2b09      	cmp	r3, #9
 8000b94:	f200 8082 	bhi.w	8000c9c <fsm_traffic+0x114>
 8000b98:	a201      	add	r2, pc, #4	; (adr r2, 8000ba0 <fsm_traffic+0x18>)
 8000b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9e:	bf00      	nop
 8000ba0:	08000c43 	.word	0x08000c43
 8000ba4:	08000c91 	.word	0x08000c91
 8000ba8:	08000c97 	.word	0x08000c97
 8000bac:	08000c9d 	.word	0x08000c9d
 8000bb0:	08000c9d 	.word	0x08000c9d
 8000bb4:	08000c9d 	.word	0x08000c9d
 8000bb8:	08000c9d 	.word	0x08000c9d
 8000bbc:	08000c9d 	.word	0x08000c9d
 8000bc0:	08000c9d 	.word	0x08000c9d
 8000bc4:	08000bc9 	.word	0x08000bc9
	case INIT:
		if (timeRed != (timeAmber + timeGreen)){
 8000bc8:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <fsm_traffic+0x120>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b37      	ldr	r3, [pc, #220]	; (8000cac <fsm_traffic+0x124>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4b37      	ldr	r3, [pc, #220]	; (8000cb0 <fsm_traffic+0x128>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d01b      	beq.n	8000c12 <fsm_traffic+0x8a>
			trafficMode = ERROR_MODE;
 8000bda:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <fsm_traffic+0x11c>)
 8000bdc:	2204      	movs	r2, #4
 8000bde:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER ERROR#\r\n"),500);
 8000be0:	4934      	ldr	r1, [pc, #208]	; (8000cb4 <fsm_traffic+0x12c>)
 8000be2:	4835      	ldr	r0, [pc, #212]	; (8000cb8 <fsm_traffic+0x130>)
 8000be4:	f003 fe14 	bl	8004810 <siprintf>
 8000be8:	4603      	mov	r3, r0
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bf0:	4931      	ldr	r1, [pc, #196]	; (8000cb8 <fsm_traffic+0x130>)
 8000bf2:	4832      	ldr	r0, [pc, #200]	; (8000cbc <fsm_traffic+0x134>)
 8000bf4:	f002 ff48 	bl	8003a88 <HAL_UART_Transmit>
			autoStatus = OFF;
 8000bf8:	4b31      	ldr	r3, [pc, #196]	; (8000cc0 <fsm_traffic+0x138>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
			manualStatus = OFF;
 8000bfe:	4b31      	ldr	r3, [pc, #196]	; (8000cc4 <fsm_traffic+0x13c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
			tuningStatus = OFF;
 8000c04:	4b30      	ldr	r3, [pc, #192]	; (8000cc8 <fsm_traffic+0x140>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
			pedStatus = OFF;
 8000c0a:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <fsm_traffic+0x144>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	e014      	b.n	8000c3c <fsm_traffic+0xb4>
		}
		else {
			trafficMode = AUTO_MODE;
 8000c12:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <fsm_traffic+0x11c>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	601a      	str	r2, [r3, #0]
			autoStatus = INIT;
 8000c18:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <fsm_traffic+0x138>)
 8000c1a:	220a      	movs	r2, #10
 8000c1c:	601a      	str	r2, [r3, #0]
			manualStatus = OFF;
 8000c1e:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <fsm_traffic+0x13c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
			tuningStatus = OFF;
 8000c24:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <fsm_traffic+0x140>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
			pedStatus = OFF;
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <fsm_traffic+0x144>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
			setTimer(timer_duration[0], 0);
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <fsm_traffic+0x148>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fd98 	bl	800176c <setTimer>
		}
		turnOffAllLED();
 8000c3c:	f000 faa4 	bl	8001188 <turnOffAllLED>
		break;
 8000c40:	e02d      	b.n	8000c9e <fsm_traffic+0x116>
	case AUTO_MODE:
		if (isButtonShortPress(3)) {
 8000c42:	2003      	movs	r0, #3
 8000c44:	f7ff fba2 	bl	800038c <isButtonShortPress>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d014      	beq.n	8000c78 <fsm_traffic+0xf0>
			if (pedStatus == OFF) {
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <fsm_traffic+0x144>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10d      	bne.n	8000c72 <fsm_traffic+0xea>
				pedStatus = INIT;
 8000c56:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <fsm_traffic+0x144>)
 8000c58:	220a      	movs	r2, #10
 8000c5a:	601a      	str	r2, [r3, #0]
				setTimer(4*1000*timeRed, 2);
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <fsm_traffic+0x128>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000c64:	fb02 f303 	mul.w	r3, r2, r3
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fd7e 	bl	800176c <setTimer>
 8000c70:	e002      	b.n	8000c78 <fsm_traffic+0xf0>
			}
			else pedStatus = OFF;
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <fsm_traffic+0x144>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
		}
		if (timer_flag[2] == 1) pedStatus = OFF;
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <fsm_traffic+0x14c>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d102      	bne.n	8000c86 <fsm_traffic+0xfe>
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <fsm_traffic+0x144>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
		fsm_pedestrian();
 8000c86:	f7ff fcaf 	bl	80005e8 <fsm_pedestrian>
		fsm_traffic_auto_mode();
 8000c8a:	f7ff fbc7 	bl	800041c <fsm_traffic_auto_mode>
		break;
 8000c8e:	e006      	b.n	8000c9e <fsm_traffic+0x116>
	case MANUAL_MODE:
		fsm_traffic_manual_mode();
 8000c90:	f7ff fd36 	bl	8000700 <fsm_traffic_manual_mode>
		break;
 8000c94:	e003      	b.n	8000c9e <fsm_traffic+0x116>
	case TUNING_MODE:
		fsm_traffic_tunning_mode();
 8000c96:	f7ff fdff 	bl	8000898 <fsm_traffic_tunning_mode>
		break;
 8000c9a:	e000      	b.n	8000c9e <fsm_traffic+0x116>
	default:
		break;
 8000c9c:	bf00      	nop
	}
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000088 	.word	0x20000088
 8000ca8:	20000094 	.word	0x20000094
 8000cac:	20000098 	.word	0x20000098
 8000cb0:	20000090 	.word	0x20000090
 8000cb4:	08004fbc 	.word	0x08004fbc
 8000cb8:	20000214 	.word	0x20000214
 8000cbc:	200001cc 	.word	0x200001cc
 8000cc0:	2000008c 	.word	0x2000008c
 8000cc4:	20000138 	.word	0x20000138
 8000cc8:	2000013c 	.word	0x2000013c
 8000ccc:	20000140 	.word	0x20000140
 8000cd0:	2000009c 	.word	0x2000009c
 8000cd4:	20000168 	.word	0x20000168

08000cd8 <clock_counter_traffic_update>:

void clock_counter_traffic_update(void){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	if((timer_flag[0] == 1) && (trafficMode == AUTO_MODE)){
 8000cdc:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <clock_counter_traffic_update+0xcc>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d15c      	bne.n	8000d9e <clock_counter_traffic_update+0xc6>
 8000ce4:	4b30      	ldr	r3, [pc, #192]	; (8000da8 <clock_counter_traffic_update+0xd0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d158      	bne.n	8000d9e <clock_counter_traffic_update+0xc6>
		clock_counter_main--;
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <clock_counter_traffic_update+0xd4>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	4a2e      	ldr	r2, [pc, #184]	; (8000dac <clock_counter_traffic_update+0xd4>)
 8000cf4:	6013      	str	r3, [r2, #0]
		clock_counter_side--;
 8000cf6:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <clock_counter_traffic_update+0xd8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	4a2c      	ldr	r2, [pc, #176]	; (8000db0 <clock_counter_traffic_update+0xd8>)
 8000cfe:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "\n!7SEG WAY1:%d#\r\n",clock_counter_main),500);
 8000d00:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <clock_counter_traffic_update+0xd4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	492b      	ldr	r1, [pc, #172]	; (8000db4 <clock_counter_traffic_update+0xdc>)
 8000d08:	482b      	ldr	r0, [pc, #172]	; (8000db8 <clock_counter_traffic_update+0xe0>)
 8000d0a:	f003 fd81 	bl	8004810 <siprintf>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d16:	4928      	ldr	r1, [pc, #160]	; (8000db8 <clock_counter_traffic_update+0xe0>)
 8000d18:	4828      	ldr	r0, [pc, #160]	; (8000dbc <clock_counter_traffic_update+0xe4>)
 8000d1a:	f002 feb5 	bl	8003a88 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!7SEG WAY2:%d#\r\n",clock_counter_side),500);
 8000d1e:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <clock_counter_traffic_update+0xd8>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	4926      	ldr	r1, [pc, #152]	; (8000dc0 <clock_counter_traffic_update+0xe8>)
 8000d26:	4824      	ldr	r0, [pc, #144]	; (8000db8 <clock_counter_traffic_update+0xe0>)
 8000d28:	f003 fd72 	bl	8004810 <siprintf>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d34:	4920      	ldr	r1, [pc, #128]	; (8000db8 <clock_counter_traffic_update+0xe0>)
 8000d36:	4821      	ldr	r0, [pc, #132]	; (8000dbc <clock_counter_traffic_update+0xe4>)
 8000d38:	f002 fea6 	bl	8003a88 <HAL_UART_Transmit>
		if (pedStatus != OFF) {
 8000d3c:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <clock_counter_traffic_update+0xec>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d026      	beq.n	8000d92 <clock_counter_traffic_update+0xba>
			if (pedStatus == GREEN_PED)
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <clock_counter_traffic_update+0xec>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d10f      	bne.n	8000d6c <clock_counter_traffic_update+0x94>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!PEDESTRIAN: %d#\r\n", clock_counter_main),500);
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <clock_counter_traffic_update+0xd4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	491d      	ldr	r1, [pc, #116]	; (8000dc8 <clock_counter_traffic_update+0xf0>)
 8000d54:	4818      	ldr	r0, [pc, #96]	; (8000db8 <clock_counter_traffic_update+0xe0>)
 8000d56:	f003 fd5b 	bl	8004810 <siprintf>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d62:	4915      	ldr	r1, [pc, #84]	; (8000db8 <clock_counter_traffic_update+0xe0>)
 8000d64:	4815      	ldr	r0, [pc, #84]	; (8000dbc <clock_counter_traffic_update+0xe4>)
 8000d66:	f002 fe8f 	bl	8003a88 <HAL_UART_Transmit>
 8000d6a:	e012      	b.n	8000d92 <clock_counter_traffic_update+0xba>
			else if (pedStatus == RED_PED)
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <clock_counter_traffic_update+0xec>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d10e      	bne.n	8000d92 <clock_counter_traffic_update+0xba>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!PEDESTRIAN: %d#\r\n", clock_counter_side),500);
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <clock_counter_traffic_update+0xd8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4913      	ldr	r1, [pc, #76]	; (8000dc8 <clock_counter_traffic_update+0xf0>)
 8000d7c:	480e      	ldr	r0, [pc, #56]	; (8000db8 <clock_counter_traffic_update+0xe0>)
 8000d7e:	f003 fd47 	bl	8004810 <siprintf>
 8000d82:	4603      	mov	r3, r0
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d8a:	490b      	ldr	r1, [pc, #44]	; (8000db8 <clock_counter_traffic_update+0xe0>)
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <clock_counter_traffic_update+0xe4>)
 8000d8e:	f002 fe7b 	bl	8003a88 <HAL_UART_Transmit>
		}
		setTimer(timer_duration[0], 0);
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <clock_counter_traffic_update+0xf4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 fce7 	bl	800176c <setTimer>
	}
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000168 	.word	0x20000168
 8000da8:	20000088 	.word	0x20000088
 8000dac:	20000150 	.word	0x20000150
 8000db0:	20000154 	.word	0x20000154
 8000db4:	08004fcc 	.word	0x08004fcc
 8000db8:	20000214 	.word	0x20000214
 8000dbc:	200001cc 	.word	0x200001cc
 8000dc0:	08004fe0 	.word	0x08004fe0
 8000dc4:	20000140 	.word	0x20000140
 8000dc8:	08004ff4 	.word	0x08004ff4
 8000dcc:	2000009c 	.word	0x2000009c

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd4:	f000 fea6 	bl	8001b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd8:	f000 f844 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ddc:	f000 f96a 	bl	80010b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000de0:	f000 f87c 	bl	8000edc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000de4:	f000 f93c 	bl	8001060 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000de8:	f000 f8c4 	bl	8000f74 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000dec:	4815      	ldr	r0, [pc, #84]	; (8000e44 <main+0x74>)
 8000dee:	f001 fee5 	bl	8002bbc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000df2:	2100      	movs	r1, #0
 8000df4:	4814      	ldr	r0, [pc, #80]	; (8000e48 <main+0x78>)
 8000df6:	f001 ff8b 	bl	8002d10 <HAL_TIM_PWM_Start>
//  HAL_TIM_Base_Start_IT(&htim3);
  setTimer(timer_duration[0], 0);
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <main+0x7c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 fcb3 	bl	800176c <setTimer>

  SCH_Init();
 8000e06:	f000 fb0d 	bl	8001424 <SCH_Init>

  SCH_Add_Task(fsm_traffic, 0, 1);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4810      	ldr	r0, [pc, #64]	; (8000e50 <main+0x80>)
 8000e10:	f000 fb22 	bl	8001458 <SCH_Add_Task>
  SCH_Add_Task(clock_counter_traffic_update, 0, 1);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2100      	movs	r1, #0
 8000e18:	480e      	ldr	r0, [pc, #56]	; (8000e54 <main+0x84>)
 8000e1a:	f000 fb1d 	bl	8001458 <SCH_Add_Task>
  SCH_Add_Task(fsm_switch_mode, 0, 1);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2100      	movs	r1, #0
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <main+0x88>)
 8000e24:	f000 fb18 	bl	8001458 <SCH_Add_Task>
  SCH_Add_Task(timerRun, 0, 1);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	480b      	ldr	r0, [pc, #44]	; (8000e5c <main+0x8c>)
 8000e2e:	f000 fb13 	bl	8001458 <SCH_Add_Task>
  SCH_Add_Task(getButtonValue, 0, 1);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2100      	movs	r1, #0
 8000e36:	480a      	ldr	r0, [pc, #40]	; (8000e60 <main+0x90>)
 8000e38:	f000 fb0e 	bl	8001458 <SCH_Add_Task>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8000e3c:	f000 fc68 	bl	8001710 <SCH_Dispatch_Tasks>
 8000e40:	e7fc      	b.n	8000e3c <main+0x6c>
 8000e42:	bf00      	nop
 8000e44:	20000248 	.word	0x20000248
 8000e48:	20000184 	.word	0x20000184
 8000e4c:	2000009c 	.word	0x2000009c
 8000e50:	08000b89 	.word	0x08000b89
 8000e54:	08000cd9 	.word	0x08000cd9
 8000e58:	08000a79 	.word	0x08000a79
 8000e5c:	080017ad 	.word	0x080017ad
 8000e60:	0800014d 	.word	0x0800014d

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b090      	sub	sp, #64	; 0x40
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	2228      	movs	r2, #40	; 0x28
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 fc0e 	bl	8004694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e8e:	2310      	movs	r3, #16
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e96:	f107 0318 	add.w	r3, r7, #24
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 fa30 	bl	8002300 <HAL_RCC_OscConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ea6:	f000 f969 	bl	800117c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eaa:	230f      	movs	r3, #15
 8000eac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 fc9c 	bl	8002800 <HAL_RCC_ClockConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ece:	f000 f955 	bl	800117c <Error_Handler>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3740      	adds	r7, #64	; 0x40
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000efa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000efe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f02:	2209      	movs	r2, #9
 8000f04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f0e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f20:	4813      	ldr	r0, [pc, #76]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f22:	f001 fdfb 	bl	8002b1c <HAL_TIM_Base_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f2c:	f000 f926 	bl	800117c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f3e:	f002 f953 	bl	80031e8 <HAL_TIM_ConfigClockSource>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f48:	f000 f918 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f5a:	f002 fcd5 	bl	8003908 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f64:	f000 f90a 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000248 	.word	0x20000248

08000f74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08e      	sub	sp, #56	; 0x38
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	f107 0320 	add.w	r3, r7, #32
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
 8000fa0:	615a      	str	r2, [r3, #20]
 8000fa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fa4:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000fa6:	4a2d      	ldr	r2, [pc, #180]	; (800105c <MX_TIM3_Init+0xe8>)
 8000fa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000fac:	2209      	movs	r2, #9
 8000fae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb0:	4b29      	ldr	r3, [pc, #164]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7999;
 8000fb6:	4b28      	ldr	r3, [pc, #160]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000fb8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fc4:	4b24      	ldr	r3, [pc, #144]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fca:	4823      	ldr	r0, [pc, #140]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000fcc:	f001 fda6 	bl	8002b1c <HAL_TIM_Base_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000fd6:	f000 f8d1 	bl	800117c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	481c      	ldr	r0, [pc, #112]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000fe8:	f002 f8fe 	bl	80031e8 <HAL_TIM_ConfigClockSource>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ff2:	f000 f8c3 	bl	800117c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ff6:	4818      	ldr	r0, [pc, #96]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000ff8:	f001 fe32 	bl	8002c60 <HAL_TIM_PWM_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001002:	f000 f8bb 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	4619      	mov	r1, r3
 8001014:	4810      	ldr	r0, [pc, #64]	; (8001058 <MX_TIM3_Init+0xe4>)
 8001016:	f002 fc77 	bl	8003908 <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001020:	f000 f8ac 	bl	800117c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001024:	2360      	movs	r3, #96	; 0x60
 8001026:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	4619      	mov	r1, r3
 800103a:	4807      	ldr	r0, [pc, #28]	; (8001058 <MX_TIM3_Init+0xe4>)
 800103c:	f002 f812 	bl	8003064 <HAL_TIM_PWM_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001046:	f000 f899 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800104a:	4803      	ldr	r0, [pc, #12]	; (8001058 <MX_TIM3_Init+0xe4>)
 800104c:	f000 fc48 	bl	80018e0 <HAL_TIM_MspPostInit>

}
 8001050:	bf00      	nop
 8001052:	3738      	adds	r7, #56	; 0x38
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000184 	.word	0x20000184
 800105c:	40000400 	.word	0x40000400

08001060 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <MX_USART2_UART_Init+0x50>)
 8001068:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 800106c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001070:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001098:	f002 fca6 	bl	80039e8 <HAL_UART_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010a2:	f000 f86b 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200001cc 	.word	0x200001cc
 80010b0:	40004400 	.word	0x40004400

080010b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <MX_GPIO_Init+0xa8>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a23      	ldr	r2, [pc, #140]	; (800115c <MX_GPIO_Init+0xa8>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b21      	ldr	r3, [pc, #132]	; (800115c <MX_GPIO_Init+0xa8>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <MX_GPIO_Init+0xa8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a1d      	ldr	r2, [pc, #116]	; (800115c <MX_GPIO_Init+0xa8>)
 80010e6:	f043 0310 	orr.w	r3, r3, #16
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <MX_GPIO_Init+0xa8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_PERD_Pin|GREEN_PERD_Pin|RED_LED1_Pin|AMBER_LED1_Pin
 80010f8:	2200      	movs	r2, #0
 80010fa:	f641 71b0 	movw	r1, #8112	; 0x1fb0
 80010fe:	4818      	ldr	r0, [pc, #96]	; (8001160 <MX_GPIO_Init+0xac>)
 8001100:	f001 f8cd 	bl	800229e <HAL_GPIO_WritePin>
                          |GREEN_LED1_Pin|RED_LED2_Pin|AMBER_LED2_Pin|GREEN_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON_PERD_Pin */
  GPIO_InitStruct.Pin = BUTTON_PERD_Pin;
 8001104:	2301      	movs	r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800110c:	2301      	movs	r3, #1
 800110e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_PERD_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	4619      	mov	r1, r3
 8001116:	4812      	ldr	r0, [pc, #72]	; (8001160 <MX_GPIO_Init+0xac>)
 8001118:	f000 ff26 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_PERD_Pin GREEN_PERD_Pin RED_LED1_Pin AMBER_LED1_Pin
                           GREEN_LED1_Pin RED_LED2_Pin AMBER_LED2_Pin GREEN_LED2_Pin */
  GPIO_InitStruct.Pin = RED_PERD_Pin|GREEN_PERD_Pin|RED_LED1_Pin|AMBER_LED1_Pin
 800111c:	f641 73b0 	movw	r3, #8112	; 0x1fb0
 8001120:	60bb      	str	r3, [r7, #8]
                          |GREEN_LED1_Pin|RED_LED2_Pin|AMBER_LED2_Pin|GREEN_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2302      	movs	r3, #2
 800112c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	4619      	mov	r1, r3
 8001134:	480a      	ldr	r0, [pc, #40]	; (8001160 <MX_GPIO_Init+0xac>)
 8001136:	f000 ff17 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 800113a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800113e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001144:	2301      	movs	r3, #1
 8001146:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	4619      	mov	r1, r3
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_GPIO_Init+0xb0>)
 8001150:	f000 ff0a 	bl	8001f68 <HAL_GPIO_Init>

}
 8001154:	bf00      	nop
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021000 	.word	0x40021000
 8001160:	40010800 	.word	0x40010800
 8001164:	40011000 	.word	0x40011000

08001168 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
		SCH_Update();
 8001170:	f000 fab2 	bl	80016d8 <SCH_Update>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	e7fe      	b.n	8001184 <Error_Handler+0x8>
	...

08001188 <turnOffAllLED>:
 */


#include "physics.h"

void turnOffAllLED(void){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin | RED_LED2_Pin |AMBER_LED1_Pin
 800118c:	2201      	movs	r2, #1
 800118e:	f641 71b0 	movw	r1, #8112	; 0x1fb0
 8001192:	4802      	ldr	r0, [pc, #8]	; (800119c <turnOffAllLED+0x14>)
 8001194:	f001 f883 	bl	800229e <HAL_GPIO_WritePin>
			| AMBER_LED2_Pin | GREEN_LED1_Pin | GREEN_LED2_Pin | RED_PERD_Pin | GREEN_PERD_Pin, 1);
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40010800 	.word	0x40010800

080011a0 <turnOnRed>:
}

//AUTO / MANUAL MODE:
//turn on the led with index:	0: way 1
//								1: way 2
void turnOnRed(int index){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	if (index == 0){
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10b      	bne.n	80011c6 <turnOnRed+0x26>
		HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2180      	movs	r1, #128	; 0x80
 80011b2:	480e      	ldr	r0, [pc, #56]	; (80011ec <turnOnRed+0x4c>)
 80011b4:	f001 f873 	bl	800229e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AMBER_LED1_Pin | GREEN_LED1_Pin, 1);
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 7140 	mov.w	r1, #768	; 0x300
 80011be:	480b      	ldr	r0, [pc, #44]	; (80011ec <turnOnRed+0x4c>)
 80011c0:	f001 f86d 	bl	800229e <HAL_GPIO_WritePin>
	}
	else if (index == 1){
		HAL_GPIO_WritePin(GPIOA, RED_LED2_Pin, 0);
		HAL_GPIO_WritePin(GPIOA, AMBER_LED2_Pin | GREEN_LED2_Pin, 1);
	}
}
 80011c4:	e00e      	b.n	80011e4 <turnOnRed+0x44>
	else if (index == 1){
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d10b      	bne.n	80011e4 <turnOnRed+0x44>
		HAL_GPIO_WritePin(GPIOA, RED_LED2_Pin, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <turnOnRed+0x4c>)
 80011d4:	f001 f863 	bl	800229e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AMBER_LED2_Pin | GREEN_LED2_Pin, 1);
 80011d8:	2201      	movs	r2, #1
 80011da:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80011de:	4803      	ldr	r0, [pc, #12]	; (80011ec <turnOnRed+0x4c>)
 80011e0:	f001 f85d 	bl	800229e <HAL_GPIO_WritePin>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40010800 	.word	0x40010800

080011f0 <turnOnAmber>:
//turn on the led with index:	0: way 1
//								1: way 2
void turnOnAmber(int index){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	if (index == 0){
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10c      	bne.n	8001218 <turnOnAmber+0x28>
		HAL_GPIO_WritePin(GPIOA, AMBER_LED1_Pin, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001204:	480e      	ldr	r0, [pc, #56]	; (8001240 <turnOnAmber+0x50>)
 8001206:	f001 f84a 	bl	800229e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin | GREEN_LED1_Pin, 1);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001210:	480b      	ldr	r0, [pc, #44]	; (8001240 <turnOnAmber+0x50>)
 8001212:	f001 f844 	bl	800229e <HAL_GPIO_WritePin>
	}
	else if (index == 1){
		HAL_GPIO_WritePin(GPIOA, AMBER_LED2_Pin, 0);
		HAL_GPIO_WritePin(GPIOA, RED_LED2_Pin| GREEN_LED2_Pin, 1);
	}
}
 8001216:	e00e      	b.n	8001236 <turnOnAmber+0x46>
	else if (index == 1){
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d10b      	bne.n	8001236 <turnOnAmber+0x46>
		HAL_GPIO_WritePin(GPIOA, AMBER_LED2_Pin, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001224:	4806      	ldr	r0, [pc, #24]	; (8001240 <turnOnAmber+0x50>)
 8001226:	f001 f83a 	bl	800229e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RED_LED2_Pin| GREEN_LED2_Pin, 1);
 800122a:	2201      	movs	r2, #1
 800122c:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <turnOnAmber+0x50>)
 8001232:	f001 f834 	bl	800229e <HAL_GPIO_WritePin>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40010800 	.word	0x40010800

08001244 <turnOnGreen>:

//turn on the led with index:	0: way 1
//								1: way 2
void turnOnGreen(int index){
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	if (index == 0){
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10c      	bne.n	800126c <turnOnGreen+0x28>
		HAL_GPIO_WritePin(GPIOA, GREEN_LED1_Pin, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001258:	480e      	ldr	r0, [pc, #56]	; (8001294 <turnOnGreen+0x50>)
 800125a:	f001 f820 	bl	800229e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin | AMBER_LED1_Pin, 1);
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001264:	480b      	ldr	r0, [pc, #44]	; (8001294 <turnOnGreen+0x50>)
 8001266:	f001 f81a 	bl	800229e <HAL_GPIO_WritePin>
	}
	else if (index == 1){
		HAL_GPIO_WritePin(GPIOA, GREEN_LED2_Pin, 0);
		HAL_GPIO_WritePin(GPIOA, RED_LED2_Pin| AMBER_LED2_Pin, 1);
	}
}
 800126a:	e00e      	b.n	800128a <turnOnGreen+0x46>
	else if (index == 1){
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d10b      	bne.n	800128a <turnOnGreen+0x46>
		HAL_GPIO_WritePin(GPIOA, GREEN_LED2_Pin, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001278:	4806      	ldr	r0, [pc, #24]	; (8001294 <turnOnGreen+0x50>)
 800127a:	f001 f810 	bl	800229e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RED_LED2_Pin| AMBER_LED2_Pin, 1);
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <turnOnGreen+0x50>)
 8001286:	f001 f80a 	bl	800229e <HAL_GPIO_WritePin>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40010800 	.word	0x40010800

08001298 <blinkyRed>:

//TUNING MODE:
//Blink the suitable led
void blinkyRed(void){
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	if(timer_flag[1] == 1){
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <blinkyRed+0x28>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d10a      	bne.n	80012ba <blinkyRed+0x22>
		HAL_GPIO_TogglePin(GPIOA, RED_LED1_Pin | RED_LED2_Pin);
 80012a4:	f44f 6190 	mov.w	r1, #1152	; 0x480
 80012a8:	4806      	ldr	r0, [pc, #24]	; (80012c4 <blinkyRed+0x2c>)
 80012aa:	f001 f810 	bl	80022ce <HAL_GPIO_TogglePin>
		setTimer(timer_duration[1], 1);
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <blinkyRed+0x30>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2101      	movs	r1, #1
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fa59 	bl	800176c <setTimer>
	}
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000168 	.word	0x20000168
 80012c4:	40010800 	.word	0x40010800
 80012c8:	2000009c 	.word	0x2000009c

080012cc <blinkyAmber>:

void blinkyAmber(void){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	if(timer_flag[1] == 1){
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <blinkyAmber+0x28>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d10a      	bne.n	80012ee <blinkyAmber+0x22>
		HAL_GPIO_TogglePin(GPIOA, AMBER_LED1_Pin | AMBER_LED2_Pin);
 80012d8:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80012dc:	4806      	ldr	r0, [pc, #24]	; (80012f8 <blinkyAmber+0x2c>)
 80012de:	f000 fff6 	bl	80022ce <HAL_GPIO_TogglePin>
		setTimer(timer_duration[1], 1);
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <blinkyAmber+0x30>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2101      	movs	r1, #1
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fa3f 	bl	800176c <setTimer>
	}
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000168 	.word	0x20000168
 80012f8:	40010800 	.word	0x40010800
 80012fc:	2000009c 	.word	0x2000009c

08001300 <blinkyGreen>:

void blinkyGreen(void){
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	if (timer_flag[1] == 1){
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <blinkyGreen+0x28>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d10a      	bne.n	8001322 <blinkyGreen+0x22>
		HAL_GPIO_TogglePin(GPIOA, GREEN_LED1_Pin | GREEN_LED2_Pin);
 800130c:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8001310:	4806      	ldr	r0, [pc, #24]	; (800132c <blinkyGreen+0x2c>)
 8001312:	f000 ffdc 	bl	80022ce <HAL_GPIO_TogglePin>
		setTimer(timer_duration[1], 1);
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <blinkyGreen+0x30>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2101      	movs	r1, #1
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fa25 	bl	800176c <setTimer>
	}
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000168 	.word	0x20000168
 800132c:	40010800 	.word	0x40010800
 8001330:	2000009c 	.word	0x2000009c

08001334 <clearRoadLed>:

void clearRoadLed(void){
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin | RED_LED2_Pin |
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 800133e:	4802      	ldr	r0, [pc, #8]	; (8001348 <clearRoadLed+0x14>)
 8001340:	f000 ffad 	bl	800229e <HAL_GPIO_WritePin>
			AMBER_LED1_Pin | AMBER_LED2_Pin | GREEN_LED1_Pin | GREEN_LED2_Pin, 1);
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40010800 	.word	0x40010800

0800134c <setPedestrianLed>:
 *
 * @param:	0	-	RED
 * 			1	-	GREEN
 * @retval: None
 */
void setPedestrianLed(int index){
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	if(index == 0){
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10a      	bne.n	8001370 <setPedestrianLed+0x24>
		HAL_GPIO_WritePin(GPIOA, RED_PERD_Pin, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2110      	movs	r1, #16
 800135e:	480d      	ldr	r0, [pc, #52]	; (8001394 <setPedestrianLed+0x48>)
 8001360:	f000 ff9d 	bl	800229e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GREEN_PERD_Pin, 1);
 8001364:	2201      	movs	r2, #1
 8001366:	2120      	movs	r1, #32
 8001368:	480a      	ldr	r0, [pc, #40]	; (8001394 <setPedestrianLed+0x48>)
 800136a:	f000 ff98 	bl	800229e <HAL_GPIO_WritePin>
	}
	else if (index == 1){
		HAL_GPIO_WritePin(GPIOA, RED_PERD_Pin, 1);
		HAL_GPIO_WritePin(GPIOA, GREEN_PERD_Pin, 0);
	}
}
 800136e:	e00c      	b.n	800138a <setPedestrianLed+0x3e>
	else if (index == 1){
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d109      	bne.n	800138a <setPedestrianLed+0x3e>
		HAL_GPIO_WritePin(GPIOA, RED_PERD_Pin, 1);
 8001376:	2201      	movs	r2, #1
 8001378:	2110      	movs	r1, #16
 800137a:	4806      	ldr	r0, [pc, #24]	; (8001394 <setPedestrianLed+0x48>)
 800137c:	f000 ff8f 	bl	800229e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GREEN_PERD_Pin, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2120      	movs	r1, #32
 8001384:	4803      	ldr	r0, [pc, #12]	; (8001394 <setPedestrianLed+0x48>)
 8001386:	f000 ff8a 	bl	800229e <HAL_GPIO_WritePin>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40010800 	.word	0x40010800

08001398 <unsetPedestrianLed>:

void unsetPedestrianLed(int index) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	if (index == 0)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d105      	bne.n	80013b2 <unsetPedestrianLed+0x1a>
		HAL_GPIO_WritePin(GPIOA, RED_PERD_Pin, 1);
 80013a6:	2201      	movs	r2, #1
 80013a8:	2110      	movs	r1, #16
 80013aa:	4808      	ldr	r0, [pc, #32]	; (80013cc <unsetPedestrianLed+0x34>)
 80013ac:	f000 ff77 	bl	800229e <HAL_GPIO_WritePin>
	else if (index == 1)
		HAL_GPIO_WritePin(GPIOA, GREEN_PERD_Pin, 1);
}
 80013b0:	e007      	b.n	80013c2 <unsetPedestrianLed+0x2a>
	else if (index == 1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d104      	bne.n	80013c2 <unsetPedestrianLed+0x2a>
		HAL_GPIO_WritePin(GPIOA, GREEN_PERD_Pin, 1);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2120      	movs	r1, #32
 80013bc:	4803      	ldr	r0, [pc, #12]	; (80013cc <unsetPedestrianLed+0x34>)
 80013be:	f000 ff6e 	bl	800229e <HAL_GPIO_WritePin>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40010800 	.word	0x40010800

080013d0 <Add_Node>:
};

struct container* container;


struct sTask* Add_Node(struct sTask** curr, void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	603b      	str	r3, [r7, #0]
    struct sTask *temp = (struct sTask*)malloc(sizeof(struct sTask));
 80013de:	2010      	movs	r0, #16
 80013e0:	f003 f950 	bl	8004684 <malloc>
 80013e4:	4603      	mov	r3, r0
 80013e6:	617b      	str	r3, [r7, #20]
    temp -> pTask = pFunction;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	601a      	str	r2, [r3, #0]
    temp -> Delay = DELAY;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	605a      	str	r2, [r3, #4]
    temp -> Period = PERIOD;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	609a      	str	r2, [r3, #8]
    if (curr == NULL || *curr == NULL) {
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <Add_Node+0x38>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d103      	bne.n	8001410 <Add_Node+0x40>
        temp -> next = temp;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e004      	b.n	800141a <Add_Node+0x4a>
    }
    else {
        temp -> next = (*curr) -> next;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	60da      	str	r2, [r3, #12]
    }
    return temp;
 800141a:	697b      	ldr	r3, [r7, #20]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <SCH_Init>:

void SCH_Init(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
    container = (struct container*)malloc(sizeof(struct container));
 8001428:	200c      	movs	r0, #12
 800142a:	f003 f92b 	bl	8004684 <malloc>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <SCH_Init+0x30>)
 8001434:	601a      	str	r2, [r3, #0]
	container -> tail = NULL;
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <SCH_Init+0x30>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
	container -> numSlot = 0;
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <SCH_Init+0x30>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2200      	movs	r2, #0
 8001444:	605a      	str	r2, [r3, #4]
	container -> emptySlot = 0;
 8001446:	4b03      	ldr	r3, [pc, #12]	; (8001454 <SCH_Init+0x30>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000290 	.word	0x20000290

08001458 <SCH_Add_Task>:

void SCH_Add_Task(void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b08b      	sub	sp, #44	; 0x2c
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
	// container empty
	if (container -> tail == NULL) {
 8001464:	4b6e      	ldr	r3, [pc, #440]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10f      	bne.n	800148e <SCH_Add_Task+0x36>
		container -> tail = Add_Node(NULL, pFunction, DELAY, PERIOD);
 800146e:	4b6c      	ldr	r3, [pc, #432]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001470:	681c      	ldr	r4, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	68f9      	ldr	r1, [r7, #12]
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff ffa9 	bl	80013d0 <Add_Node>
 800147e:	4603      	mov	r3, r0
 8001480:	6023      	str	r3, [r4, #0]
		(container -> numSlot)++;
 8001482:	4b67      	ldr	r3, [pc, #412]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	3201      	adds	r2, #1
 800148a:	605a      	str	r2, [r3, #4]
			}
			temp = temp -> next;
		}
	}

}
 800148c:	e0c4      	b.n	8001618 <SCH_Add_Task+0x1c0>
		struct sTask* temp = container -> tail;
 800148e:	4b64      	ldr	r3, [pc, #400]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	617b      	str	r3, [r7, #20]
		uint32_t sumDelay = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t newDelay = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < container -> numSlot; i++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
 80014a2:	e0b1      	b.n	8001608 <SCH_Add_Task+0x1b0>
			sumDelay = sumDelay + temp -> next -> Delay;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ac:	4413      	add	r3, r2
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
			if (sumDelay > DELAY) {
 80014b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d965      	bls.n	8001584 <SCH_Add_Task+0x12c>
				newDelay = DELAY - (sumDelay - temp -> next -> Delay);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	4413      	add	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
				temp -> next -> Delay = sumDelay - DELAY;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	1a8a      	subs	r2, r1, r2
 80014d2:	605a      	str	r2, [r3, #4]
				if (container -> emptySlot == 0) {
 80014d4:	4b52      	ldr	r3, [pc, #328]	; (8001620 <SCH_Add_Task+0x1c8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10f      	bne.n	80014fe <SCH_Add_Task+0xa6>
					temp -> next = Add_Node(&temp, pFunction, newDelay, PERIOD);
 80014de:	697c      	ldr	r4, [r7, #20]
 80014e0:	f107 0014 	add.w	r0, r7, #20
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	68f9      	ldr	r1, [r7, #12]
 80014ea:	f7ff ff71 	bl	80013d0 <Add_Node>
 80014ee:	4603      	mov	r3, r0
 80014f0:	60e3      	str	r3, [r4, #12]
					(container -> numSlot)++;
 80014f2:	4b4b      	ldr	r3, [pc, #300]	; (8001620 <SCH_Add_Task+0x1c8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	3201      	adds	r2, #1
 80014fa:	605a      	str	r2, [r3, #4]
                break;
 80014fc:	e08c      	b.n	8001618 <SCH_Add_Task+0x1c0>
					container -> tail -> pTask = pFunction;
 80014fe:	4b48      	ldr	r3, [pc, #288]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	601a      	str	r2, [r3, #0]
					container -> tail -> Delay = newDelay;
 8001508:	4b45      	ldr	r3, [pc, #276]	; (8001620 <SCH_Add_Task+0x1c8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	605a      	str	r2, [r3, #4]
					container -> tail -> Period = PERIOD;
 8001512:	4b43      	ldr	r3, [pc, #268]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	609a      	str	r2, [r3, #8]
					struct sTask *newTail = temp -> next;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	61fb      	str	r3, [r7, #28]
					while (newTail -> next != container -> tail) {
 8001522:	e002      	b.n	800152a <SCH_Add_Task+0xd2>
						newTail = newTail -> next;
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	61fb      	str	r3, [r7, #28]
					while (newTail -> next != container -> tail) {
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	4b3c      	ldr	r3, [pc, #240]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d1f5      	bne.n	8001524 <SCH_Add_Task+0xcc>
					if (temp == container -> tail) container -> tail = newTail;
 8001538:	4b39      	ldr	r3, [pc, #228]	; (8001620 <SCH_Add_Task+0x1c8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	429a      	cmp	r2, r3
 8001542:	d104      	bne.n	800154e <SCH_Add_Task+0xf6>
 8001544:	4b36      	ldr	r3, [pc, #216]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	e014      	b.n	8001578 <SCH_Add_Task+0x120>
						newTail -> next = container -> tail -> next;
 800154e:	4b34      	ldr	r3, [pc, #208]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	60da      	str	r2, [r3, #12]
						container -> tail -> next = temp -> next;
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	4b30      	ldr	r3, [pc, #192]	; (8001620 <SCH_Add_Task+0x1c8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68d2      	ldr	r2, [r2, #12]
 8001564:	60da      	str	r2, [r3, #12]
						temp -> next = container -> tail;
 8001566:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	60da      	str	r2, [r3, #12]
						container -> tail = newTail;
 8001570:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	601a      	str	r2, [r3, #0]
                    (container -> emptySlot)--;
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <SCH_Add_Task+0x1c8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	3a01      	subs	r2, #1
 8001580:	609a      	str	r2, [r3, #8]
                break;
 8001582:	e049      	b.n	8001618 <SCH_Add_Task+0x1c0>
                if (temp -> next -> pTask == 0x0000) {
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d113      	bne.n	80015b6 <SCH_Add_Task+0x15e>
					temp -> next -> pTask = pFunction;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	601a      	str	r2, [r3, #0]
					temp -> next -> Delay = DELAY - sumDelay;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	68b9      	ldr	r1, [r7, #8]
 800159c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159e:	1a8a      	subs	r2, r1, r2
 80015a0:	605a      	str	r2, [r3, #4]
					temp -> next -> Period = PERIOD;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	609a      	str	r2, [r3, #8]
                    (container -> emptySlot)--;
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <SCH_Add_Task+0x1c8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	3a01      	subs	r2, #1
 80015b2:	609a      	str	r2, [r3, #8]
					break;
 80015b4:	e030      	b.n	8001618 <SCH_Add_Task+0x1c0>
					if (temp -> next == container -> tail) {
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <SCH_Add_Task+0x1c8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d11b      	bne.n	80015fc <SCH_Add_Task+0x1a4>
						container -> tail -> next = Add_Node(&(container -> tail), pFunction, DELAY - sumDelay, PERIOD);
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <SCH_Add_Task+0x1c8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	1ad2      	subs	r2, r2, r3
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <SCH_Add_Task+0x1c8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681c      	ldr	r4, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68f9      	ldr	r1, [r7, #12]
 80015da:	f7ff fef9 	bl	80013d0 <Add_Node>
 80015de:	4603      	mov	r3, r0
 80015e0:	60e3      	str	r3, [r4, #12]
						container -> tail = container -> tail -> next;
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <SCH_Add_Task+0x1c8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <SCH_Add_Task+0x1c8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68d2      	ldr	r2, [r2, #12]
 80015ee:	601a      	str	r2, [r3, #0]
						(container -> numSlot)++;
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <SCH_Add_Task+0x1c8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	3201      	adds	r2, #1
 80015f8:	605a      	str	r2, [r3, #4]
						break;
 80015fa:	e00d      	b.n	8001618 <SCH_Add_Task+0x1c0>
			temp = temp -> next;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < container -> numSlot; i++) {
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	3301      	adds	r3, #1
 8001606:	623b      	str	r3, [r7, #32]
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <SCH_Add_Task+0x1c8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	6a3a      	ldr	r2, [r7, #32]
 8001610:	429a      	cmp	r2, r3
 8001612:	f6ff af47 	blt.w	80014a4 <SCH_Add_Task+0x4c>
}
 8001616:	e7ff      	b.n	8001618 <SCH_Add_Task+0x1c0>
 8001618:	bf00      	nop
 800161a:	372c      	adds	r7, #44	; 0x2c
 800161c:	46bd      	mov	sp, r7
 800161e:	bd90      	pop	{r4, r7, pc}
 8001620:	20000290 	.word	0x20000290

08001624 <SCH_Delete_Task>:

void SCH_Delete_Task(struct sTask** preDel) {
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
    struct sTask* del = (*preDel) -> next;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	60fb      	str	r3, [r7, #12]
    if (del != container -> tail) del -> next -> Delay += del -> Delay;
 8001634:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <SCH_Delete_Task+0xb0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	429a      	cmp	r2, r3
 800163e:	d008      	beq.n	8001652 <SCH_Delete_Task+0x2e>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	6859      	ldr	r1, [r3, #4]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	440a      	add	r2, r1
 8001650:	605a      	str	r2, [r3, #4]
	del -> pTask = 0x0000;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
	del -> Delay = 0;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	605a      	str	r2, [r3, #4]
	del -> Period = 0;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
	if (*preDel == container -> tail)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <SCH_Delete_Task+0xb0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d107      	bne.n	8001682 <SCH_Delete_Task+0x5e>
		container -> tail = container -> tail -> next;
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <SCH_Delete_Task+0xb0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <SCH_Delete_Task+0xb0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68d2      	ldr	r2, [r2, #12]
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e01e      	b.n	80016c0 <SCH_Delete_Task+0x9c>
	else {
		if (del -> next -> pTask != 0 && del != container -> tail) {
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d019      	beq.n	80016c0 <SCH_Delete_Task+0x9c>
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <SCH_Delete_Task+0xb0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d013      	beq.n	80016c0 <SCH_Delete_Task+0x9c>
			(*preDel) -> next = del -> next;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	68d2      	ldr	r2, [r2, #12]
 80016a0:	60da      	str	r2, [r3, #12]
			del -> next = container -> tail -> next;
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <SCH_Delete_Task+0xb0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	60da      	str	r2, [r3, #12]
			container -> tail -> next = del;
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <SCH_Delete_Task+0xb0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	60da      	str	r2, [r3, #12]
			container -> tail = del;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <SCH_Delete_Task+0xb0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	601a      	str	r2, [r3, #0]
		}
	}
	(container -> emptySlot)++;
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <SCH_Delete_Task+0xb0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	3201      	adds	r2, #1
 80016c8:	609a      	str	r2, [r3, #8]
}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	20000290 	.word	0x20000290

080016d8 <SCH_Update>:


void SCH_Update(void) {
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
	if (container -> tail) {
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <SCH_Update+0x34>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00d      	beq.n	8001702 <SCH_Update+0x2a>
		if (container -> tail -> next -> Delay > 0)
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <SCH_Update+0x34>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d006      	beq.n	8001702 <SCH_Update+0x2a>
			(container -> tail -> next -> Delay)--;
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <SCH_Update+0x34>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	3a01      	subs	r2, #1
 8001700:	605a      	str	r2, [r3, #4]
	}
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000290 	.word	0x20000290

08001710 <SCH_Dispatch_Tasks>:


void SCH_Dispatch_Tasks(void) {
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
	while (container -> tail -> next -> Delay <= 0) {
 8001716:	e01b      	b.n	8001750 <SCH_Dispatch_Tasks+0x40>
		(*(container -> tail -> next -> pTask))();
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <SCH_Dispatch_Tasks+0x58>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4798      	blx	r3
		struct sTask temp = *(container -> tail -> next);
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <SCH_Dispatch_Tasks+0x58>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	463c      	mov	r4, r7
 800172e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		SCH_Delete_Task(&(container -> tail));
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <SCH_Dispatch_Tasks+0x58>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff73 	bl	8001624 <SCH_Delete_Task>
		if (temp.Period != 0) {
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <SCH_Dispatch_Tasks+0x40>
			SCH_Add_Task(temp.pTask, temp.Period, temp.Period);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68b9      	ldr	r1, [r7, #8]
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fe84 	bl	8001458 <SCH_Add_Task>
	while (container -> tail -> next -> Delay <= 0) {
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <SCH_Dispatch_Tasks+0x58>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0dc      	beq.n	8001718 <SCH_Dispatch_Tasks+0x8>
		}
	}
}
 800175e:	bf00      	nop
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	bd90      	pop	{r4, r7, pc}
 8001768:	20000290 	.word	0x20000290

0800176c <setTimer>:
int timer_counter[NUM_TIMER] = {0};
int timer_flag[NUM_TIMER] = {0};
int timer_duration[NUM_TIMER] = {1000, 250, 0, 0};

// set timer flag and timer counter
void setTimer(int duration, int index){
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIME_CYCLE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a09      	ldr	r2, [pc, #36]	; (80017a0 <setTimer+0x34>)
 800177a:	fb82 1203 	smull	r1, r2, r2, r3
 800177e:	1092      	asrs	r2, r2, #2
 8001780:	17db      	asrs	r3, r3, #31
 8001782:	1ad2      	subs	r2, r2, r3
 8001784:	4907      	ldr	r1, [pc, #28]	; (80017a4 <setTimer+0x38>)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 800178c:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <setTimer+0x3c>)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2100      	movs	r1, #0
 8001792:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	66666667 	.word	0x66666667
 80017a4:	20000158 	.word	0x20000158
 80017a8:	20000168 	.word	0x20000168

080017ac <timerRun>:

void timerRun(){
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_TIMER; i++){
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	e01c      	b.n	80017f2 <timerRun+0x46>
		if (timer_counter[i] > 0){
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <timerRun+0x58>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	dd13      	ble.n	80017ec <timerRun+0x40>
			timer_counter[i]--;
 80017c4:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <timerRun+0x58>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017cc:	1e5a      	subs	r2, r3, #1
 80017ce:	490d      	ldr	r1, [pc, #52]	; (8001804 <timerRun+0x58>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0){
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <timerRun+0x58>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	dc04      	bgt.n	80017ec <timerRun+0x40>
				timer_flag[i] = 1;
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <timerRun+0x5c>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2101      	movs	r1, #1
 80017e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_TIMER; i++){
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3301      	adds	r3, #1
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	dddf      	ble.n	80017b8 <timerRun+0xc>
			}
		}
	}
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	20000158 	.word	0x20000158
 8001808:	20000168 	.word	0x20000168

0800180c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_MspInit+0x5c>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	4a14      	ldr	r2, [pc, #80]	; (8001868 <HAL_MspInit+0x5c>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6193      	str	r3, [r2, #24]
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_MspInit+0x5c>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_MspInit+0x5c>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <HAL_MspInit+0x5c>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001834:	61d3      	str	r3, [r2, #28]
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_MspInit+0x5c>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_MspInit+0x60>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	4a04      	ldr	r2, [pc, #16]	; (800186c <HAL_MspInit+0x60>)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	40021000 	.word	0x40021000
 800186c:	40010000 	.word	0x40010000

08001870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001880:	d114      	bne.n	80018ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_TIM_Base_MspInit+0x68>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <HAL_TIM_Base_MspInit+0x68>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	61d3      	str	r3, [r2, #28]
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_TIM_Base_MspInit+0x68>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	201c      	movs	r0, #28
 80018a0:	f000 fa79 	bl	8001d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018a4:	201c      	movs	r0, #28
 80018a6:	f000 fa92 	bl	8001dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018aa:	e010      	b.n	80018ce <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_TIM_Base_MspInit+0x6c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d10b      	bne.n	80018ce <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_TIM_Base_MspInit+0x68>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_TIM_Base_MspInit+0x68>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	61d3      	str	r3, [r2, #28]
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_TIM_Base_MspInit+0x68>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40000400 	.word	0x40000400

080018e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <HAL_TIM_MspPostInit+0x58>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d117      	bne.n	8001930 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_TIM_MspPostInit+0x5c>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <HAL_TIM_MspPostInit+0x5c>)
 8001906:	f043 0304 	orr.w	r3, r3, #4
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_TIM_MspPostInit+0x5c>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001918:	2340      	movs	r3, #64	; 0x40
 800191a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2302      	movs	r3, #2
 8001922:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	4619      	mov	r1, r3
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <HAL_TIM_MspPostInit+0x60>)
 800192c:	f000 fb1c 	bl	8001f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001930:	bf00      	nop
 8001932:	3720      	adds	r7, #32
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40000400 	.word	0x40000400
 800193c:	40021000 	.word	0x40021000
 8001940:	40010800 	.word	0x40010800

08001944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1f      	ldr	r2, [pc, #124]	; (80019dc <HAL_UART_MspInit+0x98>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d137      	bne.n	80019d4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 800196a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196e:	61d3      	str	r3, [r2, #28]
 8001970:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197c:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001994:	2304      	movs	r3, #4
 8001996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	4619      	mov	r1, r3
 80019a6:	480f      	ldr	r0, [pc, #60]	; (80019e4 <HAL_UART_MspInit+0xa0>)
 80019a8:	f000 fade 	bl	8001f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019ac:	2308      	movs	r3, #8
 80019ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	4619      	mov	r1, r3
 80019be:	4809      	ldr	r0, [pc, #36]	; (80019e4 <HAL_UART_MspInit+0xa0>)
 80019c0:	f000 fad2 	bl	8001f68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	2026      	movs	r0, #38	; 0x26
 80019ca:	f000 f9e4 	bl	8001d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019ce:	2026      	movs	r0, #38	; 0x26
 80019d0:	f000 f9fd 	bl	8001dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019d4:	bf00      	nop
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40004400 	.word	0x40004400
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40010800 	.word	0x40010800

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <NMI_Handler+0x4>

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler+0x4>

080019fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2e:	f000 f8bf 	bl	8001bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <TIM2_IRQHandler+0x10>)
 8001a3e:	f001 fa09 	bl	8002e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000248 	.word	0x20000248

08001a4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <USART2_IRQHandler+0x10>)
 8001a52:	f002 f89d 	bl	8003b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200001cc 	.word	0x200001cc

08001a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a68:	4a14      	ldr	r2, [pc, #80]	; (8001abc <_sbrk+0x5c>)
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <_sbrk+0x60>)
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a74:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <_sbrk+0x64>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <_sbrk+0x68>)
 8001a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d207      	bcs.n	8001aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a90:	f002 fdce 	bl	8004630 <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	220c      	movs	r2, #12
 8001a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	e009      	b.n	8001ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <_sbrk+0x64>)
 8001ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20005000 	.word	0x20005000
 8001ac0:	00000400 	.word	0x00000400
 8001ac4:	20000178 	.word	0x20000178
 8001ac8:	200002a8 	.word	0x200002a8

08001acc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ad8:	f7ff fff8 	bl	8001acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001adc:	480b      	ldr	r0, [pc, #44]	; (8001b0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ade:	490c      	ldr	r1, [pc, #48]	; (8001b10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ae0:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae4:	e002      	b.n	8001aec <LoopCopyDataInit>

08001ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aea:	3304      	adds	r3, #4

08001aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af0:	d3f9      	bcc.n	8001ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af2:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001af4:	4c09      	ldr	r4, [pc, #36]	; (8001b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af8:	e001      	b.n	8001afe <LoopFillZerobss>

08001afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001afc:	3204      	adds	r2, #4

08001afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b00:	d3fb      	bcc.n	8001afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b02:	f002 fd9b 	bl	800463c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b06:	f7ff f963 	bl	8000dd0 <main>
  bx lr
 8001b0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b10:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8001b14:	08005070 	.word	0x08005070
  ldr r2, =_sbss
 8001b18:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8001b1c:	200002a8 	.word	0x200002a8

08001b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC1_2_IRQHandler>
	...

08001b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <HAL_Init+0x28>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <HAL_Init+0x28>)
 8001b2e:	f043 0310 	orr.w	r3, r3, #16
 8001b32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b34:	2003      	movs	r0, #3
 8001b36:	f000 f923 	bl	8001d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b3a:	200f      	movs	r0, #15
 8001b3c:	f000 f808 	bl	8001b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b40:	f7ff fe64 	bl	800180c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40022000 	.word	0x40022000

08001b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_InitTick+0x54>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_InitTick+0x58>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 f93b 	bl	8001dea <HAL_SYSTICK_Config>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00e      	b.n	8001b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b0f      	cmp	r3, #15
 8001b82:	d80a      	bhi.n	8001b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b84:	2200      	movs	r2, #0
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f000 f903 	bl	8001d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b90:	4a06      	ldr	r2, [pc, #24]	; (8001bac <HAL_InitTick+0x5c>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e000      	b.n	8001b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200000ac 	.word	0x200000ac
 8001ba8:	200000b4 	.word	0x200000b4
 8001bac:	200000b0 	.word	0x200000b0

08001bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_IncTick+0x1c>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_IncTick+0x20>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a03      	ldr	r2, [pc, #12]	; (8001bd0 <HAL_IncTick+0x20>)
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	200000b4 	.word	0x200000b4
 8001bd0:	20000294 	.word	0x20000294

08001bd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd8:	4b02      	ldr	r3, [pc, #8]	; (8001be4 <HAL_GetTick+0x10>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	20000294 	.word	0x20000294

08001be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4906      	ldr	r1, [pc, #24]	; (8001c80 <__NVIC_EnableIRQ+0x34>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0a      	blt.n	8001cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	490c      	ldr	r1, [pc, #48]	; (8001cd0 <__NVIC_SetPriority+0x4c>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	0112      	lsls	r2, r2, #4
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cac:	e00a      	b.n	8001cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <__NVIC_SetPriority+0x50>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf28      	it	cs
 8001cf6:	2304      	movcs	r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <NVIC_EncodePriority+0x30>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	e000      	b.n	8001d0a <NVIC_EncodePriority+0x32>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	4313      	orrs	r3, r2
         );
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d4c:	d301      	bcc.n	8001d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00f      	b.n	8001d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <SysTick_Config+0x40>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5a:	210f      	movs	r1, #15
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f7ff ff90 	bl	8001c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <SysTick_Config+0x40>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <SysTick_Config+0x40>)
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	e000e010 	.word	0xe000e010

08001d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff2d 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da8:	f7ff ff42 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	6978      	ldr	r0, [r7, #20]
 8001db4:	f7ff ff90 	bl	8001cd8 <NVIC_EncodePriority>
 8001db8:	4602      	mov	r2, r0
 8001dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff5f 	bl	8001c84 <__NVIC_SetPriority>
}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff35 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff ffa2 	bl	8001d3c <SysTick_Config>
 8001df8:	4603      	mov	r3, r0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b085      	sub	sp, #20
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d008      	beq.n	8001e2c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e020      	b.n	8001e6e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 020e 	bic.w	r2, r2, #14
 8001e3a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0201 	bic.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e54:	2101      	movs	r1, #1
 8001e56:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d005      	beq.n	8001e9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2204      	movs	r2, #4
 8001e94:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
 8001e9a:	e051      	b.n	8001f40 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 020e 	bic.w	r2, r2, #14
 8001eaa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a22      	ldr	r2, [pc, #136]	; (8001f4c <HAL_DMA_Abort_IT+0xd4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d029      	beq.n	8001f1a <HAL_DMA_Abort_IT+0xa2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <HAL_DMA_Abort_IT+0xd8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d022      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x9e>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1f      	ldr	r2, [pc, #124]	; (8001f54 <HAL_DMA_Abort_IT+0xdc>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01a      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x98>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1e      	ldr	r2, [pc, #120]	; (8001f58 <HAL_DMA_Abort_IT+0xe0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d012      	beq.n	8001f0a <HAL_DMA_Abort_IT+0x92>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <HAL_DMA_Abort_IT+0xe4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00a      	beq.n	8001f04 <HAL_DMA_Abort_IT+0x8c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1b      	ldr	r2, [pc, #108]	; (8001f60 <HAL_DMA_Abort_IT+0xe8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d102      	bne.n	8001efe <HAL_DMA_Abort_IT+0x86>
 8001ef8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001efc:	e00e      	b.n	8001f1c <HAL_DMA_Abort_IT+0xa4>
 8001efe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f02:	e00b      	b.n	8001f1c <HAL_DMA_Abort_IT+0xa4>
 8001f04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f08:	e008      	b.n	8001f1c <HAL_DMA_Abort_IT+0xa4>
 8001f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0e:	e005      	b.n	8001f1c <HAL_DMA_Abort_IT+0xa4>
 8001f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f14:	e002      	b.n	8001f1c <HAL_DMA_Abort_IT+0xa4>
 8001f16:	2310      	movs	r3, #16
 8001f18:	e000      	b.n	8001f1c <HAL_DMA_Abort_IT+0xa4>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <HAL_DMA_Abort_IT+0xec>)
 8001f1e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	4798      	blx	r3
    } 
  }
  return status;
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40020008 	.word	0x40020008
 8001f50:	4002001c 	.word	0x4002001c
 8001f54:	40020030 	.word	0x40020030
 8001f58:	40020044 	.word	0x40020044
 8001f5c:	40020058 	.word	0x40020058
 8001f60:	4002006c 	.word	0x4002006c
 8001f64:	40020000 	.word	0x40020000

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b08b      	sub	sp, #44	; 0x2c
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7a:	e169      	b.n	8002250 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	f040 8158 	bne.w	800224a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4a9a      	ldr	r2, [pc, #616]	; (8002208 <HAL_GPIO_Init+0x2a0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d05e      	beq.n	8002062 <HAL_GPIO_Init+0xfa>
 8001fa4:	4a98      	ldr	r2, [pc, #608]	; (8002208 <HAL_GPIO_Init+0x2a0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d875      	bhi.n	8002096 <HAL_GPIO_Init+0x12e>
 8001faa:	4a98      	ldr	r2, [pc, #608]	; (800220c <HAL_GPIO_Init+0x2a4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d058      	beq.n	8002062 <HAL_GPIO_Init+0xfa>
 8001fb0:	4a96      	ldr	r2, [pc, #600]	; (800220c <HAL_GPIO_Init+0x2a4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d86f      	bhi.n	8002096 <HAL_GPIO_Init+0x12e>
 8001fb6:	4a96      	ldr	r2, [pc, #600]	; (8002210 <HAL_GPIO_Init+0x2a8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d052      	beq.n	8002062 <HAL_GPIO_Init+0xfa>
 8001fbc:	4a94      	ldr	r2, [pc, #592]	; (8002210 <HAL_GPIO_Init+0x2a8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d869      	bhi.n	8002096 <HAL_GPIO_Init+0x12e>
 8001fc2:	4a94      	ldr	r2, [pc, #592]	; (8002214 <HAL_GPIO_Init+0x2ac>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d04c      	beq.n	8002062 <HAL_GPIO_Init+0xfa>
 8001fc8:	4a92      	ldr	r2, [pc, #584]	; (8002214 <HAL_GPIO_Init+0x2ac>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d863      	bhi.n	8002096 <HAL_GPIO_Init+0x12e>
 8001fce:	4a92      	ldr	r2, [pc, #584]	; (8002218 <HAL_GPIO_Init+0x2b0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d046      	beq.n	8002062 <HAL_GPIO_Init+0xfa>
 8001fd4:	4a90      	ldr	r2, [pc, #576]	; (8002218 <HAL_GPIO_Init+0x2b0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d85d      	bhi.n	8002096 <HAL_GPIO_Init+0x12e>
 8001fda:	2b12      	cmp	r3, #18
 8001fdc:	d82a      	bhi.n	8002034 <HAL_GPIO_Init+0xcc>
 8001fde:	2b12      	cmp	r3, #18
 8001fe0:	d859      	bhi.n	8002096 <HAL_GPIO_Init+0x12e>
 8001fe2:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <HAL_GPIO_Init+0x80>)
 8001fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe8:	08002063 	.word	0x08002063
 8001fec:	0800203d 	.word	0x0800203d
 8001ff0:	0800204f 	.word	0x0800204f
 8001ff4:	08002091 	.word	0x08002091
 8001ff8:	08002097 	.word	0x08002097
 8001ffc:	08002097 	.word	0x08002097
 8002000:	08002097 	.word	0x08002097
 8002004:	08002097 	.word	0x08002097
 8002008:	08002097 	.word	0x08002097
 800200c:	08002097 	.word	0x08002097
 8002010:	08002097 	.word	0x08002097
 8002014:	08002097 	.word	0x08002097
 8002018:	08002097 	.word	0x08002097
 800201c:	08002097 	.word	0x08002097
 8002020:	08002097 	.word	0x08002097
 8002024:	08002097 	.word	0x08002097
 8002028:	08002097 	.word	0x08002097
 800202c:	08002045 	.word	0x08002045
 8002030:	08002059 	.word	0x08002059
 8002034:	4a79      	ldr	r2, [pc, #484]	; (800221c <HAL_GPIO_Init+0x2b4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800203a:	e02c      	b.n	8002096 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	623b      	str	r3, [r7, #32]
          break;
 8002042:	e029      	b.n	8002098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	3304      	adds	r3, #4
 800204a:	623b      	str	r3, [r7, #32]
          break;
 800204c:	e024      	b.n	8002098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	3308      	adds	r3, #8
 8002054:	623b      	str	r3, [r7, #32]
          break;
 8002056:	e01f      	b.n	8002098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	330c      	adds	r3, #12
 800205e:	623b      	str	r3, [r7, #32]
          break;
 8002060:	e01a      	b.n	8002098 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d102      	bne.n	8002070 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800206a:	2304      	movs	r3, #4
 800206c:	623b      	str	r3, [r7, #32]
          break;
 800206e:	e013      	b.n	8002098 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d105      	bne.n	8002084 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002078:	2308      	movs	r3, #8
 800207a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69fa      	ldr	r2, [r7, #28]
 8002080:	611a      	str	r2, [r3, #16]
          break;
 8002082:	e009      	b.n	8002098 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002084:	2308      	movs	r3, #8
 8002086:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	615a      	str	r2, [r3, #20]
          break;
 800208e:	e003      	b.n	8002098 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002090:	2300      	movs	r3, #0
 8002092:	623b      	str	r3, [r7, #32]
          break;
 8002094:	e000      	b.n	8002098 <HAL_GPIO_Init+0x130>
          break;
 8002096:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2bff      	cmp	r3, #255	; 0xff
 800209c:	d801      	bhi.n	80020a2 <HAL_GPIO_Init+0x13a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	e001      	b.n	80020a6 <HAL_GPIO_Init+0x13e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3304      	adds	r3, #4
 80020a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	2bff      	cmp	r3, #255	; 0xff
 80020ac:	d802      	bhi.n	80020b4 <HAL_GPIO_Init+0x14c>
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	e002      	b.n	80020ba <HAL_GPIO_Init+0x152>
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	3b08      	subs	r3, #8
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	210f      	movs	r1, #15
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	fa01 f303 	lsl.w	r3, r1, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	401a      	ands	r2, r3
 80020cc:	6a39      	ldr	r1, [r7, #32]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	431a      	orrs	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 80b1 	beq.w	800224a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020e8:	4b4d      	ldr	r3, [pc, #308]	; (8002220 <HAL_GPIO_Init+0x2b8>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a4c      	ldr	r2, [pc, #304]	; (8002220 <HAL_GPIO_Init+0x2b8>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b4a      	ldr	r3, [pc, #296]	; (8002220 <HAL_GPIO_Init+0x2b8>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002100:	4a48      	ldr	r2, [pc, #288]	; (8002224 <HAL_GPIO_Init+0x2bc>)
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	3302      	adds	r3, #2
 8002108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	220f      	movs	r2, #15
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4013      	ands	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a40      	ldr	r2, [pc, #256]	; (8002228 <HAL_GPIO_Init+0x2c0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d013      	beq.n	8002154 <HAL_GPIO_Init+0x1ec>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a3f      	ldr	r2, [pc, #252]	; (800222c <HAL_GPIO_Init+0x2c4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00d      	beq.n	8002150 <HAL_GPIO_Init+0x1e8>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a3e      	ldr	r2, [pc, #248]	; (8002230 <HAL_GPIO_Init+0x2c8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d007      	beq.n	800214c <HAL_GPIO_Init+0x1e4>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a3d      	ldr	r2, [pc, #244]	; (8002234 <HAL_GPIO_Init+0x2cc>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d101      	bne.n	8002148 <HAL_GPIO_Init+0x1e0>
 8002144:	2303      	movs	r3, #3
 8002146:	e006      	b.n	8002156 <HAL_GPIO_Init+0x1ee>
 8002148:	2304      	movs	r3, #4
 800214a:	e004      	b.n	8002156 <HAL_GPIO_Init+0x1ee>
 800214c:	2302      	movs	r3, #2
 800214e:	e002      	b.n	8002156 <HAL_GPIO_Init+0x1ee>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_GPIO_Init+0x1ee>
 8002154:	2300      	movs	r3, #0
 8002156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002158:	f002 0203 	and.w	r2, r2, #3
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	4093      	lsls	r3, r2
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002166:	492f      	ldr	r1, [pc, #188]	; (8002224 <HAL_GPIO_Init+0x2bc>)
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d006      	beq.n	800218e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	492c      	ldr	r1, [pc, #176]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	608b      	str	r3, [r1, #8]
 800218c:	e006      	b.n	800219c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800218e:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	43db      	mvns	r3, r3
 8002196:	4928      	ldr	r1, [pc, #160]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 8002198:	4013      	ands	r3, r2
 800219a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021a8:	4b23      	ldr	r3, [pc, #140]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	4922      	ldr	r1, [pc, #136]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	60cb      	str	r3, [r1, #12]
 80021b4:	e006      	b.n	80021c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021b6:	4b20      	ldr	r3, [pc, #128]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	43db      	mvns	r3, r3
 80021be:	491e      	ldr	r1, [pc, #120]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d006      	beq.n	80021de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	4918      	ldr	r1, [pc, #96]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]
 80021dc:	e006      	b.n	80021ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	4914      	ldr	r1, [pc, #80]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d021      	beq.n	800223c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021f8:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	490e      	ldr	r1, [pc, #56]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	600b      	str	r3, [r1, #0]
 8002204:	e021      	b.n	800224a <HAL_GPIO_Init+0x2e2>
 8002206:	bf00      	nop
 8002208:	10320000 	.word	0x10320000
 800220c:	10310000 	.word	0x10310000
 8002210:	10220000 	.word	0x10220000
 8002214:	10210000 	.word	0x10210000
 8002218:	10120000 	.word	0x10120000
 800221c:	10110000 	.word	0x10110000
 8002220:	40021000 	.word	0x40021000
 8002224:	40010000 	.word	0x40010000
 8002228:	40010800 	.word	0x40010800
 800222c:	40010c00 	.word	0x40010c00
 8002230:	40011000 	.word	0x40011000
 8002234:	40011400 	.word	0x40011400
 8002238:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_GPIO_Init+0x304>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	43db      	mvns	r3, r3
 8002244:	4909      	ldr	r1, [pc, #36]	; (800226c <HAL_GPIO_Init+0x304>)
 8002246:	4013      	ands	r3, r2
 8002248:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	3301      	adds	r3, #1
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	fa22 f303 	lsr.w	r3, r2, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	f47f ae8e 	bne.w	8001f7c <HAL_GPIO_Init+0x14>
  }
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	372c      	adds	r7, #44	; 0x2c
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	40010400 	.word	0x40010400

08002270 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	887b      	ldrh	r3, [r7, #2]
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
 800228c:	e001      	b.n	8002292 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002292:	7bfb      	ldrb	r3, [r7, #15]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	807b      	strh	r3, [r7, #2]
 80022aa:	4613      	mov	r3, r2
 80022ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022ae:	787b      	ldrb	r3, [r7, #1]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022b4:	887a      	ldrh	r2, [r7, #2]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022ba:	e003      	b.n	80022c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022bc:	887b      	ldrh	r3, [r7, #2]
 80022be:	041a      	lsls	r2, r3, #16
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	611a      	str	r2, [r3, #16]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b085      	sub	sp, #20
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022e0:	887a      	ldrh	r2, [r7, #2]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4013      	ands	r3, r2
 80022e6:	041a      	lsls	r2, r3, #16
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	43d9      	mvns	r1, r3
 80022ec:	887b      	ldrh	r3, [r7, #2]
 80022ee:	400b      	ands	r3, r1
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	611a      	str	r2, [r3, #16]
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e26c      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8087 	beq.w	800242e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002320:	4b92      	ldr	r3, [pc, #584]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 030c 	and.w	r3, r3, #12
 8002328:	2b04      	cmp	r3, #4
 800232a:	d00c      	beq.n	8002346 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800232c:	4b8f      	ldr	r3, [pc, #572]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 030c 	and.w	r3, r3, #12
 8002334:	2b08      	cmp	r3, #8
 8002336:	d112      	bne.n	800235e <HAL_RCC_OscConfig+0x5e>
 8002338:	4b8c      	ldr	r3, [pc, #560]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002344:	d10b      	bne.n	800235e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002346:	4b89      	ldr	r3, [pc, #548]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d06c      	beq.n	800242c <HAL_RCC_OscConfig+0x12c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d168      	bne.n	800242c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e246      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x76>
 8002368:	4b80      	ldr	r3, [pc, #512]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a7f      	ldr	r2, [pc, #508]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 800236e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	e02e      	b.n	80023d4 <HAL_RCC_OscConfig+0xd4>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0x98>
 800237e:	4b7b      	ldr	r3, [pc, #492]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a7a      	ldr	r2, [pc, #488]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	4b78      	ldr	r3, [pc, #480]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a77      	ldr	r2, [pc, #476]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e01d      	b.n	80023d4 <HAL_RCC_OscConfig+0xd4>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a0:	d10c      	bne.n	80023bc <HAL_RCC_OscConfig+0xbc>
 80023a2:	4b72      	ldr	r3, [pc, #456]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a71      	ldr	r2, [pc, #452]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b6f      	ldr	r3, [pc, #444]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a6e      	ldr	r2, [pc, #440]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e00b      	b.n	80023d4 <HAL_RCC_OscConfig+0xd4>
 80023bc:	4b6b      	ldr	r3, [pc, #428]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a6a      	ldr	r2, [pc, #424]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b68      	ldr	r3, [pc, #416]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a67      	ldr	r2, [pc, #412]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d013      	beq.n	8002404 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff fbfa 	bl	8001bd4 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e4:	f7ff fbf6 	bl	8001bd4 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1fa      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b5d      	ldr	r3, [pc, #372]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0xe4>
 8002402:	e014      	b.n	800242e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff fbe6 	bl	8001bd4 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240c:	f7ff fbe2 	bl	8001bd4 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e1e6      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x10c>
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d063      	beq.n	8002502 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800243a:	4b4c      	ldr	r3, [pc, #304]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00b      	beq.n	800245e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002446:	4b49      	ldr	r3, [pc, #292]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	2b08      	cmp	r3, #8
 8002450:	d11c      	bne.n	800248c <HAL_RCC_OscConfig+0x18c>
 8002452:	4b46      	ldr	r3, [pc, #280]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d116      	bne.n	800248c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	4b43      	ldr	r3, [pc, #268]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <HAL_RCC_OscConfig+0x176>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d001      	beq.n	8002476 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e1ba      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002476:	4b3d      	ldr	r3, [pc, #244]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4939      	ldr	r1, [pc, #228]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248a:	e03a      	b.n	8002502 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d020      	beq.n	80024d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002494:	4b36      	ldr	r3, [pc, #216]	; (8002570 <HAL_RCC_OscConfig+0x270>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249a:	f7ff fb9b 	bl	8001bd4 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a2:	f7ff fb97 	bl	8001bd4 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e19b      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	4b2d      	ldr	r3, [pc, #180]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c0:	4b2a      	ldr	r3, [pc, #168]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4927      	ldr	r1, [pc, #156]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]
 80024d4:	e015      	b.n	8002502 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d6:	4b26      	ldr	r3, [pc, #152]	; (8002570 <HAL_RCC_OscConfig+0x270>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7ff fb7a 	bl	8001bd4 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e4:	f7ff fb76 	bl	8001bd4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e17a      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d03a      	beq.n	8002584 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d019      	beq.n	800254a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002516:	4b17      	ldr	r3, [pc, #92]	; (8002574 <HAL_RCC_OscConfig+0x274>)
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251c:	f7ff fb5a 	bl	8001bd4 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002524:	f7ff fb56 	bl	8001bd4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e15a      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002542:	2001      	movs	r0, #1
 8002544:	f000 facc 	bl	8002ae0 <RCC_Delay>
 8002548:	e01c      	b.n	8002584 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_RCC_OscConfig+0x274>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002550:	f7ff fb40 	bl	8001bd4 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002556:	e00f      	b.n	8002578 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002558:	f7ff fb3c 	bl	8001bd4 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d908      	bls.n	8002578 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e140      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000
 8002570:	42420000 	.word	0x42420000
 8002574:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b9e      	ldr	r3, [pc, #632]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1e9      	bne.n	8002558 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a6 	beq.w	80026de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b97      	ldr	r3, [pc, #604]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10d      	bne.n	80025be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	4b94      	ldr	r3, [pc, #592]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	4a93      	ldr	r2, [pc, #588]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ac:	61d3      	str	r3, [r2, #28]
 80025ae:	4b91      	ldr	r3, [pc, #580]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ba:	2301      	movs	r3, #1
 80025bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025be:	4b8e      	ldr	r3, [pc, #568]	; (80027f8 <HAL_RCC_OscConfig+0x4f8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d118      	bne.n	80025fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ca:	4b8b      	ldr	r3, [pc, #556]	; (80027f8 <HAL_RCC_OscConfig+0x4f8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a8a      	ldr	r2, [pc, #552]	; (80027f8 <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d6:	f7ff fafd 	bl	8001bd4 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025de:	f7ff faf9 	bl	8001bd4 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b64      	cmp	r3, #100	; 0x64
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e0fd      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	4b81      	ldr	r3, [pc, #516]	; (80027f8 <HAL_RCC_OscConfig+0x4f8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x312>
 8002604:	4b7b      	ldr	r3, [pc, #492]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	4a7a      	ldr	r2, [pc, #488]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6213      	str	r3, [r2, #32]
 8002610:	e02d      	b.n	800266e <HAL_RCC_OscConfig+0x36e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x334>
 800261a:	4b76      	ldr	r3, [pc, #472]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	4a75      	ldr	r2, [pc, #468]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002620:	f023 0301 	bic.w	r3, r3, #1
 8002624:	6213      	str	r3, [r2, #32]
 8002626:	4b73      	ldr	r3, [pc, #460]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4a72      	ldr	r2, [pc, #456]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	f023 0304 	bic.w	r3, r3, #4
 8002630:	6213      	str	r3, [r2, #32]
 8002632:	e01c      	b.n	800266e <HAL_RCC_OscConfig+0x36e>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2b05      	cmp	r3, #5
 800263a:	d10c      	bne.n	8002656 <HAL_RCC_OscConfig+0x356>
 800263c:	4b6d      	ldr	r3, [pc, #436]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	4a6c      	ldr	r2, [pc, #432]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	f043 0304 	orr.w	r3, r3, #4
 8002646:	6213      	str	r3, [r2, #32]
 8002648:	4b6a      	ldr	r3, [pc, #424]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	4a69      	ldr	r2, [pc, #420]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6213      	str	r3, [r2, #32]
 8002654:	e00b      	b.n	800266e <HAL_RCC_OscConfig+0x36e>
 8002656:	4b67      	ldr	r3, [pc, #412]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4a66      	ldr	r2, [pc, #408]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	6213      	str	r3, [r2, #32]
 8002662:	4b64      	ldr	r3, [pc, #400]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4a63      	ldr	r2, [pc, #396]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	f023 0304 	bic.w	r3, r3, #4
 800266c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d015      	beq.n	80026a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7ff faad 	bl	8001bd4 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267c:	e00a      	b.n	8002694 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267e:	f7ff faa9 	bl	8001bd4 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f241 3288 	movw	r2, #5000	; 0x1388
 800268c:	4293      	cmp	r3, r2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e0ab      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002694:	4b57      	ldr	r3, [pc, #348]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0ee      	beq.n	800267e <HAL_RCC_OscConfig+0x37e>
 80026a0:	e014      	b.n	80026cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a2:	f7ff fa97 	bl	8001bd4 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a8:	e00a      	b.n	80026c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026aa:	f7ff fa93 	bl	8001bd4 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e095      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c0:	4b4c      	ldr	r3, [pc, #304]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ee      	bne.n	80026aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026cc:	7dfb      	ldrb	r3, [r7, #23]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d105      	bne.n	80026de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d2:	4b48      	ldr	r3, [pc, #288]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	4a47      	ldr	r2, [pc, #284]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80026d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 8081 	beq.w	80027ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e8:	4b42      	ldr	r3, [pc, #264]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d061      	beq.n	80027b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d146      	bne.n	800278a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fc:	4b3f      	ldr	r3, [pc, #252]	; (80027fc <HAL_RCC_OscConfig+0x4fc>)
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002702:	f7ff fa67 	bl	8001bd4 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270a:	f7ff fa63 	bl	8001bd4 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e067      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271c:	4b35      	ldr	r3, [pc, #212]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f0      	bne.n	800270a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002730:	d108      	bne.n	8002744 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002732:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	492d      	ldr	r1, [pc, #180]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002744:	4b2b      	ldr	r3, [pc, #172]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a19      	ldr	r1, [r3, #32]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	430b      	orrs	r3, r1
 8002756:	4927      	ldr	r1, [pc, #156]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800275c:	4b27      	ldr	r3, [pc, #156]	; (80027fc <HAL_RCC_OscConfig+0x4fc>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7ff fa37 	bl	8001bd4 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276a:	f7ff fa33 	bl	8001bd4 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e037      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x46a>
 8002788:	e02f      	b.n	80027ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278a:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <HAL_RCC_OscConfig+0x4fc>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7ff fa20 	bl	8001bd4 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002798:	f7ff fa1c 	bl	8001bd4 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e020      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x498>
 80027b6:	e018      	b.n	80027ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e013      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d001      	beq.n	80027ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40007000 	.word	0x40007000
 80027fc:	42420060 	.word	0x42420060

08002800 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0d0      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b6a      	ldr	r3, [pc, #424]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d910      	bls.n	8002844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b67      	ldr	r3, [pc, #412]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 0207 	bic.w	r2, r3, #7
 800282a:	4965      	ldr	r1, [pc, #404]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b63      	ldr	r3, [pc, #396]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0b8      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d020      	beq.n	8002892 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800285c:	4b59      	ldr	r3, [pc, #356]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4a58      	ldr	r2, [pc, #352]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002866:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002874:	4b53      	ldr	r3, [pc, #332]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a52      	ldr	r2, [pc, #328]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800287e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002880:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	494d      	ldr	r1, [pc, #308]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d040      	beq.n	8002920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d115      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e07f      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028be:	4b41      	ldr	r3, [pc, #260]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e073      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	4b3d      	ldr	r3, [pc, #244]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e06b      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028de:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f023 0203 	bic.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4936      	ldr	r1, [pc, #216]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f0:	f7ff f970 	bl	8001bd4 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	e00a      	b.n	800290e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f8:	f7ff f96c 	bl	8001bd4 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e053      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 020c 	and.w	r2, r3, #12
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	429a      	cmp	r2, r3
 800291e:	d1eb      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002920:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d210      	bcs.n	8002950 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 0207 	bic.w	r2, r3, #7
 8002936:	4922      	ldr	r1, [pc, #136]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	4313      	orrs	r3, r2
 800293c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e032      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800295c:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4916      	ldr	r1, [pc, #88]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d009      	beq.n	800298e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	490e      	ldr	r1, [pc, #56]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800298e:	f000 f821 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 8002992:	4602      	mov	r2, r0
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	490a      	ldr	r1, [pc, #40]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 80029a0:	5ccb      	ldrb	r3, [r1, r3]
 80029a2:	fa22 f303 	lsr.w	r3, r2, r3
 80029a6:	4a09      	ldr	r2, [pc, #36]	; (80029cc <HAL_RCC_ClockConfig+0x1cc>)
 80029a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_RCC_ClockConfig+0x1d0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff f8ce 	bl	8001b50 <HAL_InitTick>

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40022000 	.word	0x40022000
 80029c4:	40021000 	.word	0x40021000
 80029c8:	08005008 	.word	0x08005008
 80029cc:	200000ac 	.word	0x200000ac
 80029d0:	200000b0 	.word	0x200000b0

080029d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029ee:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x94>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d002      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x30>
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d003      	beq.n	8002a0a <HAL_RCC_GetSysClockFreq+0x36>
 8002a02:	e027      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a04:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a06:	613b      	str	r3, [r7, #16]
      break;
 8002a08:	e027      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	0c9b      	lsrs	r3, r3, #18
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	4a17      	ldr	r2, [pc, #92]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a14:	5cd3      	ldrb	r3, [r2, r3]
 8002a16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d010      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	0c5b      	lsrs	r3, r3, #17
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	4a11      	ldr	r2, [pc, #68]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a2e:	5cd3      	ldrb	r3, [r2, r3]
 8002a30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a0d      	ldr	r2, [pc, #52]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a36:	fb02 f203 	mul.w	r2, r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	e004      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a0c      	ldr	r2, [pc, #48]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a48:	fb02 f303 	mul.w	r3, r2, r3
 8002a4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	613b      	str	r3, [r7, #16]
      break;
 8002a52:	e002      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a56:	613b      	str	r3, [r7, #16]
      break;
 8002a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5a:	693b      	ldr	r3, [r7, #16]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	007a1200 	.word	0x007a1200
 8002a70:	08005020 	.word	0x08005020
 8002a74:	08005030 	.word	0x08005030
 8002a78:	003d0900 	.word	0x003d0900

08002a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a80:	4b02      	ldr	r3, [pc, #8]	; (8002a8c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	200000ac 	.word	0x200000ac

08002a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a94:	f7ff fff2 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	08005018 	.word	0x08005018

08002ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002abc:	f7ff ffde 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	0adb      	lsrs	r3, r3, #11
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	; (8002adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	08005018 	.word	0x08005018

08002ae0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <RCC_Delay+0x34>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <RCC_Delay+0x38>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	0a5b      	lsrs	r3, r3, #9
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002afc:	bf00      	nop
  }
  while (Delay --);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1e5a      	subs	r2, r3, #1
 8002b02:	60fa      	str	r2, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f9      	bne.n	8002afc <RCC_Delay+0x1c>
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	200000ac 	.word	0x200000ac
 8002b18:	10624dd3 	.word	0x10624dd3

08002b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e041      	b.n	8002bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fe fe94 	bl	8001870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3304      	adds	r3, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f000 fc30 	bl	80033c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d001      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e03a      	b.n	8002c4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a18      	ldr	r2, [pc, #96]	; (8002c54 <HAL_TIM_Base_Start_IT+0x98>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00e      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x58>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfe:	d009      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x58>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d004      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x58>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a13      	ldr	r2, [pc, #76]	; (8002c5c <HAL_TIM_Base_Start_IT+0xa0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d111      	bne.n	8002c38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d010      	beq.n	8002c48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c36:	e007      	b.n	8002c48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	40012c00 	.word	0x40012c00
 8002c58:	40000400 	.word	0x40000400
 8002c5c:	40000800 	.word	0x40000800

08002c60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e041      	b.n	8002cf6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f839 	bl	8002cfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	f000 fb8e 	bl	80033c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <HAL_TIM_PWM_Start+0x24>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	bf14      	ite	ne
 8002d2c:	2301      	movne	r3, #1
 8002d2e:	2300      	moveq	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e022      	b.n	8002d7a <HAL_TIM_PWM_Start+0x6a>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d109      	bne.n	8002d4e <HAL_TIM_PWM_Start+0x3e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	bf14      	ite	ne
 8002d46:	2301      	movne	r3, #1
 8002d48:	2300      	moveq	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	e015      	b.n	8002d7a <HAL_TIM_PWM_Start+0x6a>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d109      	bne.n	8002d68 <HAL_TIM_PWM_Start+0x58>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	bf14      	ite	ne
 8002d60:	2301      	movne	r3, #1
 8002d62:	2300      	moveq	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	e008      	b.n	8002d7a <HAL_TIM_PWM_Start+0x6a>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	bf14      	ite	ne
 8002d74:	2301      	movne	r3, #1
 8002d76:	2300      	moveq	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e05e      	b.n	8002e40 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d104      	bne.n	8002d92 <HAL_TIM_PWM_Start+0x82>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d90:	e013      	b.n	8002dba <HAL_TIM_PWM_Start+0xaa>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_PWM_Start+0x92>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002da0:	e00b      	b.n	8002dba <HAL_TIM_PWM_Start+0xaa>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d104      	bne.n	8002db2 <HAL_TIM_PWM_Start+0xa2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002db0:	e003      	b.n	8002dba <HAL_TIM_PWM_Start+0xaa>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	6839      	ldr	r1, [r7, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fd7c 	bl	80038c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1e      	ldr	r2, [pc, #120]	; (8002e48 <HAL_TIM_PWM_Start+0x138>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d107      	bne.n	8002de2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <HAL_TIM_PWM_Start+0x138>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00e      	beq.n	8002e0a <HAL_TIM_PWM_Start+0xfa>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df4:	d009      	beq.n	8002e0a <HAL_TIM_PWM_Start+0xfa>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <HAL_TIM_PWM_Start+0x13c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d004      	beq.n	8002e0a <HAL_TIM_PWM_Start+0xfa>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <HAL_TIM_PWM_Start+0x140>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d111      	bne.n	8002e2e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b06      	cmp	r3, #6
 8002e1a:	d010      	beq.n	8002e3e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2c:	e007      	b.n	8002e3e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40012c00 	.word	0x40012c00
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40000800 	.word	0x40000800

08002e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d122      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d11b      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0202 	mvn.w	r2, #2
 8002e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fa76 	bl	8003388 <HAL_TIM_IC_CaptureCallback>
 8002e9c:	e005      	b.n	8002eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fa69 	bl	8003376 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fa78 	bl	800339a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d122      	bne.n	8002f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d11b      	bne.n	8002f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0204 	mvn.w	r2, #4
 8002ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa4c 	bl	8003388 <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fa3f 	bl	8003376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fa4e 	bl	800339a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d122      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d11b      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0208 	mvn.w	r2, #8
 8002f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fa22 	bl	8003388 <HAL_TIM_IC_CaptureCallback>
 8002f44:	e005      	b.n	8002f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fa15 	bl	8003376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fa24 	bl	800339a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d122      	bne.n	8002fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d11b      	bne.n	8002fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0210 	mvn.w	r2, #16
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2208      	movs	r2, #8
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f9f8 	bl	8003388 <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f9eb 	bl	8003376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f9fa 	bl	800339a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d107      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0201 	mvn.w	r2, #1
 8002fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fe f8c8 	bl	8001168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b80      	cmp	r3, #128	; 0x80
 8002fe4:	d10e      	bne.n	8003004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff0:	2b80      	cmp	r3, #128	; 0x80
 8002ff2:	d107      	bne.n	8003004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fce9 	bl	80039d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	d10e      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d107      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f9be 	bl	80033ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b20      	cmp	r3, #32
 800303c:	d10e      	bne.n	800305c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b20      	cmp	r3, #32
 800304a:	d107      	bne.n	800305c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0220 	mvn.w	r2, #32
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fcb4 	bl	80039c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800307e:	2302      	movs	r3, #2
 8003080:	e0ae      	b.n	80031e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b0c      	cmp	r3, #12
 800308e:	f200 809f 	bhi.w	80031d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003092:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	080030cd 	.word	0x080030cd
 800309c:	080031d1 	.word	0x080031d1
 80030a0:	080031d1 	.word	0x080031d1
 80030a4:	080031d1 	.word	0x080031d1
 80030a8:	0800310d 	.word	0x0800310d
 80030ac:	080031d1 	.word	0x080031d1
 80030b0:	080031d1 	.word	0x080031d1
 80030b4:	080031d1 	.word	0x080031d1
 80030b8:	0800314f 	.word	0x0800314f
 80030bc:	080031d1 	.word	0x080031d1
 80030c0:	080031d1 	.word	0x080031d1
 80030c4:	080031d1 	.word	0x080031d1
 80030c8:	0800318f 	.word	0x0800318f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 f9d6 	bl	8003484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0208 	orr.w	r2, r2, #8
 80030e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0204 	bic.w	r2, r2, #4
 80030f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6999      	ldr	r1, [r3, #24]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	619a      	str	r2, [r3, #24]
      break;
 800310a:	e064      	b.n	80031d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fa1c 	bl	8003550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6999      	ldr	r1, [r3, #24]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	021a      	lsls	r2, r3, #8
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	619a      	str	r2, [r3, #24]
      break;
 800314c:	e043      	b.n	80031d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fa65 	bl	8003624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69da      	ldr	r2, [r3, #28]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0208 	orr.w	r2, r2, #8
 8003168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0204 	bic.w	r2, r2, #4
 8003178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69d9      	ldr	r1, [r3, #28]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	61da      	str	r2, [r3, #28]
      break;
 800318c:	e023      	b.n	80031d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	4618      	mov	r0, r3
 8003196:	f000 faaf 	bl	80036f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69da      	ldr	r2, [r3, #28]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69d9      	ldr	r1, [r3, #28]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	021a      	lsls	r2, r3, #8
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	61da      	str	r2, [r3, #28]
      break;
 80031ce:	e002      	b.n	80031d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	75fb      	strb	r3, [r7, #23]
      break;
 80031d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_TIM_ConfigClockSource+0x1c>
 8003200:	2302      	movs	r3, #2
 8003202:	e0b4      	b.n	800336e <HAL_TIM_ConfigClockSource+0x186>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800322a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323c:	d03e      	beq.n	80032bc <HAL_TIM_ConfigClockSource+0xd4>
 800323e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003242:	f200 8087 	bhi.w	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 8003246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324a:	f000 8086 	beq.w	800335a <HAL_TIM_ConfigClockSource+0x172>
 800324e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003252:	d87f      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 8003254:	2b70      	cmp	r3, #112	; 0x70
 8003256:	d01a      	beq.n	800328e <HAL_TIM_ConfigClockSource+0xa6>
 8003258:	2b70      	cmp	r3, #112	; 0x70
 800325a:	d87b      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 800325c:	2b60      	cmp	r3, #96	; 0x60
 800325e:	d050      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0x11a>
 8003260:	2b60      	cmp	r3, #96	; 0x60
 8003262:	d877      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 8003264:	2b50      	cmp	r3, #80	; 0x50
 8003266:	d03c      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0xfa>
 8003268:	2b50      	cmp	r3, #80	; 0x50
 800326a:	d873      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 800326c:	2b40      	cmp	r3, #64	; 0x40
 800326e:	d058      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x13a>
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	d86f      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 8003274:	2b30      	cmp	r3, #48	; 0x30
 8003276:	d064      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x15a>
 8003278:	2b30      	cmp	r3, #48	; 0x30
 800327a:	d86b      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 800327c:	2b20      	cmp	r3, #32
 800327e:	d060      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x15a>
 8003280:	2b20      	cmp	r3, #32
 8003282:	d867      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d05c      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x15a>
 8003288:	2b10      	cmp	r3, #16
 800328a:	d05a      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x15a>
 800328c:	e062      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6899      	ldr	r1, [r3, #8]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f000 faf0 	bl	8003882 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	609a      	str	r2, [r3, #8]
      break;
 80032ba:	e04f      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6899      	ldr	r1, [r3, #8]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f000 fad9 	bl	8003882 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032de:	609a      	str	r2, [r3, #8]
      break;
 80032e0:	e03c      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6859      	ldr	r1, [r3, #4]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	461a      	mov	r2, r3
 80032f0:	f000 fa50 	bl	8003794 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2150      	movs	r1, #80	; 0x50
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 faa7 	bl	800384e <TIM_ITRx_SetConfig>
      break;
 8003300:	e02c      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6818      	ldr	r0, [r3, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6859      	ldr	r1, [r3, #4]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	461a      	mov	r2, r3
 8003310:	f000 fa6e 	bl	80037f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2160      	movs	r1, #96	; 0x60
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fa97 	bl	800384e <TIM_ITRx_SetConfig>
      break;
 8003320:	e01c      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6859      	ldr	r1, [r3, #4]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	461a      	mov	r2, r3
 8003330:	f000 fa30 	bl	8003794 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2140      	movs	r1, #64	; 0x40
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fa87 	bl	800384e <TIM_ITRx_SetConfig>
      break;
 8003340:	e00c      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4619      	mov	r1, r3
 800334c:	4610      	mov	r0, r2
 800334e:	f000 fa7e 	bl	800384e <TIM_ITRx_SetConfig>
      break;
 8003352:	e003      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      break;
 8003358:	e000      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800335a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800336c:	7bfb      	ldrb	r3, [r7, #15]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr

08003388 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr
	...

080033c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a29      	ldr	r2, [pc, #164]	; (8003478 <TIM_Base_SetConfig+0xb8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00b      	beq.n	80033f0 <TIM_Base_SetConfig+0x30>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033de:	d007      	beq.n	80033f0 <TIM_Base_SetConfig+0x30>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a26      	ldr	r2, [pc, #152]	; (800347c <TIM_Base_SetConfig+0xbc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d003      	beq.n	80033f0 <TIM_Base_SetConfig+0x30>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a25      	ldr	r2, [pc, #148]	; (8003480 <TIM_Base_SetConfig+0xc0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d108      	bne.n	8003402 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <TIM_Base_SetConfig+0xb8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00b      	beq.n	8003422 <TIM_Base_SetConfig+0x62>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003410:	d007      	beq.n	8003422 <TIM_Base_SetConfig+0x62>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a19      	ldr	r2, [pc, #100]	; (800347c <TIM_Base_SetConfig+0xbc>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d003      	beq.n	8003422 <TIM_Base_SetConfig+0x62>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a18      	ldr	r2, [pc, #96]	; (8003480 <TIM_Base_SetConfig+0xc0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d108      	bne.n	8003434 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a07      	ldr	r2, [pc, #28]	; (8003478 <TIM_Base_SetConfig+0xb8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d103      	bne.n	8003468 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	615a      	str	r2, [r3, #20]
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr
 8003478:	40012c00 	.word	0x40012c00
 800347c:	40000400 	.word	0x40000400
 8003480:	40000800 	.word	0x40000800

08003484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f023 0201 	bic.w	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0303 	bic.w	r3, r3, #3
 80034ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f023 0302 	bic.w	r3, r3, #2
 80034cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a1c      	ldr	r2, [pc, #112]	; (800354c <TIM_OC1_SetConfig+0xc8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d10c      	bne.n	80034fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f023 0308 	bic.w	r3, r3, #8
 80034e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f023 0304 	bic.w	r3, r3, #4
 80034f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a13      	ldr	r2, [pc, #76]	; (800354c <TIM_OC1_SetConfig+0xc8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d111      	bne.n	8003526 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	621a      	str	r2, [r3, #32]
}
 8003540:	bf00      	nop
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40012c00 	.word	0x40012c00

08003550 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f023 0210 	bic.w	r2, r3, #16
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800357e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f023 0320 	bic.w	r3, r3, #32
 800359a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <TIM_OC2_SetConfig+0xd0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d10d      	bne.n	80035cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a14      	ldr	r2, [pc, #80]	; (8003620 <TIM_OC2_SetConfig+0xd0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d113      	bne.n	80035fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	621a      	str	r2, [r3, #32]
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr
 8003620:	40012c00 	.word	0x40012c00

08003624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0303 	bic.w	r3, r3, #3
 800365a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800366c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a1d      	ldr	r2, [pc, #116]	; (80036f4 <TIM_OC3_SetConfig+0xd0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d10d      	bne.n	800369e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800369c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a14      	ldr	r2, [pc, #80]	; (80036f4 <TIM_OC3_SetConfig+0xd0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d113      	bne.n	80036ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	621a      	str	r2, [r3, #32]
}
 80036e8:	bf00      	nop
 80036ea:	371c      	adds	r7, #28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40012c00 	.word	0x40012c00

080036f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	021b      	lsls	r3, r3, #8
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4313      	orrs	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	031b      	lsls	r3, r3, #12
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a0f      	ldr	r2, [pc, #60]	; (8003790 <TIM_OC4_SetConfig+0x98>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d109      	bne.n	800376c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800375e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	019b      	lsls	r3, r3, #6
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	621a      	str	r2, [r3, #32]
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr
 8003790:	40012c00 	.word	0x40012c00

08003794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	f023 0201 	bic.w	r2, r3, #1
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f023 030a 	bic.w	r3, r3, #10
 80037d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	621a      	str	r2, [r3, #32]
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	f023 0210 	bic.w	r2, r3, #16
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800381a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	031b      	lsls	r3, r3, #12
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800382c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4313      	orrs	r3, r2
 8003836:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	621a      	str	r2, [r3, #32]
}
 8003844:	bf00      	nop
 8003846:	371c      	adds	r7, #28
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800384e:	b480      	push	{r7}
 8003850:	b085      	sub	sp, #20
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	f043 0307 	orr.w	r3, r3, #7
 8003870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	609a      	str	r2, [r3, #8]
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr

08003882 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003882:	b480      	push	{r7}
 8003884:	b087      	sub	sp, #28
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800389c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	021a      	lsls	r2, r3, #8
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	431a      	orrs	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	609a      	str	r2, [r3, #8]
}
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	2201      	movs	r2, #1
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a1a      	ldr	r2, [r3, #32]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	43db      	mvns	r3, r3
 80038e2:	401a      	ands	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a1a      	ldr	r2, [r3, #32]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	fa01 f303 	lsl.w	r3, r1, r3
 80038f8:	431a      	orrs	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	621a      	str	r2, [r3, #32]
}
 80038fe:	bf00      	nop
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800391c:	2302      	movs	r3, #2
 800391e:	e046      	b.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a16      	ldr	r2, [pc, #88]	; (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00e      	beq.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396c:	d009      	beq.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a12      	ldr	r2, [pc, #72]	; (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a10      	ldr	r2, [pc, #64]	; (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d10c      	bne.n	800399c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003988:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	4313      	orrs	r3, r2
 8003992:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	40012c00 	.word	0x40012c00
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800

080039c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr

080039d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr

080039e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e042      	b.n	8003a80 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fd ff98 	bl	8001944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2224      	movs	r2, #36	; 0x24
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fd71 	bl	8004514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	; 0x28
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d16d      	bne.n	8003b84 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_UART_Transmit+0x2c>
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e066      	b.n	8003b86 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2221      	movs	r2, #33	; 0x21
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ac6:	f7fe f885 	bl	8001bd4 <HAL_GetTick>
 8003aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	88fa      	ldrh	r2, [r7, #6]
 8003ad0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	88fa      	ldrh	r2, [r7, #6]
 8003ad6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae0:	d108      	bne.n	8003af4 <HAL_UART_Transmit+0x6c>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d104      	bne.n	8003af4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	e003      	b.n	8003afc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003afc:	e02a      	b.n	8003b54 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2200      	movs	r2, #0
 8003b06:	2180      	movs	r1, #128	; 0x80
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 faf9 	bl	8004100 <UART_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e036      	b.n	8003b86 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10b      	bne.n	8003b36 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	3302      	adds	r3, #2
 8003b32:	61bb      	str	r3, [r7, #24]
 8003b34:	e007      	b.n	8003b46 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	781a      	ldrb	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	3301      	adds	r3, #1
 8003b44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1cf      	bne.n	8003afe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2200      	movs	r2, #0
 8003b66:	2140      	movs	r1, #64	; 0x40
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 fac9 	bl	8004100 <UART_WaitOnFlagUntilTimeout>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e006      	b.n	8003b86 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	e000      	b.n	8003b86 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
  }
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3720      	adds	r7, #32
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b0ba      	sub	sp, #232	; 0xe8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10f      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x66>
 8003be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fbd1 	bl	8004396 <UART_Receive_IT>
      return;
 8003bf4:	e25b      	b.n	80040ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 80de 	beq.w	8003dbc <HAL_UART_IRQHandler+0x22c>
 8003c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80d1 	beq.w	8003dbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00b      	beq.n	8003c3e <HAL_UART_IRQHandler+0xae>
 8003c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	f043 0201 	orr.w	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <HAL_UART_IRQHandler+0xd2>
 8003c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	f043 0202 	orr.w	r2, r3, #2
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00b      	beq.n	8003c86 <HAL_UART_IRQHandler+0xf6>
 8003c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	f043 0204 	orr.w	r2, r3, #4
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d011      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x126>
 8003c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d105      	bne.n	8003caa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d005      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	f043 0208 	orr.w	r2, r3, #8
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 81f2 	beq.w	80040a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <HAL_UART_IRQHandler+0x14e>
 8003ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fb5c 	bl	8004396 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf14      	ite	ne
 8003cec:	2301      	movne	r3, #1
 8003cee:	2300      	moveq	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d103      	bne.n	8003d0a <HAL_UART_IRQHandler+0x17a>
 8003d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d04f      	beq.n	8003daa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fa66 	bl	80041dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d041      	beq.n	8003da2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3314      	adds	r3, #20
 8003d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3314      	adds	r3, #20
 8003d46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1d9      	bne.n	8003d1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d013      	beq.n	8003d9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	4a7e      	ldr	r2, [pc, #504]	; (8003f70 <HAL_UART_IRQHandler+0x3e0>)
 8003d78:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe f87a 	bl	8001e78 <HAL_DMA_Abort_IT>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d016      	beq.n	8003db8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d94:	4610      	mov	r0, r2
 8003d96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d98:	e00e      	b.n	8003db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f99c 	bl	80040d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da0:	e00a      	b.n	8003db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f998 	bl	80040d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da8:	e006      	b.n	8003db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f994 	bl	80040d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003db6:	e175      	b.n	80040a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db8:	bf00      	nop
    return;
 8003dba:	e173      	b.n	80040a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	f040 814f 	bne.w	8004064 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 8148 	beq.w	8004064 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dd8:	f003 0310 	and.w	r3, r3, #16
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8141 	beq.w	8004064 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003de2:	2300      	movs	r3, #0
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80b6 	beq.w	8003f74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 8145 	beq.w	80040a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e26:	429a      	cmp	r2, r3
 8003e28:	f080 813e 	bcs.w	80040a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	f000 8088 	beq.w	8003f50 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	330c      	adds	r3, #12
 8003e68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e6c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1d9      	bne.n	8003e40 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3314      	adds	r3, #20
 8003e92:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e96:	e853 3f00 	ldrex	r3, [r3]
 8003e9a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3314      	adds	r3, #20
 8003eac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003eb0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003eb4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003eb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ebc:	e841 2300 	strex	r3, r2, [r1]
 8003ec0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e1      	bne.n	8003e8c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3314      	adds	r3, #20
 8003ece:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ed2:	e853 3f00 	ldrex	r3, [r3]
 8003ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ede:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3314      	adds	r3, #20
 8003ee8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003eec:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003eee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ef2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003efa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e3      	bne.n	8003ec8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	330c      	adds	r3, #12
 8003f14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f18:	e853 3f00 	ldrex	r3, [r3]
 8003f1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f20:	f023 0310 	bic.w	r3, r3, #16
 8003f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	330c      	adds	r3, #12
 8003f2e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f32:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f34:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f3a:	e841 2300 	strex	r3, r2, [r1]
 8003f3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1e3      	bne.n	8003f0e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fd ff59 	bl	8001e02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	4619      	mov	r1, r3
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f8bf 	bl	80040ea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f6c:	e09c      	b.n	80040a8 <HAL_UART_IRQHandler+0x518>
 8003f6e:	bf00      	nop
 8003f70:	080042a1 	.word	0x080042a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 808e 	beq.w	80040ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003f90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 8089 	beq.w	80040ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	330c      	adds	r3, #12
 8003fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003fbe:	647a      	str	r2, [r7, #68]	; 0x44
 8003fc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e3      	bne.n	8003f9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3314      	adds	r3, #20
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	e853 3f00 	ldrex	r3, [r3]
 8003fe0:	623b      	str	r3, [r7, #32]
   return(result);
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
 8003fe8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3314      	adds	r3, #20
 8003ff2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ff6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ffe:	e841 2300 	strex	r3, r2, [r1]
 8004002:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1e3      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	330c      	adds	r3, #12
 800401e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	60fb      	str	r3, [r7, #12]
   return(result);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0310 	bic.w	r3, r3, #16
 800402e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	330c      	adds	r3, #12
 8004038:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800403c:	61fa      	str	r2, [r7, #28]
 800403e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	69b9      	ldr	r1, [r7, #24]
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	617b      	str	r3, [r7, #20]
   return(result);
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e3      	bne.n	8004018 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004056:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800405a:	4619      	mov	r1, r3
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f844 	bl	80040ea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004062:	e023      	b.n	80040ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406c:	2b00      	cmp	r3, #0
 800406e:	d009      	beq.n	8004084 <HAL_UART_IRQHandler+0x4f4>
 8004070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f923 	bl	80042c8 <UART_Transmit_IT>
    return;
 8004082:	e014      	b.n	80040ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00e      	beq.n	80040ae <HAL_UART_IRQHandler+0x51e>
 8004090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f962 	bl	8004366 <UART_EndTransmit_IT>
    return;
 80040a2:	e004      	b.n	80040ae <HAL_UART_IRQHandler+0x51e>
    return;
 80040a4:	bf00      	nop
 80040a6:	e002      	b.n	80040ae <HAL_UART_IRQHandler+0x51e>
      return;
 80040a8:	bf00      	nop
 80040aa:	e000      	b.n	80040ae <HAL_UART_IRQHandler+0x51e>
      return;
 80040ac:	bf00      	nop
  }
}
 80040ae:	37e8      	adds	r7, #232	; 0xe8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr

080040ea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	460b      	mov	r3, r1
 80040f4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b090      	sub	sp, #64	; 0x40
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004110:	e050      	b.n	80041b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d04c      	beq.n	80041b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800411a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800411c:	2b00      	cmp	r3, #0
 800411e:	d007      	beq.n	8004130 <UART_WaitOnFlagUntilTimeout+0x30>
 8004120:	f7fd fd58 	bl	8001bd4 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800412c:	429a      	cmp	r2, r3
 800412e:	d241      	bcs.n	80041b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004150:	637a      	str	r2, [r7, #52]	; 0x34
 8004152:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800415e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e5      	bne.n	8004130 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3314      	adds	r3, #20
 800416a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	613b      	str	r3, [r7, #16]
   return(result);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	63bb      	str	r3, [r7, #56]	; 0x38
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3314      	adds	r3, #20
 8004182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004184:	623a      	str	r2, [r7, #32]
 8004186:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	69f9      	ldr	r1, [r7, #28]
 800418a:	6a3a      	ldr	r2, [r7, #32]
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	61bb      	str	r3, [r7, #24]
   return(result);
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e5      	bne.n	8004164 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e00f      	b.n	80041d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4013      	ands	r3, r2
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d09f      	beq.n	8004112 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3740      	adds	r7, #64	; 0x40
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041dc:	b480      	push	{r7}
 80041de:	b095      	sub	sp, #84	; 0x54
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	330c      	adds	r3, #12
 80041ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ee:	e853 3f00 	ldrex	r3, [r3]
 80041f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	330c      	adds	r3, #12
 8004202:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004204:	643a      	str	r2, [r7, #64]	; 0x40
 8004206:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800420a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e5      	bne.n	80041e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3314      	adds	r3, #20
 800421e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	e853 3f00 	ldrex	r3, [r3]
 8004226:	61fb      	str	r3, [r7, #28]
   return(result);
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f023 0301 	bic.w	r3, r3, #1
 800422e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3314      	adds	r3, #20
 8004236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004238:	62fa      	str	r2, [r7, #44]	; 0x2c
 800423a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800423e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004240:	e841 2300 	strex	r3, r2, [r1]
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e5      	bne.n	8004218 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	2b01      	cmp	r3, #1
 8004252:	d119      	bne.n	8004288 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	60bb      	str	r3, [r7, #8]
   return(result);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f023 0310 	bic.w	r3, r3, #16
 800426a:	647b      	str	r3, [r7, #68]	; 0x44
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	330c      	adds	r3, #12
 8004272:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004274:	61ba      	str	r2, [r7, #24]
 8004276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6979      	ldr	r1, [r7, #20]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	613b      	str	r3, [r7, #16]
   return(result);
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e5      	bne.n	8004254 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004296:	bf00      	nop
 8004298:	3754      	adds	r7, #84	; 0x54
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr

080042a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f7ff ff0c 	bl	80040d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b21      	cmp	r3, #33	; 0x21
 80042da:	d13e      	bne.n	800435a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e4:	d114      	bne.n	8004310 <UART_Transmit_IT+0x48>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d110      	bne.n	8004310 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004302:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	1c9a      	adds	r2, r3, #2
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	621a      	str	r2, [r3, #32]
 800430e:	e008      	b.n	8004322 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	1c59      	adds	r1, r3, #1
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6211      	str	r1, [r2, #32]
 800431a:	781a      	ldrb	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29b      	uxth	r3, r3
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4619      	mov	r1, r3
 8004330:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10f      	bne.n	8004356 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004344:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004354:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	e000      	b.n	800435c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800435a:	2302      	movs	r3, #2
  }
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr

08004366 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff fe94 	bl	80040b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b08c      	sub	sp, #48	; 0x30
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b22      	cmp	r3, #34	; 0x22
 80043a8:	f040 80ae 	bne.w	8004508 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b4:	d117      	bne.n	80043e6 <UART_Receive_IT+0x50>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d113      	bne.n	80043e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	1c9a      	adds	r2, r3, #2
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	629a      	str	r2, [r3, #40]	; 0x28
 80043e4:	e026      	b.n	8004434 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80043ec:	2300      	movs	r3, #0
 80043ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f8:	d007      	beq.n	800440a <UART_Receive_IT+0x74>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10a      	bne.n	8004418 <UART_Receive_IT+0x82>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	b2da      	uxtb	r2, r3
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	e008      	b.n	800442a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004424:	b2da      	uxtb	r2, r3
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004428:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	b29b      	uxth	r3, r3
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	4619      	mov	r1, r3
 8004442:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004444:	2b00      	cmp	r3, #0
 8004446:	d15d      	bne.n	8004504 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0220 	bic.w	r2, r2, #32
 8004456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004466:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0201 	bic.w	r2, r2, #1
 8004476:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	2b01      	cmp	r3, #1
 800448c:	d135      	bne.n	80044fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	613b      	str	r3, [r7, #16]
   return(result);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f023 0310 	bic.w	r3, r3, #16
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b4:	623a      	str	r2, [r7, #32]
 80044b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	69f9      	ldr	r1, [r7, #28]
 80044ba:	6a3a      	ldr	r2, [r7, #32]
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e5      	bne.n	8004494 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	2b10      	cmp	r3, #16
 80044d4:	d10a      	bne.n	80044ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044f0:	4619      	mov	r1, r3
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff fdf9 	bl	80040ea <HAL_UARTEx_RxEventCallback>
 80044f8:	e002      	b.n	8004500 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff fde3 	bl	80040c6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004500:	2300      	movs	r3, #0
 8004502:	e002      	b.n	800450a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	e000      	b.n	800450a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004508:	2302      	movs	r3, #2
  }
}
 800450a:	4618      	mov	r0, r3
 800450c:	3730      	adds	r7, #48	; 0x30
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800454e:	f023 030c 	bic.w	r3, r3, #12
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6812      	ldr	r2, [r2, #0]
 8004556:	68b9      	ldr	r1, [r7, #8]
 8004558:	430b      	orrs	r3, r1
 800455a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a2c      	ldr	r2, [pc, #176]	; (8004628 <UART_SetConfig+0x114>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d103      	bne.n	8004584 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800457c:	f7fe fa9c 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	e002      	b.n	800458a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004584:	f7fe fa84 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 8004588:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	009a      	lsls	r2, r3, #2
 8004594:	441a      	add	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	4a22      	ldr	r2, [pc, #136]	; (800462c <UART_SetConfig+0x118>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	0119      	lsls	r1, r3, #4
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	009a      	lsls	r2, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80045c0:	4b1a      	ldr	r3, [pc, #104]	; (800462c <UART_SetConfig+0x118>)
 80045c2:	fba3 0302 	umull	r0, r3, r3, r2
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	2064      	movs	r0, #100	; 0x64
 80045ca:	fb00 f303 	mul.w	r3, r0, r3
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	3332      	adds	r3, #50	; 0x32
 80045d4:	4a15      	ldr	r2, [pc, #84]	; (800462c <UART_SetConfig+0x118>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e0:	4419      	add	r1, r3
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	009a      	lsls	r2, r3, #2
 80045ec:	441a      	add	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <UART_SetConfig+0x118>)
 80045fa:	fba3 0302 	umull	r0, r3, r3, r2
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	2064      	movs	r0, #100	; 0x64
 8004602:	fb00 f303 	mul.w	r3, r0, r3
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	3332      	adds	r3, #50	; 0x32
 800460c:	4a07      	ldr	r2, [pc, #28]	; (800462c <UART_SetConfig+0x118>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	f003 020f 	and.w	r2, r3, #15
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	440a      	add	r2, r1
 800461e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40013800 	.word	0x40013800
 800462c:	51eb851f 	.word	0x51eb851f

08004630 <__errno>:
 8004630:	4b01      	ldr	r3, [pc, #4]	; (8004638 <__errno+0x8>)
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	200000b8 	.word	0x200000b8

0800463c <__libc_init_array>:
 800463c:	b570      	push	{r4, r5, r6, lr}
 800463e:	2600      	movs	r6, #0
 8004640:	4d0c      	ldr	r5, [pc, #48]	; (8004674 <__libc_init_array+0x38>)
 8004642:	4c0d      	ldr	r4, [pc, #52]	; (8004678 <__libc_init_array+0x3c>)
 8004644:	1b64      	subs	r4, r4, r5
 8004646:	10a4      	asrs	r4, r4, #2
 8004648:	42a6      	cmp	r6, r4
 800464a:	d109      	bne.n	8004660 <__libc_init_array+0x24>
 800464c:	f000 fc64 	bl	8004f18 <_init>
 8004650:	2600      	movs	r6, #0
 8004652:	4d0a      	ldr	r5, [pc, #40]	; (800467c <__libc_init_array+0x40>)
 8004654:	4c0a      	ldr	r4, [pc, #40]	; (8004680 <__libc_init_array+0x44>)
 8004656:	1b64      	subs	r4, r4, r5
 8004658:	10a4      	asrs	r4, r4, #2
 800465a:	42a6      	cmp	r6, r4
 800465c:	d105      	bne.n	800466a <__libc_init_array+0x2e>
 800465e:	bd70      	pop	{r4, r5, r6, pc}
 8004660:	f855 3b04 	ldr.w	r3, [r5], #4
 8004664:	4798      	blx	r3
 8004666:	3601      	adds	r6, #1
 8004668:	e7ee      	b.n	8004648 <__libc_init_array+0xc>
 800466a:	f855 3b04 	ldr.w	r3, [r5], #4
 800466e:	4798      	blx	r3
 8004670:	3601      	adds	r6, #1
 8004672:	e7f2      	b.n	800465a <__libc_init_array+0x1e>
 8004674:	08005068 	.word	0x08005068
 8004678:	08005068 	.word	0x08005068
 800467c:	08005068 	.word	0x08005068
 8004680:	0800506c 	.word	0x0800506c

08004684 <malloc>:
 8004684:	4b02      	ldr	r3, [pc, #8]	; (8004690 <malloc+0xc>)
 8004686:	4601      	mov	r1, r0
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	f000 b857 	b.w	800473c <_malloc_r>
 800468e:	bf00      	nop
 8004690:	200000b8 	.word	0x200000b8

08004694 <memset>:
 8004694:	4603      	mov	r3, r0
 8004696:	4402      	add	r2, r0
 8004698:	4293      	cmp	r3, r2
 800469a:	d100      	bne.n	800469e <memset+0xa>
 800469c:	4770      	bx	lr
 800469e:	f803 1b01 	strb.w	r1, [r3], #1
 80046a2:	e7f9      	b.n	8004698 <memset+0x4>

080046a4 <_free_r>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	4605      	mov	r5, r0
 80046a8:	2900      	cmp	r1, #0
 80046aa:	d043      	beq.n	8004734 <_free_r+0x90>
 80046ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046b0:	1f0c      	subs	r4, r1, #4
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bfb8      	it	lt
 80046b6:	18e4      	addlt	r4, r4, r3
 80046b8:	f000 f8ca 	bl	8004850 <__malloc_lock>
 80046bc:	4a1e      	ldr	r2, [pc, #120]	; (8004738 <_free_r+0x94>)
 80046be:	6813      	ldr	r3, [r2, #0]
 80046c0:	4610      	mov	r0, r2
 80046c2:	b933      	cbnz	r3, 80046d2 <_free_r+0x2e>
 80046c4:	6063      	str	r3, [r4, #4]
 80046c6:	6014      	str	r4, [r2, #0]
 80046c8:	4628      	mov	r0, r5
 80046ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046ce:	f000 b8c5 	b.w	800485c <__malloc_unlock>
 80046d2:	42a3      	cmp	r3, r4
 80046d4:	d90a      	bls.n	80046ec <_free_r+0x48>
 80046d6:	6821      	ldr	r1, [r4, #0]
 80046d8:	1862      	adds	r2, r4, r1
 80046da:	4293      	cmp	r3, r2
 80046dc:	bf01      	itttt	eq
 80046de:	681a      	ldreq	r2, [r3, #0]
 80046e0:	685b      	ldreq	r3, [r3, #4]
 80046e2:	1852      	addeq	r2, r2, r1
 80046e4:	6022      	streq	r2, [r4, #0]
 80046e6:	6063      	str	r3, [r4, #4]
 80046e8:	6004      	str	r4, [r0, #0]
 80046ea:	e7ed      	b.n	80046c8 <_free_r+0x24>
 80046ec:	461a      	mov	r2, r3
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	b10b      	cbz	r3, 80046f6 <_free_r+0x52>
 80046f2:	42a3      	cmp	r3, r4
 80046f4:	d9fa      	bls.n	80046ec <_free_r+0x48>
 80046f6:	6811      	ldr	r1, [r2, #0]
 80046f8:	1850      	adds	r0, r2, r1
 80046fa:	42a0      	cmp	r0, r4
 80046fc:	d10b      	bne.n	8004716 <_free_r+0x72>
 80046fe:	6820      	ldr	r0, [r4, #0]
 8004700:	4401      	add	r1, r0
 8004702:	1850      	adds	r0, r2, r1
 8004704:	4283      	cmp	r3, r0
 8004706:	6011      	str	r1, [r2, #0]
 8004708:	d1de      	bne.n	80046c8 <_free_r+0x24>
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	4401      	add	r1, r0
 8004710:	6011      	str	r1, [r2, #0]
 8004712:	6053      	str	r3, [r2, #4]
 8004714:	e7d8      	b.n	80046c8 <_free_r+0x24>
 8004716:	d902      	bls.n	800471e <_free_r+0x7a>
 8004718:	230c      	movs	r3, #12
 800471a:	602b      	str	r3, [r5, #0]
 800471c:	e7d4      	b.n	80046c8 <_free_r+0x24>
 800471e:	6820      	ldr	r0, [r4, #0]
 8004720:	1821      	adds	r1, r4, r0
 8004722:	428b      	cmp	r3, r1
 8004724:	bf01      	itttt	eq
 8004726:	6819      	ldreq	r1, [r3, #0]
 8004728:	685b      	ldreq	r3, [r3, #4]
 800472a:	1809      	addeq	r1, r1, r0
 800472c:	6021      	streq	r1, [r4, #0]
 800472e:	6063      	str	r3, [r4, #4]
 8004730:	6054      	str	r4, [r2, #4]
 8004732:	e7c9      	b.n	80046c8 <_free_r+0x24>
 8004734:	bd38      	pop	{r3, r4, r5, pc}
 8004736:	bf00      	nop
 8004738:	2000017c 	.word	0x2000017c

0800473c <_malloc_r>:
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473e:	1ccd      	adds	r5, r1, #3
 8004740:	f025 0503 	bic.w	r5, r5, #3
 8004744:	3508      	adds	r5, #8
 8004746:	2d0c      	cmp	r5, #12
 8004748:	bf38      	it	cc
 800474a:	250c      	movcc	r5, #12
 800474c:	2d00      	cmp	r5, #0
 800474e:	4606      	mov	r6, r0
 8004750:	db01      	blt.n	8004756 <_malloc_r+0x1a>
 8004752:	42a9      	cmp	r1, r5
 8004754:	d903      	bls.n	800475e <_malloc_r+0x22>
 8004756:	230c      	movs	r3, #12
 8004758:	6033      	str	r3, [r6, #0]
 800475a:	2000      	movs	r0, #0
 800475c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800475e:	f000 f877 	bl	8004850 <__malloc_lock>
 8004762:	4921      	ldr	r1, [pc, #132]	; (80047e8 <_malloc_r+0xac>)
 8004764:	680a      	ldr	r2, [r1, #0]
 8004766:	4614      	mov	r4, r2
 8004768:	b99c      	cbnz	r4, 8004792 <_malloc_r+0x56>
 800476a:	4f20      	ldr	r7, [pc, #128]	; (80047ec <_malloc_r+0xb0>)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	b923      	cbnz	r3, 800477a <_malloc_r+0x3e>
 8004770:	4621      	mov	r1, r4
 8004772:	4630      	mov	r0, r6
 8004774:	f000 f83c 	bl	80047f0 <_sbrk_r>
 8004778:	6038      	str	r0, [r7, #0]
 800477a:	4629      	mov	r1, r5
 800477c:	4630      	mov	r0, r6
 800477e:	f000 f837 	bl	80047f0 <_sbrk_r>
 8004782:	1c43      	adds	r3, r0, #1
 8004784:	d123      	bne.n	80047ce <_malloc_r+0x92>
 8004786:	230c      	movs	r3, #12
 8004788:	4630      	mov	r0, r6
 800478a:	6033      	str	r3, [r6, #0]
 800478c:	f000 f866 	bl	800485c <__malloc_unlock>
 8004790:	e7e3      	b.n	800475a <_malloc_r+0x1e>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	1b5b      	subs	r3, r3, r5
 8004796:	d417      	bmi.n	80047c8 <_malloc_r+0x8c>
 8004798:	2b0b      	cmp	r3, #11
 800479a:	d903      	bls.n	80047a4 <_malloc_r+0x68>
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	441c      	add	r4, r3
 80047a0:	6025      	str	r5, [r4, #0]
 80047a2:	e004      	b.n	80047ae <_malloc_r+0x72>
 80047a4:	6863      	ldr	r3, [r4, #4]
 80047a6:	42a2      	cmp	r2, r4
 80047a8:	bf0c      	ite	eq
 80047aa:	600b      	streq	r3, [r1, #0]
 80047ac:	6053      	strne	r3, [r2, #4]
 80047ae:	4630      	mov	r0, r6
 80047b0:	f000 f854 	bl	800485c <__malloc_unlock>
 80047b4:	f104 000b 	add.w	r0, r4, #11
 80047b8:	1d23      	adds	r3, r4, #4
 80047ba:	f020 0007 	bic.w	r0, r0, #7
 80047be:	1ac2      	subs	r2, r0, r3
 80047c0:	d0cc      	beq.n	800475c <_malloc_r+0x20>
 80047c2:	1a1b      	subs	r3, r3, r0
 80047c4:	50a3      	str	r3, [r4, r2]
 80047c6:	e7c9      	b.n	800475c <_malloc_r+0x20>
 80047c8:	4622      	mov	r2, r4
 80047ca:	6864      	ldr	r4, [r4, #4]
 80047cc:	e7cc      	b.n	8004768 <_malloc_r+0x2c>
 80047ce:	1cc4      	adds	r4, r0, #3
 80047d0:	f024 0403 	bic.w	r4, r4, #3
 80047d4:	42a0      	cmp	r0, r4
 80047d6:	d0e3      	beq.n	80047a0 <_malloc_r+0x64>
 80047d8:	1a21      	subs	r1, r4, r0
 80047da:	4630      	mov	r0, r6
 80047dc:	f000 f808 	bl	80047f0 <_sbrk_r>
 80047e0:	3001      	adds	r0, #1
 80047e2:	d1dd      	bne.n	80047a0 <_malloc_r+0x64>
 80047e4:	e7cf      	b.n	8004786 <_malloc_r+0x4a>
 80047e6:	bf00      	nop
 80047e8:	2000017c 	.word	0x2000017c
 80047ec:	20000180 	.word	0x20000180

080047f0 <_sbrk_r>:
 80047f0:	b538      	push	{r3, r4, r5, lr}
 80047f2:	2300      	movs	r3, #0
 80047f4:	4d05      	ldr	r5, [pc, #20]	; (800480c <_sbrk_r+0x1c>)
 80047f6:	4604      	mov	r4, r0
 80047f8:	4608      	mov	r0, r1
 80047fa:	602b      	str	r3, [r5, #0]
 80047fc:	f7fd f930 	bl	8001a60 <_sbrk>
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	d102      	bne.n	800480a <_sbrk_r+0x1a>
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	b103      	cbz	r3, 800480a <_sbrk_r+0x1a>
 8004808:	6023      	str	r3, [r4, #0]
 800480a:	bd38      	pop	{r3, r4, r5, pc}
 800480c:	20000298 	.word	0x20000298

08004810 <siprintf>:
 8004810:	b40e      	push	{r1, r2, r3}
 8004812:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004816:	b500      	push	{lr}
 8004818:	b09c      	sub	sp, #112	; 0x70
 800481a:	ab1d      	add	r3, sp, #116	; 0x74
 800481c:	9002      	str	r0, [sp, #8]
 800481e:	9006      	str	r0, [sp, #24]
 8004820:	9107      	str	r1, [sp, #28]
 8004822:	9104      	str	r1, [sp, #16]
 8004824:	4808      	ldr	r0, [pc, #32]	; (8004848 <siprintf+0x38>)
 8004826:	4909      	ldr	r1, [pc, #36]	; (800484c <siprintf+0x3c>)
 8004828:	f853 2b04 	ldr.w	r2, [r3], #4
 800482c:	9105      	str	r1, [sp, #20]
 800482e:	6800      	ldr	r0, [r0, #0]
 8004830:	a902      	add	r1, sp, #8
 8004832:	9301      	str	r3, [sp, #4]
 8004834:	f000 f874 	bl	8004920 <_svfiprintf_r>
 8004838:	2200      	movs	r2, #0
 800483a:	9b02      	ldr	r3, [sp, #8]
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	b01c      	add	sp, #112	; 0x70
 8004840:	f85d eb04 	ldr.w	lr, [sp], #4
 8004844:	b003      	add	sp, #12
 8004846:	4770      	bx	lr
 8004848:	200000b8 	.word	0x200000b8
 800484c:	ffff0208 	.word	0xffff0208

08004850 <__malloc_lock>:
 8004850:	4801      	ldr	r0, [pc, #4]	; (8004858 <__malloc_lock+0x8>)
 8004852:	f000 bafb 	b.w	8004e4c <__retarget_lock_acquire_recursive>
 8004856:	bf00      	nop
 8004858:	200002a0 	.word	0x200002a0

0800485c <__malloc_unlock>:
 800485c:	4801      	ldr	r0, [pc, #4]	; (8004864 <__malloc_unlock+0x8>)
 800485e:	f000 baf6 	b.w	8004e4e <__retarget_lock_release_recursive>
 8004862:	bf00      	nop
 8004864:	200002a0 	.word	0x200002a0

08004868 <__ssputs_r>:
 8004868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800486c:	688e      	ldr	r6, [r1, #8]
 800486e:	4682      	mov	sl, r0
 8004870:	429e      	cmp	r6, r3
 8004872:	460c      	mov	r4, r1
 8004874:	4690      	mov	r8, r2
 8004876:	461f      	mov	r7, r3
 8004878:	d838      	bhi.n	80048ec <__ssputs_r+0x84>
 800487a:	898a      	ldrh	r2, [r1, #12]
 800487c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004880:	d032      	beq.n	80048e8 <__ssputs_r+0x80>
 8004882:	6825      	ldr	r5, [r4, #0]
 8004884:	6909      	ldr	r1, [r1, #16]
 8004886:	3301      	adds	r3, #1
 8004888:	eba5 0901 	sub.w	r9, r5, r1
 800488c:	6965      	ldr	r5, [r4, #20]
 800488e:	444b      	add	r3, r9
 8004890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004894:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004898:	106d      	asrs	r5, r5, #1
 800489a:	429d      	cmp	r5, r3
 800489c:	bf38      	it	cc
 800489e:	461d      	movcc	r5, r3
 80048a0:	0553      	lsls	r3, r2, #21
 80048a2:	d531      	bpl.n	8004908 <__ssputs_r+0xa0>
 80048a4:	4629      	mov	r1, r5
 80048a6:	f7ff ff49 	bl	800473c <_malloc_r>
 80048aa:	4606      	mov	r6, r0
 80048ac:	b950      	cbnz	r0, 80048c4 <__ssputs_r+0x5c>
 80048ae:	230c      	movs	r3, #12
 80048b0:	f04f 30ff 	mov.w	r0, #4294967295
 80048b4:	f8ca 3000 	str.w	r3, [sl]
 80048b8:	89a3      	ldrh	r3, [r4, #12]
 80048ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048be:	81a3      	strh	r3, [r4, #12]
 80048c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c4:	464a      	mov	r2, r9
 80048c6:	6921      	ldr	r1, [r4, #16]
 80048c8:	f000 fad0 	bl	8004e6c <memcpy>
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d6:	81a3      	strh	r3, [r4, #12]
 80048d8:	6126      	str	r6, [r4, #16]
 80048da:	444e      	add	r6, r9
 80048dc:	6026      	str	r6, [r4, #0]
 80048de:	463e      	mov	r6, r7
 80048e0:	6165      	str	r5, [r4, #20]
 80048e2:	eba5 0509 	sub.w	r5, r5, r9
 80048e6:	60a5      	str	r5, [r4, #8]
 80048e8:	42be      	cmp	r6, r7
 80048ea:	d900      	bls.n	80048ee <__ssputs_r+0x86>
 80048ec:	463e      	mov	r6, r7
 80048ee:	4632      	mov	r2, r6
 80048f0:	4641      	mov	r1, r8
 80048f2:	6820      	ldr	r0, [r4, #0]
 80048f4:	f000 fac8 	bl	8004e88 <memmove>
 80048f8:	68a3      	ldr	r3, [r4, #8]
 80048fa:	6822      	ldr	r2, [r4, #0]
 80048fc:	1b9b      	subs	r3, r3, r6
 80048fe:	4432      	add	r2, r6
 8004900:	2000      	movs	r0, #0
 8004902:	60a3      	str	r3, [r4, #8]
 8004904:	6022      	str	r2, [r4, #0]
 8004906:	e7db      	b.n	80048c0 <__ssputs_r+0x58>
 8004908:	462a      	mov	r2, r5
 800490a:	f000 fad7 	bl	8004ebc <_realloc_r>
 800490e:	4606      	mov	r6, r0
 8004910:	2800      	cmp	r0, #0
 8004912:	d1e1      	bne.n	80048d8 <__ssputs_r+0x70>
 8004914:	4650      	mov	r0, sl
 8004916:	6921      	ldr	r1, [r4, #16]
 8004918:	f7ff fec4 	bl	80046a4 <_free_r>
 800491c:	e7c7      	b.n	80048ae <__ssputs_r+0x46>
	...

08004920 <_svfiprintf_r>:
 8004920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004924:	4698      	mov	r8, r3
 8004926:	898b      	ldrh	r3, [r1, #12]
 8004928:	4607      	mov	r7, r0
 800492a:	061b      	lsls	r3, r3, #24
 800492c:	460d      	mov	r5, r1
 800492e:	4614      	mov	r4, r2
 8004930:	b09d      	sub	sp, #116	; 0x74
 8004932:	d50e      	bpl.n	8004952 <_svfiprintf_r+0x32>
 8004934:	690b      	ldr	r3, [r1, #16]
 8004936:	b963      	cbnz	r3, 8004952 <_svfiprintf_r+0x32>
 8004938:	2140      	movs	r1, #64	; 0x40
 800493a:	f7ff feff 	bl	800473c <_malloc_r>
 800493e:	6028      	str	r0, [r5, #0]
 8004940:	6128      	str	r0, [r5, #16]
 8004942:	b920      	cbnz	r0, 800494e <_svfiprintf_r+0x2e>
 8004944:	230c      	movs	r3, #12
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	f04f 30ff 	mov.w	r0, #4294967295
 800494c:	e0d1      	b.n	8004af2 <_svfiprintf_r+0x1d2>
 800494e:	2340      	movs	r3, #64	; 0x40
 8004950:	616b      	str	r3, [r5, #20]
 8004952:	2300      	movs	r3, #0
 8004954:	9309      	str	r3, [sp, #36]	; 0x24
 8004956:	2320      	movs	r3, #32
 8004958:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800495c:	2330      	movs	r3, #48	; 0x30
 800495e:	f04f 0901 	mov.w	r9, #1
 8004962:	f8cd 800c 	str.w	r8, [sp, #12]
 8004966:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004b0c <_svfiprintf_r+0x1ec>
 800496a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800496e:	4623      	mov	r3, r4
 8004970:	469a      	mov	sl, r3
 8004972:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004976:	b10a      	cbz	r2, 800497c <_svfiprintf_r+0x5c>
 8004978:	2a25      	cmp	r2, #37	; 0x25
 800497a:	d1f9      	bne.n	8004970 <_svfiprintf_r+0x50>
 800497c:	ebba 0b04 	subs.w	fp, sl, r4
 8004980:	d00b      	beq.n	800499a <_svfiprintf_r+0x7a>
 8004982:	465b      	mov	r3, fp
 8004984:	4622      	mov	r2, r4
 8004986:	4629      	mov	r1, r5
 8004988:	4638      	mov	r0, r7
 800498a:	f7ff ff6d 	bl	8004868 <__ssputs_r>
 800498e:	3001      	adds	r0, #1
 8004990:	f000 80aa 	beq.w	8004ae8 <_svfiprintf_r+0x1c8>
 8004994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004996:	445a      	add	r2, fp
 8004998:	9209      	str	r2, [sp, #36]	; 0x24
 800499a:	f89a 3000 	ldrb.w	r3, [sl]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 80a2 	beq.w	8004ae8 <_svfiprintf_r+0x1c8>
 80049a4:	2300      	movs	r3, #0
 80049a6:	f04f 32ff 	mov.w	r2, #4294967295
 80049aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049ae:	f10a 0a01 	add.w	sl, sl, #1
 80049b2:	9304      	str	r3, [sp, #16]
 80049b4:	9307      	str	r3, [sp, #28]
 80049b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049ba:	931a      	str	r3, [sp, #104]	; 0x68
 80049bc:	4654      	mov	r4, sl
 80049be:	2205      	movs	r2, #5
 80049c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c4:	4851      	ldr	r0, [pc, #324]	; (8004b0c <_svfiprintf_r+0x1ec>)
 80049c6:	f000 fa43 	bl	8004e50 <memchr>
 80049ca:	9a04      	ldr	r2, [sp, #16]
 80049cc:	b9d8      	cbnz	r0, 8004a06 <_svfiprintf_r+0xe6>
 80049ce:	06d0      	lsls	r0, r2, #27
 80049d0:	bf44      	itt	mi
 80049d2:	2320      	movmi	r3, #32
 80049d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049d8:	0711      	lsls	r1, r2, #28
 80049da:	bf44      	itt	mi
 80049dc:	232b      	movmi	r3, #43	; 0x2b
 80049de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049e2:	f89a 3000 	ldrb.w	r3, [sl]
 80049e6:	2b2a      	cmp	r3, #42	; 0x2a
 80049e8:	d015      	beq.n	8004a16 <_svfiprintf_r+0xf6>
 80049ea:	4654      	mov	r4, sl
 80049ec:	2000      	movs	r0, #0
 80049ee:	f04f 0c0a 	mov.w	ip, #10
 80049f2:	9a07      	ldr	r2, [sp, #28]
 80049f4:	4621      	mov	r1, r4
 80049f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049fa:	3b30      	subs	r3, #48	; 0x30
 80049fc:	2b09      	cmp	r3, #9
 80049fe:	d94e      	bls.n	8004a9e <_svfiprintf_r+0x17e>
 8004a00:	b1b0      	cbz	r0, 8004a30 <_svfiprintf_r+0x110>
 8004a02:	9207      	str	r2, [sp, #28]
 8004a04:	e014      	b.n	8004a30 <_svfiprintf_r+0x110>
 8004a06:	eba0 0308 	sub.w	r3, r0, r8
 8004a0a:	fa09 f303 	lsl.w	r3, r9, r3
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	46a2      	mov	sl, r4
 8004a12:	9304      	str	r3, [sp, #16]
 8004a14:	e7d2      	b.n	80049bc <_svfiprintf_r+0x9c>
 8004a16:	9b03      	ldr	r3, [sp, #12]
 8004a18:	1d19      	adds	r1, r3, #4
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	9103      	str	r1, [sp, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bfbb      	ittet	lt
 8004a22:	425b      	neglt	r3, r3
 8004a24:	f042 0202 	orrlt.w	r2, r2, #2
 8004a28:	9307      	strge	r3, [sp, #28]
 8004a2a:	9307      	strlt	r3, [sp, #28]
 8004a2c:	bfb8      	it	lt
 8004a2e:	9204      	strlt	r2, [sp, #16]
 8004a30:	7823      	ldrb	r3, [r4, #0]
 8004a32:	2b2e      	cmp	r3, #46	; 0x2e
 8004a34:	d10c      	bne.n	8004a50 <_svfiprintf_r+0x130>
 8004a36:	7863      	ldrb	r3, [r4, #1]
 8004a38:	2b2a      	cmp	r3, #42	; 0x2a
 8004a3a:	d135      	bne.n	8004aa8 <_svfiprintf_r+0x188>
 8004a3c:	9b03      	ldr	r3, [sp, #12]
 8004a3e:	3402      	adds	r4, #2
 8004a40:	1d1a      	adds	r2, r3, #4
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	9203      	str	r2, [sp, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	bfb8      	it	lt
 8004a4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a4e:	9305      	str	r3, [sp, #20]
 8004a50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b1c <_svfiprintf_r+0x1fc>
 8004a54:	2203      	movs	r2, #3
 8004a56:	4650      	mov	r0, sl
 8004a58:	7821      	ldrb	r1, [r4, #0]
 8004a5a:	f000 f9f9 	bl	8004e50 <memchr>
 8004a5e:	b140      	cbz	r0, 8004a72 <_svfiprintf_r+0x152>
 8004a60:	2340      	movs	r3, #64	; 0x40
 8004a62:	eba0 000a 	sub.w	r0, r0, sl
 8004a66:	fa03 f000 	lsl.w	r0, r3, r0
 8004a6a:	9b04      	ldr	r3, [sp, #16]
 8004a6c:	3401      	adds	r4, #1
 8004a6e:	4303      	orrs	r3, r0
 8004a70:	9304      	str	r3, [sp, #16]
 8004a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a76:	2206      	movs	r2, #6
 8004a78:	4825      	ldr	r0, [pc, #148]	; (8004b10 <_svfiprintf_r+0x1f0>)
 8004a7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a7e:	f000 f9e7 	bl	8004e50 <memchr>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d038      	beq.n	8004af8 <_svfiprintf_r+0x1d8>
 8004a86:	4b23      	ldr	r3, [pc, #140]	; (8004b14 <_svfiprintf_r+0x1f4>)
 8004a88:	bb1b      	cbnz	r3, 8004ad2 <_svfiprintf_r+0x1b2>
 8004a8a:	9b03      	ldr	r3, [sp, #12]
 8004a8c:	3307      	adds	r3, #7
 8004a8e:	f023 0307 	bic.w	r3, r3, #7
 8004a92:	3308      	adds	r3, #8
 8004a94:	9303      	str	r3, [sp, #12]
 8004a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a98:	4433      	add	r3, r6
 8004a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a9c:	e767      	b.n	800496e <_svfiprintf_r+0x4e>
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004aa6:	e7a5      	b.n	80049f4 <_svfiprintf_r+0xd4>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f04f 0c0a 	mov.w	ip, #10
 8004aae:	4619      	mov	r1, r3
 8004ab0:	3401      	adds	r4, #1
 8004ab2:	9305      	str	r3, [sp, #20]
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aba:	3a30      	subs	r2, #48	; 0x30
 8004abc:	2a09      	cmp	r2, #9
 8004abe:	d903      	bls.n	8004ac8 <_svfiprintf_r+0x1a8>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0c5      	beq.n	8004a50 <_svfiprintf_r+0x130>
 8004ac4:	9105      	str	r1, [sp, #20]
 8004ac6:	e7c3      	b.n	8004a50 <_svfiprintf_r+0x130>
 8004ac8:	4604      	mov	r4, r0
 8004aca:	2301      	movs	r3, #1
 8004acc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ad0:	e7f0      	b.n	8004ab4 <_svfiprintf_r+0x194>
 8004ad2:	ab03      	add	r3, sp, #12
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	462a      	mov	r2, r5
 8004ad8:	4638      	mov	r0, r7
 8004ada:	4b0f      	ldr	r3, [pc, #60]	; (8004b18 <_svfiprintf_r+0x1f8>)
 8004adc:	a904      	add	r1, sp, #16
 8004ade:	f3af 8000 	nop.w
 8004ae2:	1c42      	adds	r2, r0, #1
 8004ae4:	4606      	mov	r6, r0
 8004ae6:	d1d6      	bne.n	8004a96 <_svfiprintf_r+0x176>
 8004ae8:	89ab      	ldrh	r3, [r5, #12]
 8004aea:	065b      	lsls	r3, r3, #25
 8004aec:	f53f af2c 	bmi.w	8004948 <_svfiprintf_r+0x28>
 8004af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004af2:	b01d      	add	sp, #116	; 0x74
 8004af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004af8:	ab03      	add	r3, sp, #12
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	462a      	mov	r2, r5
 8004afe:	4638      	mov	r0, r7
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <_svfiprintf_r+0x1f8>)
 8004b02:	a904      	add	r1, sp, #16
 8004b04:	f000 f87c 	bl	8004c00 <_printf_i>
 8004b08:	e7eb      	b.n	8004ae2 <_svfiprintf_r+0x1c2>
 8004b0a:	bf00      	nop
 8004b0c:	08005032 	.word	0x08005032
 8004b10:	0800503c 	.word	0x0800503c
 8004b14:	00000000 	.word	0x00000000
 8004b18:	08004869 	.word	0x08004869
 8004b1c:	08005038 	.word	0x08005038

08004b20 <_printf_common>:
 8004b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b24:	4616      	mov	r6, r2
 8004b26:	4699      	mov	r9, r3
 8004b28:	688a      	ldr	r2, [r1, #8]
 8004b2a:	690b      	ldr	r3, [r1, #16]
 8004b2c:	4607      	mov	r7, r0
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	bfb8      	it	lt
 8004b32:	4613      	movlt	r3, r2
 8004b34:	6033      	str	r3, [r6, #0]
 8004b36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b40:	b10a      	cbz	r2, 8004b46 <_printf_common+0x26>
 8004b42:	3301      	adds	r3, #1
 8004b44:	6033      	str	r3, [r6, #0]
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	0699      	lsls	r1, r3, #26
 8004b4a:	bf42      	ittt	mi
 8004b4c:	6833      	ldrmi	r3, [r6, #0]
 8004b4e:	3302      	addmi	r3, #2
 8004b50:	6033      	strmi	r3, [r6, #0]
 8004b52:	6825      	ldr	r5, [r4, #0]
 8004b54:	f015 0506 	ands.w	r5, r5, #6
 8004b58:	d106      	bne.n	8004b68 <_printf_common+0x48>
 8004b5a:	f104 0a19 	add.w	sl, r4, #25
 8004b5e:	68e3      	ldr	r3, [r4, #12]
 8004b60:	6832      	ldr	r2, [r6, #0]
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	42ab      	cmp	r3, r5
 8004b66:	dc28      	bgt.n	8004bba <_printf_common+0x9a>
 8004b68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b6c:	1e13      	subs	r3, r2, #0
 8004b6e:	6822      	ldr	r2, [r4, #0]
 8004b70:	bf18      	it	ne
 8004b72:	2301      	movne	r3, #1
 8004b74:	0692      	lsls	r2, r2, #26
 8004b76:	d42d      	bmi.n	8004bd4 <_printf_common+0xb4>
 8004b78:	4649      	mov	r1, r9
 8004b7a:	4638      	mov	r0, r7
 8004b7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b80:	47c0      	blx	r8
 8004b82:	3001      	adds	r0, #1
 8004b84:	d020      	beq.n	8004bc8 <_printf_common+0xa8>
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	68e5      	ldr	r5, [r4, #12]
 8004b8a:	f003 0306 	and.w	r3, r3, #6
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	bf18      	it	ne
 8004b92:	2500      	movne	r5, #0
 8004b94:	6832      	ldr	r2, [r6, #0]
 8004b96:	f04f 0600 	mov.w	r6, #0
 8004b9a:	68a3      	ldr	r3, [r4, #8]
 8004b9c:	bf08      	it	eq
 8004b9e:	1aad      	subeq	r5, r5, r2
 8004ba0:	6922      	ldr	r2, [r4, #16]
 8004ba2:	bf08      	it	eq
 8004ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	bfc4      	itt	gt
 8004bac:	1a9b      	subgt	r3, r3, r2
 8004bae:	18ed      	addgt	r5, r5, r3
 8004bb0:	341a      	adds	r4, #26
 8004bb2:	42b5      	cmp	r5, r6
 8004bb4:	d11a      	bne.n	8004bec <_printf_common+0xcc>
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	e008      	b.n	8004bcc <_printf_common+0xac>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	4652      	mov	r2, sl
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	4638      	mov	r0, r7
 8004bc2:	47c0      	blx	r8
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d103      	bne.n	8004bd0 <_printf_common+0xb0>
 8004bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd0:	3501      	adds	r5, #1
 8004bd2:	e7c4      	b.n	8004b5e <_printf_common+0x3e>
 8004bd4:	2030      	movs	r0, #48	; 0x30
 8004bd6:	18e1      	adds	r1, r4, r3
 8004bd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004be2:	4422      	add	r2, r4
 8004be4:	3302      	adds	r3, #2
 8004be6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bea:	e7c5      	b.n	8004b78 <_printf_common+0x58>
 8004bec:	2301      	movs	r3, #1
 8004bee:	4622      	mov	r2, r4
 8004bf0:	4649      	mov	r1, r9
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	47c0      	blx	r8
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	d0e6      	beq.n	8004bc8 <_printf_common+0xa8>
 8004bfa:	3601      	adds	r6, #1
 8004bfc:	e7d9      	b.n	8004bb2 <_printf_common+0x92>
	...

08004c00 <_printf_i>:
 8004c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c04:	460c      	mov	r4, r1
 8004c06:	7e27      	ldrb	r7, [r4, #24]
 8004c08:	4691      	mov	r9, r2
 8004c0a:	2f78      	cmp	r7, #120	; 0x78
 8004c0c:	4680      	mov	r8, r0
 8004c0e:	469a      	mov	sl, r3
 8004c10:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c16:	d807      	bhi.n	8004c28 <_printf_i+0x28>
 8004c18:	2f62      	cmp	r7, #98	; 0x62
 8004c1a:	d80a      	bhi.n	8004c32 <_printf_i+0x32>
 8004c1c:	2f00      	cmp	r7, #0
 8004c1e:	f000 80d9 	beq.w	8004dd4 <_printf_i+0x1d4>
 8004c22:	2f58      	cmp	r7, #88	; 0x58
 8004c24:	f000 80a4 	beq.w	8004d70 <_printf_i+0x170>
 8004c28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c30:	e03a      	b.n	8004ca8 <_printf_i+0xa8>
 8004c32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c36:	2b15      	cmp	r3, #21
 8004c38:	d8f6      	bhi.n	8004c28 <_printf_i+0x28>
 8004c3a:	a001      	add	r0, pc, #4	; (adr r0, 8004c40 <_printf_i+0x40>)
 8004c3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c40:	08004c99 	.word	0x08004c99
 8004c44:	08004cad 	.word	0x08004cad
 8004c48:	08004c29 	.word	0x08004c29
 8004c4c:	08004c29 	.word	0x08004c29
 8004c50:	08004c29 	.word	0x08004c29
 8004c54:	08004c29 	.word	0x08004c29
 8004c58:	08004cad 	.word	0x08004cad
 8004c5c:	08004c29 	.word	0x08004c29
 8004c60:	08004c29 	.word	0x08004c29
 8004c64:	08004c29 	.word	0x08004c29
 8004c68:	08004c29 	.word	0x08004c29
 8004c6c:	08004dbb 	.word	0x08004dbb
 8004c70:	08004cdd 	.word	0x08004cdd
 8004c74:	08004d9d 	.word	0x08004d9d
 8004c78:	08004c29 	.word	0x08004c29
 8004c7c:	08004c29 	.word	0x08004c29
 8004c80:	08004ddd 	.word	0x08004ddd
 8004c84:	08004c29 	.word	0x08004c29
 8004c88:	08004cdd 	.word	0x08004cdd
 8004c8c:	08004c29 	.word	0x08004c29
 8004c90:	08004c29 	.word	0x08004c29
 8004c94:	08004da5 	.word	0x08004da5
 8004c98:	680b      	ldr	r3, [r1, #0]
 8004c9a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c9e:	1d1a      	adds	r2, r3, #4
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	600a      	str	r2, [r1, #0]
 8004ca4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0a4      	b.n	8004df6 <_printf_i+0x1f6>
 8004cac:	6825      	ldr	r5, [r4, #0]
 8004cae:	6808      	ldr	r0, [r1, #0]
 8004cb0:	062e      	lsls	r6, r5, #24
 8004cb2:	f100 0304 	add.w	r3, r0, #4
 8004cb6:	d50a      	bpl.n	8004cce <_printf_i+0xce>
 8004cb8:	6805      	ldr	r5, [r0, #0]
 8004cba:	600b      	str	r3, [r1, #0]
 8004cbc:	2d00      	cmp	r5, #0
 8004cbe:	da03      	bge.n	8004cc8 <_printf_i+0xc8>
 8004cc0:	232d      	movs	r3, #45	; 0x2d
 8004cc2:	426d      	negs	r5, r5
 8004cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cc8:	230a      	movs	r3, #10
 8004cca:	485e      	ldr	r0, [pc, #376]	; (8004e44 <_printf_i+0x244>)
 8004ccc:	e019      	b.n	8004d02 <_printf_i+0x102>
 8004cce:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004cd2:	6805      	ldr	r5, [r0, #0]
 8004cd4:	600b      	str	r3, [r1, #0]
 8004cd6:	bf18      	it	ne
 8004cd8:	b22d      	sxthne	r5, r5
 8004cda:	e7ef      	b.n	8004cbc <_printf_i+0xbc>
 8004cdc:	680b      	ldr	r3, [r1, #0]
 8004cde:	6825      	ldr	r5, [r4, #0]
 8004ce0:	1d18      	adds	r0, r3, #4
 8004ce2:	6008      	str	r0, [r1, #0]
 8004ce4:	0628      	lsls	r0, r5, #24
 8004ce6:	d501      	bpl.n	8004cec <_printf_i+0xec>
 8004ce8:	681d      	ldr	r5, [r3, #0]
 8004cea:	e002      	b.n	8004cf2 <_printf_i+0xf2>
 8004cec:	0669      	lsls	r1, r5, #25
 8004cee:	d5fb      	bpl.n	8004ce8 <_printf_i+0xe8>
 8004cf0:	881d      	ldrh	r5, [r3, #0]
 8004cf2:	2f6f      	cmp	r7, #111	; 0x6f
 8004cf4:	bf0c      	ite	eq
 8004cf6:	2308      	moveq	r3, #8
 8004cf8:	230a      	movne	r3, #10
 8004cfa:	4852      	ldr	r0, [pc, #328]	; (8004e44 <_printf_i+0x244>)
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d02:	6866      	ldr	r6, [r4, #4]
 8004d04:	2e00      	cmp	r6, #0
 8004d06:	bfa8      	it	ge
 8004d08:	6821      	ldrge	r1, [r4, #0]
 8004d0a:	60a6      	str	r6, [r4, #8]
 8004d0c:	bfa4      	itt	ge
 8004d0e:	f021 0104 	bicge.w	r1, r1, #4
 8004d12:	6021      	strge	r1, [r4, #0]
 8004d14:	b90d      	cbnz	r5, 8004d1a <_printf_i+0x11a>
 8004d16:	2e00      	cmp	r6, #0
 8004d18:	d04d      	beq.n	8004db6 <_printf_i+0x1b6>
 8004d1a:	4616      	mov	r6, r2
 8004d1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d20:	fb03 5711 	mls	r7, r3, r1, r5
 8004d24:	5dc7      	ldrb	r7, [r0, r7]
 8004d26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d2a:	462f      	mov	r7, r5
 8004d2c:	42bb      	cmp	r3, r7
 8004d2e:	460d      	mov	r5, r1
 8004d30:	d9f4      	bls.n	8004d1c <_printf_i+0x11c>
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d10b      	bne.n	8004d4e <_printf_i+0x14e>
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	07df      	lsls	r7, r3, #31
 8004d3a:	d508      	bpl.n	8004d4e <_printf_i+0x14e>
 8004d3c:	6923      	ldr	r3, [r4, #16]
 8004d3e:	6861      	ldr	r1, [r4, #4]
 8004d40:	4299      	cmp	r1, r3
 8004d42:	bfde      	ittt	le
 8004d44:	2330      	movle	r3, #48	; 0x30
 8004d46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d4e:	1b92      	subs	r2, r2, r6
 8004d50:	6122      	str	r2, [r4, #16]
 8004d52:	464b      	mov	r3, r9
 8004d54:	4621      	mov	r1, r4
 8004d56:	4640      	mov	r0, r8
 8004d58:	f8cd a000 	str.w	sl, [sp]
 8004d5c:	aa03      	add	r2, sp, #12
 8004d5e:	f7ff fedf 	bl	8004b20 <_printf_common>
 8004d62:	3001      	adds	r0, #1
 8004d64:	d14c      	bne.n	8004e00 <_printf_i+0x200>
 8004d66:	f04f 30ff 	mov.w	r0, #4294967295
 8004d6a:	b004      	add	sp, #16
 8004d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d70:	4834      	ldr	r0, [pc, #208]	; (8004e44 <_printf_i+0x244>)
 8004d72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d76:	680e      	ldr	r6, [r1, #0]
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004d7e:	061f      	lsls	r7, r3, #24
 8004d80:	600e      	str	r6, [r1, #0]
 8004d82:	d514      	bpl.n	8004dae <_printf_i+0x1ae>
 8004d84:	07d9      	lsls	r1, r3, #31
 8004d86:	bf44      	itt	mi
 8004d88:	f043 0320 	orrmi.w	r3, r3, #32
 8004d8c:	6023      	strmi	r3, [r4, #0]
 8004d8e:	b91d      	cbnz	r5, 8004d98 <_printf_i+0x198>
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	f023 0320 	bic.w	r3, r3, #32
 8004d96:	6023      	str	r3, [r4, #0]
 8004d98:	2310      	movs	r3, #16
 8004d9a:	e7af      	b.n	8004cfc <_printf_i+0xfc>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	f043 0320 	orr.w	r3, r3, #32
 8004da2:	6023      	str	r3, [r4, #0]
 8004da4:	2378      	movs	r3, #120	; 0x78
 8004da6:	4828      	ldr	r0, [pc, #160]	; (8004e48 <_printf_i+0x248>)
 8004da8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dac:	e7e3      	b.n	8004d76 <_printf_i+0x176>
 8004dae:	065e      	lsls	r6, r3, #25
 8004db0:	bf48      	it	mi
 8004db2:	b2ad      	uxthmi	r5, r5
 8004db4:	e7e6      	b.n	8004d84 <_printf_i+0x184>
 8004db6:	4616      	mov	r6, r2
 8004db8:	e7bb      	b.n	8004d32 <_printf_i+0x132>
 8004dba:	680b      	ldr	r3, [r1, #0]
 8004dbc:	6826      	ldr	r6, [r4, #0]
 8004dbe:	1d1d      	adds	r5, r3, #4
 8004dc0:	6960      	ldr	r0, [r4, #20]
 8004dc2:	600d      	str	r5, [r1, #0]
 8004dc4:	0635      	lsls	r5, r6, #24
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	d501      	bpl.n	8004dce <_printf_i+0x1ce>
 8004dca:	6018      	str	r0, [r3, #0]
 8004dcc:	e002      	b.n	8004dd4 <_printf_i+0x1d4>
 8004dce:	0671      	lsls	r1, r6, #25
 8004dd0:	d5fb      	bpl.n	8004dca <_printf_i+0x1ca>
 8004dd2:	8018      	strh	r0, [r3, #0]
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	4616      	mov	r6, r2
 8004dd8:	6123      	str	r3, [r4, #16]
 8004dda:	e7ba      	b.n	8004d52 <_printf_i+0x152>
 8004ddc:	680b      	ldr	r3, [r1, #0]
 8004dde:	1d1a      	adds	r2, r3, #4
 8004de0:	600a      	str	r2, [r1, #0]
 8004de2:	681e      	ldr	r6, [r3, #0]
 8004de4:	2100      	movs	r1, #0
 8004de6:	4630      	mov	r0, r6
 8004de8:	6862      	ldr	r2, [r4, #4]
 8004dea:	f000 f831 	bl	8004e50 <memchr>
 8004dee:	b108      	cbz	r0, 8004df4 <_printf_i+0x1f4>
 8004df0:	1b80      	subs	r0, r0, r6
 8004df2:	6060      	str	r0, [r4, #4]
 8004df4:	6863      	ldr	r3, [r4, #4]
 8004df6:	6123      	str	r3, [r4, #16]
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dfe:	e7a8      	b.n	8004d52 <_printf_i+0x152>
 8004e00:	4632      	mov	r2, r6
 8004e02:	4649      	mov	r1, r9
 8004e04:	4640      	mov	r0, r8
 8004e06:	6923      	ldr	r3, [r4, #16]
 8004e08:	47d0      	blx	sl
 8004e0a:	3001      	adds	r0, #1
 8004e0c:	d0ab      	beq.n	8004d66 <_printf_i+0x166>
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	079b      	lsls	r3, r3, #30
 8004e12:	d413      	bmi.n	8004e3c <_printf_i+0x23c>
 8004e14:	68e0      	ldr	r0, [r4, #12]
 8004e16:	9b03      	ldr	r3, [sp, #12]
 8004e18:	4298      	cmp	r0, r3
 8004e1a:	bfb8      	it	lt
 8004e1c:	4618      	movlt	r0, r3
 8004e1e:	e7a4      	b.n	8004d6a <_printf_i+0x16a>
 8004e20:	2301      	movs	r3, #1
 8004e22:	4632      	mov	r2, r6
 8004e24:	4649      	mov	r1, r9
 8004e26:	4640      	mov	r0, r8
 8004e28:	47d0      	blx	sl
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	d09b      	beq.n	8004d66 <_printf_i+0x166>
 8004e2e:	3501      	adds	r5, #1
 8004e30:	68e3      	ldr	r3, [r4, #12]
 8004e32:	9903      	ldr	r1, [sp, #12]
 8004e34:	1a5b      	subs	r3, r3, r1
 8004e36:	42ab      	cmp	r3, r5
 8004e38:	dcf2      	bgt.n	8004e20 <_printf_i+0x220>
 8004e3a:	e7eb      	b.n	8004e14 <_printf_i+0x214>
 8004e3c:	2500      	movs	r5, #0
 8004e3e:	f104 0619 	add.w	r6, r4, #25
 8004e42:	e7f5      	b.n	8004e30 <_printf_i+0x230>
 8004e44:	08005043 	.word	0x08005043
 8004e48:	08005054 	.word	0x08005054

08004e4c <__retarget_lock_acquire_recursive>:
 8004e4c:	4770      	bx	lr

08004e4e <__retarget_lock_release_recursive>:
 8004e4e:	4770      	bx	lr

08004e50 <memchr>:
 8004e50:	4603      	mov	r3, r0
 8004e52:	b510      	push	{r4, lr}
 8004e54:	b2c9      	uxtb	r1, r1
 8004e56:	4402      	add	r2, r0
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	d101      	bne.n	8004e62 <memchr+0x12>
 8004e5e:	2000      	movs	r0, #0
 8004e60:	e003      	b.n	8004e6a <memchr+0x1a>
 8004e62:	7804      	ldrb	r4, [r0, #0]
 8004e64:	3301      	adds	r3, #1
 8004e66:	428c      	cmp	r4, r1
 8004e68:	d1f6      	bne.n	8004e58 <memchr+0x8>
 8004e6a:	bd10      	pop	{r4, pc}

08004e6c <memcpy>:
 8004e6c:	440a      	add	r2, r1
 8004e6e:	4291      	cmp	r1, r2
 8004e70:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e74:	d100      	bne.n	8004e78 <memcpy+0xc>
 8004e76:	4770      	bx	lr
 8004e78:	b510      	push	{r4, lr}
 8004e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e7e:	4291      	cmp	r1, r2
 8004e80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e84:	d1f9      	bne.n	8004e7a <memcpy+0xe>
 8004e86:	bd10      	pop	{r4, pc}

08004e88 <memmove>:
 8004e88:	4288      	cmp	r0, r1
 8004e8a:	b510      	push	{r4, lr}
 8004e8c:	eb01 0402 	add.w	r4, r1, r2
 8004e90:	d902      	bls.n	8004e98 <memmove+0x10>
 8004e92:	4284      	cmp	r4, r0
 8004e94:	4623      	mov	r3, r4
 8004e96:	d807      	bhi.n	8004ea8 <memmove+0x20>
 8004e98:	1e43      	subs	r3, r0, #1
 8004e9a:	42a1      	cmp	r1, r4
 8004e9c:	d008      	beq.n	8004eb0 <memmove+0x28>
 8004e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ea2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ea6:	e7f8      	b.n	8004e9a <memmove+0x12>
 8004ea8:	4601      	mov	r1, r0
 8004eaa:	4402      	add	r2, r0
 8004eac:	428a      	cmp	r2, r1
 8004eae:	d100      	bne.n	8004eb2 <memmove+0x2a>
 8004eb0:	bd10      	pop	{r4, pc}
 8004eb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004eba:	e7f7      	b.n	8004eac <memmove+0x24>

08004ebc <_realloc_r>:
 8004ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebe:	4607      	mov	r7, r0
 8004ec0:	4614      	mov	r4, r2
 8004ec2:	460e      	mov	r6, r1
 8004ec4:	b921      	cbnz	r1, 8004ed0 <_realloc_r+0x14>
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ecc:	f7ff bc36 	b.w	800473c <_malloc_r>
 8004ed0:	b922      	cbnz	r2, 8004edc <_realloc_r+0x20>
 8004ed2:	f7ff fbe7 	bl	80046a4 <_free_r>
 8004ed6:	4625      	mov	r5, r4
 8004ed8:	4628      	mov	r0, r5
 8004eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004edc:	f000 f814 	bl	8004f08 <_malloc_usable_size_r>
 8004ee0:	42a0      	cmp	r0, r4
 8004ee2:	d20f      	bcs.n	8004f04 <_realloc_r+0x48>
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	f7ff fc28 	bl	800473c <_malloc_r>
 8004eec:	4605      	mov	r5, r0
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d0f2      	beq.n	8004ed8 <_realloc_r+0x1c>
 8004ef2:	4631      	mov	r1, r6
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	f7ff ffb9 	bl	8004e6c <memcpy>
 8004efa:	4631      	mov	r1, r6
 8004efc:	4638      	mov	r0, r7
 8004efe:	f7ff fbd1 	bl	80046a4 <_free_r>
 8004f02:	e7e9      	b.n	8004ed8 <_realloc_r+0x1c>
 8004f04:	4635      	mov	r5, r6
 8004f06:	e7e7      	b.n	8004ed8 <_realloc_r+0x1c>

08004f08 <_malloc_usable_size_r>:
 8004f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f0c:	1f18      	subs	r0, r3, #4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	bfbc      	itt	lt
 8004f12:	580b      	ldrlt	r3, [r1, r0]
 8004f14:	18c0      	addlt	r0, r0, r3
 8004f16:	4770      	bx	lr

08004f18 <_init>:
 8004f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1a:	bf00      	nop
 8004f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1e:	bc08      	pop	{r3}
 8004f20:	469e      	mov	lr, r3
 8004f22:	4770      	bx	lr

08004f24 <_fini>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	bf00      	nop
 8004f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2a:	bc08      	pop	{r3}
 8004f2c:	469e      	mov	lr, r3
 8004f2e:	4770      	bx	lr
