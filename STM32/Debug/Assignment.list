
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08004c50  08004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d84  08004d84  0002011c  2**0
                  CONTENTS
  4 .ARM          00000000  08004d84  08004d84  0002011c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d84  08004d84  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d84  08004d84  00014d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d88  08004d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08004d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000011c  08004ea8  0002011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08004ea8  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001345e  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029f1  00000000  00000000  000335a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00035f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00036d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d2f  00000000  00000000  00037998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fc7  00000000  00000000  000506c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088e3f  00000000  00000000  0006168e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea4cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a7c  00000000  00000000  000ea520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000011c 	.word	0x2000011c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c38 	.word	0x08004c38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000120 	.word	0x20000120
 8000148:	08004c38 	.word	0x08004c38

0800014c <getButtonValue>:
 *
 * @param:	NONE
 * @retval:	NONE
 */

void getButtonValue(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTON; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e109      	b.n	800036c <getButtonValue+0x220>
		listButton[i].keyget1 = listButton[i].keyget2;
 8000158:	4989      	ldr	r1, [pc, #548]	; (8000380 <getButtonValue+0x234>)
 800015a:	687a      	ldr	r2, [r7, #4]
 800015c:	4613      	mov	r3, r2
 800015e:	00db      	lsls	r3, r3, #3
 8000160:	1a9b      	subs	r3, r3, r2
 8000162:	009b      	lsls	r3, r3, #2
 8000164:	440b      	add	r3, r1
 8000166:	3304      	adds	r3, #4
 8000168:	6819      	ldr	r1, [r3, #0]
 800016a:	4885      	ldr	r0, [pc, #532]	; (8000380 <getButtonValue+0x234>)
 800016c:	687a      	ldr	r2, [r7, #4]
 800016e:	4613      	mov	r3, r2
 8000170:	00db      	lsls	r3, r3, #3
 8000172:	1a9b      	subs	r3, r3, r2
 8000174:	009b      	lsls	r3, r3, #2
 8000176:	4403      	add	r3, r0
 8000178:	6019      	str	r1, [r3, #0]
		listButton[i].keyget2 = listButton[i].keyget3;
 800017a:	4981      	ldr	r1, [pc, #516]	; (8000380 <getButtonValue+0x234>)
 800017c:	687a      	ldr	r2, [r7, #4]
 800017e:	4613      	mov	r3, r2
 8000180:	00db      	lsls	r3, r3, #3
 8000182:	1a9b      	subs	r3, r3, r2
 8000184:	009b      	lsls	r3, r3, #2
 8000186:	440b      	add	r3, r1
 8000188:	3308      	adds	r3, #8
 800018a:	6819      	ldr	r1, [r3, #0]
 800018c:	487c      	ldr	r0, [pc, #496]	; (8000380 <getButtonValue+0x234>)
 800018e:	687a      	ldr	r2, [r7, #4]
 8000190:	4613      	mov	r3, r2
 8000192:	00db      	lsls	r3, r3, #3
 8000194:	1a9b      	subs	r3, r3, r2
 8000196:	009b      	lsls	r3, r3, #2
 8000198:	4403      	add	r3, r0
 800019a:	3304      	adds	r3, #4
 800019c:	6019      	str	r1, [r3, #0]
		listButton[i].keyget3 = HAL_GPIO_ReadPin(BUTTON_GPIO[i], BUTTON_PIN[i]);
 800019e:	4a79      	ldr	r2, [pc, #484]	; (8000384 <getButtonValue+0x238>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a6:	4978      	ldr	r1, [pc, #480]	; (8000388 <getButtonValue+0x23c>)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001ae:	4619      	mov	r1, r3
 80001b0:	4610      	mov	r0, r2
 80001b2:	f002 f851 	bl	8002258 <HAL_GPIO_ReadPin>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4618      	mov	r0, r3
 80001ba:	4971      	ldr	r1, [pc, #452]	; (8000380 <getButtonValue+0x234>)
 80001bc:	687a      	ldr	r2, [r7, #4]
 80001be:	4613      	mov	r3, r2
 80001c0:	00db      	lsls	r3, r3, #3
 80001c2:	1a9b      	subs	r3, r3, r2
 80001c4:	009b      	lsls	r3, r3, #2
 80001c6:	440b      	add	r3, r1
 80001c8:	3308      	adds	r3, #8
 80001ca:	6018      	str	r0, [r3, #0]
		if((listButton[i].keyget1 == listButton[i].keyget2) && (listButton[i].keyget2 == listButton[i].keyget3)){
 80001cc:	496c      	ldr	r1, [pc, #432]	; (8000380 <getButtonValue+0x234>)
 80001ce:	687a      	ldr	r2, [r7, #4]
 80001d0:	4613      	mov	r3, r2
 80001d2:	00db      	lsls	r3, r3, #3
 80001d4:	1a9b      	subs	r3, r3, r2
 80001d6:	009b      	lsls	r3, r3, #2
 80001d8:	440b      	add	r3, r1
 80001da:	6819      	ldr	r1, [r3, #0]
 80001dc:	4868      	ldr	r0, [pc, #416]	; (8000380 <getButtonValue+0x234>)
 80001de:	687a      	ldr	r2, [r7, #4]
 80001e0:	4613      	mov	r3, r2
 80001e2:	00db      	lsls	r3, r3, #3
 80001e4:	1a9b      	subs	r3, r3, r2
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	4403      	add	r3, r0
 80001ea:	3304      	adds	r3, #4
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4299      	cmp	r1, r3
 80001f0:	f040 80b9 	bne.w	8000366 <getButtonValue+0x21a>
 80001f4:	4962      	ldr	r1, [pc, #392]	; (8000380 <getButtonValue+0x234>)
 80001f6:	687a      	ldr	r2, [r7, #4]
 80001f8:	4613      	mov	r3, r2
 80001fa:	00db      	lsls	r3, r3, #3
 80001fc:	1a9b      	subs	r3, r3, r2
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	440b      	add	r3, r1
 8000202:	3304      	adds	r3, #4
 8000204:	6819      	ldr	r1, [r3, #0]
 8000206:	485e      	ldr	r0, [pc, #376]	; (8000380 <getButtonValue+0x234>)
 8000208:	687a      	ldr	r2, [r7, #4]
 800020a:	4613      	mov	r3, r2
 800020c:	00db      	lsls	r3, r3, #3
 800020e:	1a9b      	subs	r3, r3, r2
 8000210:	009b      	lsls	r3, r3, #2
 8000212:	4403      	add	r3, r0
 8000214:	3308      	adds	r3, #8
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4299      	cmp	r1, r3
 800021a:	f040 80a4 	bne.w	8000366 <getButtonValue+0x21a>
			if (listButton[i].oldState != listButton[i].keyget3){
 800021e:	4958      	ldr	r1, [pc, #352]	; (8000380 <getButtonValue+0x234>)
 8000220:	687a      	ldr	r2, [r7, #4]
 8000222:	4613      	mov	r3, r2
 8000224:	00db      	lsls	r3, r3, #3
 8000226:	1a9b      	subs	r3, r3, r2
 8000228:	009b      	lsls	r3, r3, #2
 800022a:	440b      	add	r3, r1
 800022c:	330c      	adds	r3, #12
 800022e:	6819      	ldr	r1, [r3, #0]
 8000230:	4853      	ldr	r0, [pc, #332]	; (8000380 <getButtonValue+0x234>)
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	4613      	mov	r3, r2
 8000236:	00db      	lsls	r3, r3, #3
 8000238:	1a9b      	subs	r3, r3, r2
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	4403      	add	r3, r0
 800023e:	3308      	adds	r3, #8
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4299      	cmp	r1, r3
 8000244:	d052      	beq.n	80002ec <getButtonValue+0x1a0>
				listButton[i].oldState = listButton[i].keyget3;
 8000246:	494e      	ldr	r1, [pc, #312]	; (8000380 <getButtonValue+0x234>)
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	4613      	mov	r3, r2
 800024c:	00db      	lsls	r3, r3, #3
 800024e:	1a9b      	subs	r3, r3, r2
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	440b      	add	r3, r1
 8000254:	3308      	adds	r3, #8
 8000256:	6819      	ldr	r1, [r3, #0]
 8000258:	4849      	ldr	r0, [pc, #292]	; (8000380 <getButtonValue+0x234>)
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	4613      	mov	r3, r2
 800025e:	00db      	lsls	r3, r3, #3
 8000260:	1a9b      	subs	r3, r3, r2
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	4403      	add	r3, r0
 8000266:	330c      	adds	r3, #12
 8000268:	6019      	str	r1, [r3, #0]
				if (listButton[i].keyget3 == PRESSED){
 800026a:	4945      	ldr	r1, [pc, #276]	; (8000380 <getButtonValue+0x234>)
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	4613      	mov	r3, r2
 8000270:	00db      	lsls	r3, r3, #3
 8000272:	1a9b      	subs	r3, r3, r2
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	440b      	add	r3, r1
 8000278:	3308      	adds	r3, #8
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d114      	bne.n	80002aa <getButtonValue+0x15e>
					listButton[i].shortPress = 1;
 8000280:	493f      	ldr	r1, [pc, #252]	; (8000380 <getButtonValue+0x234>)
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	4613      	mov	r3, r2
 8000286:	00db      	lsls	r3, r3, #3
 8000288:	1a9b      	subs	r3, r3, r2
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	440b      	add	r3, r1
 800028e:	3310      	adds	r3, #16
 8000290:	2201      	movs	r2, #1
 8000292:	601a      	str	r2, [r3, #0]
					listButton[i].timePress = KEY_PRESS_TIME / TIME_CYCLE;
 8000294:	493a      	ldr	r1, [pc, #232]	; (8000380 <getButtonValue+0x234>)
 8000296:	687a      	ldr	r2, [r7, #4]
 8000298:	4613      	mov	r3, r2
 800029a:	00db      	lsls	r3, r3, #3
 800029c:	1a9b      	subs	r3, r3, r2
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	440b      	add	r3, r1
 80002a2:	3318      	adds	r3, #24
 80002a4:	2264      	movs	r2, #100	; 0x64
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	e05d      	b.n	8000366 <getButtonValue+0x21a>
				}
				else if (listButton[i].keyget3 == RELEASE){
 80002aa:	4935      	ldr	r1, [pc, #212]	; (8000380 <getButtonValue+0x234>)
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	4613      	mov	r3, r2
 80002b0:	00db      	lsls	r3, r3, #3
 80002b2:	1a9b      	subs	r3, r3, r2
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	440b      	add	r3, r1
 80002b8:	3308      	adds	r3, #8
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d152      	bne.n	8000366 <getButtonValue+0x21a>
					// if new state != old state and button is released -> Short Press is complete
					 if(listButton[i].shortPress == 1) listButton[i].shortPress = 2;
 80002c0:	492f      	ldr	r1, [pc, #188]	; (8000380 <getButtonValue+0x234>)
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	4613      	mov	r3, r2
 80002c6:	00db      	lsls	r3, r3, #3
 80002c8:	1a9b      	subs	r3, r3, r2
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	440b      	add	r3, r1
 80002ce:	3310      	adds	r3, #16
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d147      	bne.n	8000366 <getButtonValue+0x21a>
 80002d6:	492a      	ldr	r1, [pc, #168]	; (8000380 <getButtonValue+0x234>)
 80002d8:	687a      	ldr	r2, [r7, #4]
 80002da:	4613      	mov	r3, r2
 80002dc:	00db      	lsls	r3, r3, #3
 80002de:	1a9b      	subs	r3, r3, r2
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	440b      	add	r3, r1
 80002e4:	3310      	adds	r3, #16
 80002e6:	2202      	movs	r2, #2
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	e03c      	b.n	8000366 <getButtonValue+0x21a>
				}
			}
			else if (listButton[i].keyget3 == PRESSED){
 80002ec:	4924      	ldr	r1, [pc, #144]	; (8000380 <getButtonValue+0x234>)
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	4613      	mov	r3, r2
 80002f2:	00db      	lsls	r3, r3, #3
 80002f4:	1a9b      	subs	r3, r3, r2
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	440b      	add	r3, r1
 80002fa:	3308      	adds	r3, #8
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d131      	bne.n	8000366 <getButtonValue+0x21a>
				listButton[i].timePress--;
 8000302:	491f      	ldr	r1, [pc, #124]	; (8000380 <getButtonValue+0x234>)
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	4613      	mov	r3, r2
 8000308:	00db      	lsls	r3, r3, #3
 800030a:	1a9b      	subs	r3, r3, r2
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	440b      	add	r3, r1
 8000310:	3318      	adds	r3, #24
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	1e59      	subs	r1, r3, #1
 8000316:	481a      	ldr	r0, [pc, #104]	; (8000380 <getButtonValue+0x234>)
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	4613      	mov	r3, r2
 800031c:	00db      	lsls	r3, r3, #3
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	4403      	add	r3, r0
 8000324:	3318      	adds	r3, #24
 8000326:	6019      	str	r1, [r3, #0]
				if (listButton[i].timePress == 0){
 8000328:	4915      	ldr	r1, [pc, #84]	; (8000380 <getButtonValue+0x234>)
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	4613      	mov	r3, r2
 800032e:	00db      	lsls	r3, r3, #3
 8000330:	1a9b      	subs	r3, r3, r2
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	440b      	add	r3, r1
 8000336:	3318      	adds	r3, #24
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d113      	bne.n	8000366 <getButtonValue+0x21a>
					listButton[i].longPress = 1;
 800033e:	4910      	ldr	r1, [pc, #64]	; (8000380 <getButtonValue+0x234>)
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	4613      	mov	r3, r2
 8000344:	00db      	lsls	r3, r3, #3
 8000346:	1a9b      	subs	r3, r3, r2
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	440b      	add	r3, r1
 800034c:	3314      	adds	r3, #20
 800034e:	2201      	movs	r2, #1
 8000350:	601a      	str	r2, [r3, #0]
					listButton[i].shortPress = 0; // When press time >= KEY_PRESS_TIME -> long press -> terminate short press
 8000352:	490b      	ldr	r1, [pc, #44]	; (8000380 <getButtonValue+0x234>)
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	4613      	mov	r3, r2
 8000358:	00db      	lsls	r3, r3, #3
 800035a:	1a9b      	subs	r3, r3, r2
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	440b      	add	r3, r1
 8000360:	3310      	adds	r3, #16
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_BUTTON; i++){
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	3301      	adds	r3, #1
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2b03      	cmp	r3, #3
 8000370:	f77f aef2 	ble.w	8000158 <getButtonValue+0xc>
				}
			}
		}
	}
}
 8000374:	bf00      	nop
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000000 	.word	0x20000000
 8000384:	20000070 	.word	0x20000070
 8000388:	20000080 	.word	0x20000080

0800038c <isButtonShortPress>:
 * @param:	index of button [0...3]
 * @retval:	1	-	button is pressed
 * 			0	-	button is not pressed
 */

int isButtonShortPress(int index){
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	if (listButton[index].shortPress == 2){
 8000394:	490e      	ldr	r1, [pc, #56]	; (80003d0 <isButtonShortPress+0x44>)
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	4613      	mov	r3, r2
 800039a:	00db      	lsls	r3, r3, #3
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	440b      	add	r3, r1
 80003a2:	3310      	adds	r3, #16
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	d10b      	bne.n	80003c2 <isButtonShortPress+0x36>
		listButton[index].shortPress = 0;
 80003aa:	4909      	ldr	r1, [pc, #36]	; (80003d0 <isButtonShortPress+0x44>)
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	4613      	mov	r3, r2
 80003b0:	00db      	lsls	r3, r3, #3
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	440b      	add	r3, r1
 80003b8:	3310      	adds	r3, #16
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
		return 1;
 80003be:	2301      	movs	r3, #1
 80003c0:	e000      	b.n	80003c4 <isButtonShortPress+0x38>
	}
	else return 0;
 80003c2:	2300      	movs	r3, #0
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	20000000 	.word	0x20000000

080003d4 <isButtonLongPress>:
 *
 * @param:	index of button [0...3]
 * @retval:	1	-	button is long pressed
 * 			0	-	button is not long pressed
 */
int isButtonLongPress(int index){
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	if (listButton[index].longPress == 1){
 80003dc:	490e      	ldr	r1, [pc, #56]	; (8000418 <isButtonLongPress+0x44>)
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	4613      	mov	r3, r2
 80003e2:	00db      	lsls	r3, r3, #3
 80003e4:	1a9b      	subs	r3, r3, r2
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	440b      	add	r3, r1
 80003ea:	3314      	adds	r3, #20
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d10b      	bne.n	800040a <isButtonLongPress+0x36>
		listButton[index].longPress = 0;
 80003f2:	4909      	ldr	r1, [pc, #36]	; (8000418 <isButtonLongPress+0x44>)
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	4613      	mov	r3, r2
 80003f8:	00db      	lsls	r3, r3, #3
 80003fa:	1a9b      	subs	r3, r3, r2
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	440b      	add	r3, r1
 8000400:	3314      	adds	r3, #20
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
		return 1;
 8000406:	2301      	movs	r3, #1
 8000408:	e000      	b.n	800040c <isButtonLongPress+0x38>
	}
	else return 0;
 800040a:	2300      	movs	r3, #0
}
 800040c:	4618      	mov	r0, r3
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	20000000 	.word	0x20000000

0800041c <fsm_traffic_auto_mode>:
int timeAmber = 2;
int timeGreen = 3;


//AUTO MODE
void fsm_traffic_auto_mode(void){
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	switch(autoStatus){
 8000420:	4b47      	ldr	r3, [pc, #284]	; (8000540 <fsm_traffic_auto_mode+0x124>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b0a      	cmp	r3, #10
 8000426:	d87f      	bhi.n	8000528 <fsm_traffic_auto_mode+0x10c>
 8000428:	a201      	add	r2, pc, #4	; (adr r2, 8000430 <fsm_traffic_auto_mode+0x14>)
 800042a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042e:	bf00      	nop
 8000430:	08000529 	.word	0x08000529
 8000434:	08000479 	.word	0x08000479
 8000438:	080004a1 	.word	0x080004a1
 800043c:	080004d1 	.word	0x080004d1
 8000440:	080004f9 	.word	0x080004f9
 8000444:	08000529 	.word	0x08000529
 8000448:	08000529 	.word	0x08000529
 800044c:	08000529 	.word	0x08000529
 8000450:	08000529 	.word	0x08000529
 8000454:	08000529 	.word	0x08000529
 8000458:	0800045d 	.word	0x0800045d
	case OFF:
		// do nothing
		break;
	case INIT:
		autoStatus = RED_GREEN;
 800045c:	4b38      	ldr	r3, [pc, #224]	; (8000540 <fsm_traffic_auto_mode+0x124>)
 800045e:	2201      	movs	r2, #1
 8000460:	601a      	str	r2, [r3, #0]
		// prepare for red green state
		clock_counter_main = timeRed;
 8000462:	4b38      	ldr	r3, [pc, #224]	; (8000544 <fsm_traffic_auto_mode+0x128>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a38      	ldr	r2, [pc, #224]	; (8000548 <fsm_traffic_auto_mode+0x12c>)
 8000468:	6013      	str	r3, [r2, #0]
		clock_counter_side = timeGreen;
 800046a:	4b38      	ldr	r3, [pc, #224]	; (800054c <fsm_traffic_auto_mode+0x130>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a38      	ldr	r2, [pc, #224]	; (8000550 <fsm_traffic_auto_mode+0x134>)
 8000470:	6013      	str	r3, [r2, #0]
		clearRoadLed();
 8000472:	f000 ff5f 	bl	8001334 <clearRoadLed>
		break;
 8000476:	e060      	b.n	800053a <fsm_traffic_auto_mode+0x11e>
	case RED_GREEN:
		turnOnRed(0);
 8000478:	2000      	movs	r0, #0
 800047a:	f000 fe91 	bl	80011a0 <turnOnRed>
		turnOnGreen(1);
 800047e:	2001      	movs	r0, #1
 8000480:	f000 fee0 	bl	8001244 <turnOnGreen>
		if (clock_counter_side == 0){
 8000484:	4b32      	ldr	r3, [pc, #200]	; (8000550 <fsm_traffic_auto_mode+0x134>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14f      	bne.n	800052c <fsm_traffic_auto_mode+0x110>
			autoStatus = RED_AMBER;
 800048c:	4b2c      	ldr	r3, [pc, #176]	; (8000540 <fsm_traffic_auto_mode+0x124>)
 800048e:	2202      	movs	r2, #2
 8000490:	601a      	str	r2, [r3, #0]
//			clock_counter_main = timeRed - timeGreen;
			clock_counter_side = timeAmber;
 8000492:	4b30      	ldr	r3, [pc, #192]	; (8000554 <fsm_traffic_auto_mode+0x138>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a2e      	ldr	r2, [pc, #184]	; (8000550 <fsm_traffic_auto_mode+0x134>)
 8000498:	6013      	str	r3, [r2, #0]
			clearRoadLed();
 800049a:	f000 ff4b 	bl	8001334 <clearRoadLed>
		}
		break;
 800049e:	e045      	b.n	800052c <fsm_traffic_auto_mode+0x110>
	case RED_AMBER:
		turnOnRed(0);
 80004a0:	2000      	movs	r0, #0
 80004a2:	f000 fe7d 	bl	80011a0 <turnOnRed>
		turnOnAmber(1);
 80004a6:	2001      	movs	r0, #1
 80004a8:	f000 fea2 	bl	80011f0 <turnOnAmber>
		if (clock_counter_side == 0){
 80004ac:	4b28      	ldr	r3, [pc, #160]	; (8000550 <fsm_traffic_auto_mode+0x134>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d13d      	bne.n	8000530 <fsm_traffic_auto_mode+0x114>
			autoStatus = GREEN_RED;
 80004b4:	4b22      	ldr	r3, [pc, #136]	; (8000540 <fsm_traffic_auto_mode+0x124>)
 80004b6:	2203      	movs	r2, #3
 80004b8:	601a      	str	r2, [r3, #0]
			clock_counter_main = timeGreen;
 80004ba:	4b24      	ldr	r3, [pc, #144]	; (800054c <fsm_traffic_auto_mode+0x130>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a22      	ldr	r2, [pc, #136]	; (8000548 <fsm_traffic_auto_mode+0x12c>)
 80004c0:	6013      	str	r3, [r2, #0]
			clock_counter_side = timeRed;
 80004c2:	4b20      	ldr	r3, [pc, #128]	; (8000544 <fsm_traffic_auto_mode+0x128>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a22      	ldr	r2, [pc, #136]	; (8000550 <fsm_traffic_auto_mode+0x134>)
 80004c8:	6013      	str	r3, [r2, #0]
			clearRoadLed();
 80004ca:	f000 ff33 	bl	8001334 <clearRoadLed>
		}
		break;
 80004ce:	e02f      	b.n	8000530 <fsm_traffic_auto_mode+0x114>
	case GREEN_RED:
		turnOnGreen(0);
 80004d0:	2000      	movs	r0, #0
 80004d2:	f000 feb7 	bl	8001244 <turnOnGreen>
		turnOnRed(1);
 80004d6:	2001      	movs	r0, #1
 80004d8:	f000 fe62 	bl	80011a0 <turnOnRed>
		if (clock_counter_main == 0){
 80004dc:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <fsm_traffic_auto_mode+0x12c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d127      	bne.n	8000534 <fsm_traffic_auto_mode+0x118>
			autoStatus = AMBER_RED;
 80004e4:	4b16      	ldr	r3, [pc, #88]	; (8000540 <fsm_traffic_auto_mode+0x124>)
 80004e6:	2204      	movs	r2, #4
 80004e8:	601a      	str	r2, [r3, #0]
			clock_counter_main = timeAmber;
 80004ea:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <fsm_traffic_auto_mode+0x138>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a16      	ldr	r2, [pc, #88]	; (8000548 <fsm_traffic_auto_mode+0x12c>)
 80004f0:	6013      	str	r3, [r2, #0]
//			clock_counter_side = timeRed - timeGreen;
			clearRoadLed();
 80004f2:	f000 ff1f 	bl	8001334 <clearRoadLed>
		}
		break;
 80004f6:	e01d      	b.n	8000534 <fsm_traffic_auto_mode+0x118>
	case AMBER_RED:
		turnOnAmber(0);
 80004f8:	2000      	movs	r0, #0
 80004fa:	f000 fe79 	bl	80011f0 <turnOnAmber>
		turnOnRed(1);
 80004fe:	2001      	movs	r0, #1
 8000500:	f000 fe4e 	bl	80011a0 <turnOnRed>
		if (clock_counter_main == 0){
 8000504:	4b10      	ldr	r3, [pc, #64]	; (8000548 <fsm_traffic_auto_mode+0x12c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d115      	bne.n	8000538 <fsm_traffic_auto_mode+0x11c>
			autoStatus = RED_GREEN;
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <fsm_traffic_auto_mode+0x124>)
 800050e:	2201      	movs	r2, #1
 8000510:	601a      	str	r2, [r3, #0]
			clock_counter_main = timeRed;
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <fsm_traffic_auto_mode+0x128>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <fsm_traffic_auto_mode+0x12c>)
 8000518:	6013      	str	r3, [r2, #0]
			clock_counter_side = timeGreen;
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <fsm_traffic_auto_mode+0x130>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a0c      	ldr	r2, [pc, #48]	; (8000550 <fsm_traffic_auto_mode+0x134>)
 8000520:	6013      	str	r3, [r2, #0]
			clearRoadLed();
 8000522:	f000 ff07 	bl	8001334 <clearRoadLed>
		}
		break;
 8000526:	e007      	b.n	8000538 <fsm_traffic_auto_mode+0x11c>
	default:
		break;
 8000528:	bf00      	nop
 800052a:	e006      	b.n	800053a <fsm_traffic_auto_mode+0x11e>
		break;
 800052c:	bf00      	nop
 800052e:	e004      	b.n	800053a <fsm_traffic_auto_mode+0x11e>
		break;
 8000530:	bf00      	nop
 8000532:	e002      	b.n	800053a <fsm_traffic_auto_mode+0x11e>
		break;
 8000534:	bf00      	nop
 8000536:	e000      	b.n	800053a <fsm_traffic_auto_mode+0x11e>
		break;
 8000538:	bf00      	nop
	}
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	2000008c 	.word	0x2000008c
 8000544:	20000090 	.word	0x20000090
 8000548:	20000150 	.word	0x20000150
 800054c:	20000098 	.word	0x20000098
 8000550:	20000154 	.word	0x20000154
 8000554:	20000094 	.word	0x20000094

08000558 <setBuzzer>:

//PEDESTRIAN (IN AUTO MODE)
void setBuzzer(void){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	switch (Buzzer.status) {
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <setBuzzer+0x84>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b0a      	cmp	r3, #10
 8000562:	d006      	beq.n	8000572 <setBuzzer+0x1a>
 8000564:	2b0a      	cmp	r3, #10
 8000566:	dc31      	bgt.n	80005cc <setBuzzer+0x74>
 8000568:	2b00      	cmp	r3, #0
 800056a:	d00c      	beq.n	8000586 <setBuzzer+0x2e>
 800056c:	2b01      	cmp	r3, #1
 800056e:	d01a      	beq.n	80005a6 <setBuzzer+0x4e>
		setTimer(Buzzer.period, 3);
		Buzzer.status = OFF;
		}
		break;
	default:
		break;
 8000570:	e02c      	b.n	80005cc <setBuzzer+0x74>
		setTimer(Buzzer.period, 3);
 8000572:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <setBuzzer+0x84>)
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	2103      	movs	r1, #3
 8000578:	4618      	mov	r0, r3
 800057a:	f001 f8f7 	bl	800176c <setTimer>
		Buzzer.status = ON;
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <setBuzzer+0x84>)
 8000580:	2201      	movs	r2, #1
 8000582:	601a      	str	r2, [r3, #0]
		break;
 8000584:	e027      	b.n	80005d6 <setBuzzer+0x7e>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <setBuzzer+0x88>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2200      	movs	r2, #0
 800058c:	635a      	str	r2, [r3, #52]	; 0x34
		if (timer_flag[3]) {
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <setBuzzer+0x8c>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d01c      	beq.n	80005d0 <setBuzzer+0x78>
			setTimer(100, 3);
 8000596:	2103      	movs	r1, #3
 8000598:	2064      	movs	r0, #100	; 0x64
 800059a:	f001 f8e7 	bl	800176c <setTimer>
			Buzzer.status = ON;
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <setBuzzer+0x84>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	601a      	str	r2, [r3, #0]
		break;
 80005a4:	e014      	b.n	80005d0 <setBuzzer+0x78>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Buzzer.volume);
 80005a6:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <setBuzzer+0x84>)
 80005a8:	685a      	ldr	r2, [r3, #4]
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <setBuzzer+0x88>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	635a      	str	r2, [r3, #52]	; 0x34
		if (timer_flag[3]) {
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <setBuzzer+0x8c>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00d      	beq.n	80005d4 <setBuzzer+0x7c>
		setTimer(Buzzer.period, 3);
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <setBuzzer+0x84>)
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	2103      	movs	r1, #3
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 f8d4 	bl	800176c <setTimer>
		Buzzer.status = OFF;
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <setBuzzer+0x84>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
		break;
 80005ca:	e003      	b.n	80005d4 <setBuzzer+0x7c>
		break;
 80005cc:	bf00      	nop
 80005ce:	e002      	b.n	80005d6 <setBuzzer+0x7e>
		break;
 80005d0:	bf00      	nop
 80005d2:	e000      	b.n	80005d6 <setBuzzer+0x7e>
		break;
 80005d4:	bf00      	nop
	}

}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000144 	.word	0x20000144
 80005e0:	20000184 	.word	0x20000184
 80005e4:	20000168 	.word	0x20000168

080005e8 <fsm_pedestrian>:

void fsm_pedestrian(void){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	switch(pedStatus){
 80005ec:	4b3f      	ldr	r3, [pc, #252]	; (80006ec <fsm_pedestrian+0x104>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b0a      	cmp	r3, #10
 80005f2:	d874      	bhi.n	80006de <fsm_pedestrian+0xf6>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <fsm_pedestrian+0x14>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	08000629 	.word	0x08000629
 8000600:	080006c9 	.word	0x080006c9
 8000604:	08000677 	.word	0x08000677
 8000608:	080006df 	.word	0x080006df
 800060c:	080006df 	.word	0x080006df
 8000610:	080006df 	.word	0x080006df
 8000614:	080006df 	.word	0x080006df
 8000618:	080006df 	.word	0x080006df
 800061c:	080006df 	.word	0x080006df
 8000620:	080006df 	.word	0x080006df
 8000624:	08000641 	.word	0x08000641
	case OFF:
		unsetPedestrianLed(0);
 8000628:	2000      	movs	r0, #0
 800062a:	f000 feb5 	bl	8001398 <unsetPedestrianLed>
		unsetPedestrianLed(1);
 800062e:	2001      	movs	r0, #1
 8000630:	f000 feb2 	bl	8001398 <unsetPedestrianLed>
		Buzzer.status = OFF;
 8000634:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <fsm_pedestrian+0x108>)
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
		setBuzzer();
 800063a:	f7ff ff8d 	bl	8000558 <setBuzzer>
		break;
 800063e:	e053      	b.n	80006e8 <fsm_pedestrian+0x100>
	case INIT:
		if (autoStatus == RED_GREEN || autoStatus == RED_AMBER) pedStatus = GREEN_PED;
 8000640:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <fsm_pedestrian+0x10c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d003      	beq.n	8000650 <fsm_pedestrian+0x68>
 8000648:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <fsm_pedestrian+0x10c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b02      	cmp	r3, #2
 800064e:	d103      	bne.n	8000658 <fsm_pedestrian+0x70>
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <fsm_pedestrian+0x104>)
 8000652:	2202      	movs	r2, #2
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	e00a      	b.n	800066e <fsm_pedestrian+0x86>
		else if (autoStatus == GREEN_RED || autoStatus == AMBER_RED) pedStatus = RED_PED;
 8000658:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <fsm_pedestrian+0x10c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b03      	cmp	r3, #3
 800065e:	d003      	beq.n	8000668 <fsm_pedestrian+0x80>
 8000660:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <fsm_pedestrian+0x10c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b04      	cmp	r3, #4
 8000666:	d102      	bne.n	800066e <fsm_pedestrian+0x86>
 8000668:	4b20      	ldr	r3, [pc, #128]	; (80006ec <fsm_pedestrian+0x104>)
 800066a:	2201      	movs	r2, #1
 800066c:	601a      	str	r2, [r3, #0]
		Buzzer.status = INIT;
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <fsm_pedestrian+0x108>)
 8000670:	220a      	movs	r2, #10
 8000672:	601a      	str	r2, [r3, #0]
		break;
 8000674:	e038      	b.n	80006e8 <fsm_pedestrian+0x100>
	case GREEN_PED:
		setPedestrianLed(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f000 fe68 	bl	800134c <setPedestrianLed>
		if (clock_counter_main <= 3 && clock_counter_main > 0) {
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <fsm_pedestrian+0x110>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b03      	cmp	r3, #3
 8000682:	dc14      	bgt.n	80006ae <fsm_pedestrian+0xc6>
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <fsm_pedestrian+0x110>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	dd10      	ble.n	80006ae <fsm_pedestrian+0xc6>
			Buzzer.period = clock_counter_main*100;
 800068c:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <fsm_pedestrian+0x110>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	fb02 f303 	mul.w	r3, r2, r3
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <fsm_pedestrian+0x108>)
 8000698:	6093      	str	r3, [r2, #8]
			Buzzer.volume = 12000/clock_counter_main;
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <fsm_pedestrian+0x110>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80006a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <fsm_pedestrian+0x108>)
 80006a8:	6053      	str	r3, [r2, #4]
			setBuzzer();
 80006aa:	f7ff ff55 	bl	8000558 <setBuzzer>
		}
		if (clock_counter_main <= 0) {
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <fsm_pedestrian+0x110>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	dc15      	bgt.n	80006e2 <fsm_pedestrian+0xfa>
			pedStatus = RED_PED;
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <fsm_pedestrian+0x104>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	601a      	str	r2, [r3, #0]
			Buzzer.status = OFF;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <fsm_pedestrian+0x108>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
			setBuzzer();
 80006c2:	f7ff ff49 	bl	8000558 <setBuzzer>
		}
		break;
 80006c6:	e00c      	b.n	80006e2 <fsm_pedestrian+0xfa>
	case RED_PED:
		setPedestrianLed(0);
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 fe3f 	bl	800134c <setPedestrianLed>
		if (clock_counter_side <= 0) {
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <fsm_pedestrian+0x114>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	dc07      	bgt.n	80006e6 <fsm_pedestrian+0xfe>
			pedStatus = GREEN_PED;
 80006d6:	4b05      	ldr	r3, [pc, #20]	; (80006ec <fsm_pedestrian+0x104>)
 80006d8:	2202      	movs	r2, #2
 80006da:	601a      	str	r2, [r3, #0]
		}
		break;
 80006dc:	e003      	b.n	80006e6 <fsm_pedestrian+0xfe>
	default:
		break;
 80006de:	bf00      	nop
 80006e0:	e002      	b.n	80006e8 <fsm_pedestrian+0x100>
		break;
 80006e2:	bf00      	nop
 80006e4:	e000      	b.n	80006e8 <fsm_pedestrian+0x100>
		break;
 80006e6:	bf00      	nop
	}
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000140 	.word	0x20000140
 80006f0:	20000144 	.word	0x20000144
 80006f4:	2000008c 	.word	0x2000008c
 80006f8:	20000150 	.word	0x20000150
 80006fc:	20000154 	.word	0x20000154

08000700 <fsm_traffic_manual_mode>:

//MANUAL MODE
void fsm_traffic_manual_mode(void){
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	switch(manualStatus){
 8000704:	4b3b      	ldr	r3, [pc, #236]	; (80007f4 <fsm_traffic_manual_mode+0xf4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b0a      	cmp	r3, #10
 800070a:	d867      	bhi.n	80007dc <fsm_traffic_manual_mode+0xdc>
 800070c:	a201      	add	r2, pc, #4	; (adr r2, 8000714 <fsm_traffic_manual_mode+0x14>)
 800070e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000712:	bf00      	nop
 8000714:	080007dd 	.word	0x080007dd
 8000718:	0800074d 	.word	0x0800074d
 800071c:	08000771 	.word	0x08000771
 8000720:	08000795 	.word	0x08000795
 8000724:	080007b9 	.word	0x080007b9
 8000728:	080007dd 	.word	0x080007dd
 800072c:	080007dd 	.word	0x080007dd
 8000730:	080007dd 	.word	0x080007dd
 8000734:	080007dd 	.word	0x080007dd
 8000738:	080007dd 	.word	0x080007dd
 800073c:	08000741 	.word	0x08000741
	case OFF:
		// do nothing
		break;
	case INIT:
		manualStatus = RED_GREEN;
 8000740:	4b2c      	ldr	r3, [pc, #176]	; (80007f4 <fsm_traffic_manual_mode+0xf4>)
 8000742:	2201      	movs	r2, #1
 8000744:	601a      	str	r2, [r3, #0]
		clearRoadLed();
 8000746:	f000 fdf5 	bl	8001334 <clearRoadLed>
		break;
 800074a:	e050      	b.n	80007ee <fsm_traffic_manual_mode+0xee>
	case RED_GREEN:
		turnOnRed(0);
 800074c:	2000      	movs	r0, #0
 800074e:	f000 fd27 	bl	80011a0 <turnOnRed>
		turnOnGreen(1);
 8000752:	2001      	movs	r0, #1
 8000754:	f000 fd76 	bl	8001244 <turnOnGreen>
		if (isButtonShortPress(0)){
 8000758:	2000      	movs	r0, #0
 800075a:	f7ff fe17 	bl	800038c <isButtonShortPress>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d03d      	beq.n	80007e0 <fsm_traffic_manual_mode+0xe0>
			manualStatus = RED_AMBER;
 8000764:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <fsm_traffic_manual_mode+0xf4>)
 8000766:	2202      	movs	r2, #2
 8000768:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 800076a:	f000 fde3 	bl	8001334 <clearRoadLed>
		}
		break;
 800076e:	e037      	b.n	80007e0 <fsm_traffic_manual_mode+0xe0>
	case RED_AMBER:
		turnOnRed(0);
 8000770:	2000      	movs	r0, #0
 8000772:	f000 fd15 	bl	80011a0 <turnOnRed>
		turnOnAmber(1);
 8000776:	2001      	movs	r0, #1
 8000778:	f000 fd3a 	bl	80011f0 <turnOnAmber>
		if(isButtonShortPress(0)){
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff fe05 	bl	800038c <isButtonShortPress>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d02d      	beq.n	80007e4 <fsm_traffic_manual_mode+0xe4>
			manualStatus = GREEN_RED;
 8000788:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <fsm_traffic_manual_mode+0xf4>)
 800078a:	2203      	movs	r2, #3
 800078c:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 800078e:	f000 fdd1 	bl	8001334 <clearRoadLed>
		}
		break;
 8000792:	e027      	b.n	80007e4 <fsm_traffic_manual_mode+0xe4>
	case GREEN_RED:
		turnOnGreen(0);
 8000794:	2000      	movs	r0, #0
 8000796:	f000 fd55 	bl	8001244 <turnOnGreen>
		turnOnRed(1);
 800079a:	2001      	movs	r0, #1
 800079c:	f000 fd00 	bl	80011a0 <turnOnRed>
		if(isButtonShortPress(0)){
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff fdf3 	bl	800038c <isButtonShortPress>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d01d      	beq.n	80007e8 <fsm_traffic_manual_mode+0xe8>
			manualStatus = AMBER_RED;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <fsm_traffic_manual_mode+0xf4>)
 80007ae:	2204      	movs	r2, #4
 80007b0:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 80007b2:	f000 fdbf 	bl	8001334 <clearRoadLed>
		}
		break;
 80007b6:	e017      	b.n	80007e8 <fsm_traffic_manual_mode+0xe8>
	case AMBER_RED:
		turnOnAmber(0);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 fd19 	bl	80011f0 <turnOnAmber>
		turnOnRed(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 fcee 	bl	80011a0 <turnOnRed>
		if(isButtonShortPress(0)){
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fde1 	bl	800038c <isButtonShortPress>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00d      	beq.n	80007ec <fsm_traffic_manual_mode+0xec>
			manualStatus = RED_GREEN;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <fsm_traffic_manual_mode+0xf4>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 80007d6:	f000 fdad 	bl	8001334 <clearRoadLed>
		}
		break;
 80007da:	e007      	b.n	80007ec <fsm_traffic_manual_mode+0xec>
	default:
		break;
 80007dc:	bf00      	nop
 80007de:	e006      	b.n	80007ee <fsm_traffic_manual_mode+0xee>
		break;
 80007e0:	bf00      	nop
 80007e2:	e004      	b.n	80007ee <fsm_traffic_manual_mode+0xee>
		break;
 80007e4:	bf00      	nop
 80007e6:	e002      	b.n	80007ee <fsm_traffic_manual_mode+0xee>
		break;
 80007e8:	bf00      	nop
 80007ea:	e000      	b.n	80007ee <fsm_traffic_manual_mode+0xee>
		break;
 80007ec:	bf00      	nop
	}
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000138 	.word	0x20000138

080007f8 <logNewTime>:

//TUNING MODE
void logNewTime(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	if (tuningStatus == RED_ADJ) HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER RED :%d#\r\n",timeRed),500);
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <logNewTime+0x7c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d10e      	bne.n	8000822 <logNewTime+0x2a>
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <logNewTime+0x80>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	491c      	ldr	r1, [pc, #112]	; (800087c <logNewTime+0x84>)
 800080c:	481c      	ldr	r0, [pc, #112]	; (8000880 <logNewTime+0x88>)
 800080e:	f003 fe8f 	bl	8004530 <siprintf>
 8000812:	4603      	mov	r3, r0
 8000814:	b29a      	uxth	r2, r3
 8000816:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800081a:	4919      	ldr	r1, [pc, #100]	; (8000880 <logNewTime+0x88>)
 800081c:	4819      	ldr	r0, [pc, #100]	; (8000884 <logNewTime+0x8c>)
 800081e:	f003 f90c 	bl	8003a3a <HAL_UART_Transmit>
	if (tuningStatus == AMBER_ADJ) HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER AMBER :%d#\r\n",timeAmber),500);
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <logNewTime+0x7c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d10e      	bne.n	8000848 <logNewTime+0x50>
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <logNewTime+0x90>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	461a      	mov	r2, r3
 8000830:	4916      	ldr	r1, [pc, #88]	; (800088c <logNewTime+0x94>)
 8000832:	4813      	ldr	r0, [pc, #76]	; (8000880 <logNewTime+0x88>)
 8000834:	f003 fe7c 	bl	8004530 <siprintf>
 8000838:	4603      	mov	r3, r0
 800083a:	b29a      	uxth	r2, r3
 800083c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000840:	490f      	ldr	r1, [pc, #60]	; (8000880 <logNewTime+0x88>)
 8000842:	4810      	ldr	r0, [pc, #64]	; (8000884 <logNewTime+0x8c>)
 8000844:	f003 f8f9 	bl	8003a3a <HAL_UART_Transmit>
	if (tuningStatus == GREEN_ADJ) HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER GREEN :%d#\r\n",timeGreen),500);
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <logNewTime+0x7c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b03      	cmp	r3, #3
 800084e:	d10e      	bne.n	800086e <logNewTime+0x76>
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <logNewTime+0x98>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	490f      	ldr	r1, [pc, #60]	; (8000894 <logNewTime+0x9c>)
 8000858:	4809      	ldr	r0, [pc, #36]	; (8000880 <logNewTime+0x88>)
 800085a:	f003 fe69 	bl	8004530 <siprintf>
 800085e:	4603      	mov	r3, r0
 8000860:	b29a      	uxth	r2, r3
 8000862:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000866:	4906      	ldr	r1, [pc, #24]	; (8000880 <logNewTime+0x88>)
 8000868:	4806      	ldr	r0, [pc, #24]	; (8000884 <logNewTime+0x8c>)
 800086a:	f003 f8e6 	bl	8003a3a <HAL_UART_Transmit>
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000013c 	.word	0x2000013c
 8000878:	20000090 	.word	0x20000090
 800087c:	08004c50 	.word	0x08004c50
 8000880:	20000210 	.word	0x20000210
 8000884:	200001cc 	.word	0x200001cc
 8000888:	20000094 	.word	0x20000094
 800088c:	08004c64 	.word	0x08004c64
 8000890:	20000098 	.word	0x20000098
 8000894:	08004c78 	.word	0x08004c78

08000898 <fsm_traffic_tunning_mode>:

void fsm_traffic_tunning_mode(void){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	switch(tuningStatus){
 800089c:	4b71      	ldr	r3, [pc, #452]	; (8000a64 <fsm_traffic_tunning_mode+0x1cc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b0a      	cmp	r3, #10
 80008a2:	f200 80d5 	bhi.w	8000a50 <fsm_traffic_tunning_mode+0x1b8>
 80008a6:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <fsm_traffic_tunning_mode+0x14>)
 80008a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ac:	080008d9 	.word	0x080008d9
 80008b0:	080008f5 	.word	0x080008f5
 80008b4:	080009dd 	.word	0x080009dd
 80008b8:	08000969 	.word	0x08000969
 80008bc:	08000a51 	.word	0x08000a51
 80008c0:	08000a51 	.word	0x08000a51
 80008c4:	08000a51 	.word	0x08000a51
 80008c8:	08000a51 	.word	0x08000a51
 80008cc:	08000a51 	.word	0x08000a51
 80008d0:	08000a51 	.word	0x08000a51
 80008d4:	080008d9 	.word	0x080008d9
	case OFF:
		// do nothing
	case INIT:
		tuningStatus = RED_ADJ;
 80008d8:	4b62      	ldr	r3, [pc, #392]	; (8000a64 <fsm_traffic_tunning_mode+0x1cc>)
 80008da:	2201      	movs	r2, #1
 80008dc:	601a      	str	r2, [r3, #0]
		clearRoadLed();
 80008de:	f000 fd29 	bl	8001334 <clearRoadLed>
		logNewTime();
 80008e2:	f7ff ff89 	bl	80007f8 <logNewTime>
		setTimer(timer_duration[1], 1);
 80008e6:	4b60      	ldr	r3, [pc, #384]	; (8000a68 <fsm_traffic_tunning_mode+0x1d0>)
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2101      	movs	r1, #1
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 ff3d 	bl	800176c <setTimer>
		break;
 80008f2:	e0b4      	b.n	8000a5e <fsm_traffic_tunning_mode+0x1c6>
	case RED_ADJ:
		blinkyRed();
 80008f4:	f000 fcd0 	bl	8001298 <blinkyRed>
		if (isButtonShortPress(2)){
 80008f8:	2002      	movs	r0, #2
 80008fa:	f7ff fd47 	bl	800038c <isButtonShortPress>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d00e      	beq.n	8000922 <fsm_traffic_tunning_mode+0x8a>
			timeRed++;
 8000904:	4b59      	ldr	r3, [pc, #356]	; (8000a6c <fsm_traffic_tunning_mode+0x1d4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3301      	adds	r3, #1
 800090a:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <fsm_traffic_tunning_mode+0x1d4>)
 800090c:	6013      	str	r3, [r2, #0]
			if (timeRed > 99) timeRed = 0;
 800090e:	4b57      	ldr	r3, [pc, #348]	; (8000a6c <fsm_traffic_tunning_mode+0x1d4>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b63      	cmp	r3, #99	; 0x63
 8000914:	dd02      	ble.n	800091c <fsm_traffic_tunning_mode+0x84>
 8000916:	4b55      	ldr	r3, [pc, #340]	; (8000a6c <fsm_traffic_tunning_mode+0x1d4>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
			logNewTime();
 800091c:	f7ff ff6c 	bl	80007f8 <logNewTime>
		else if (isButtonShortPress(1)){
			tuningStatus = GREEN_ADJ;
			clearRoadLed();
			logNewTime();
		}
		break;
 8000920:	e098      	b.n	8000a54 <fsm_traffic_tunning_mode+0x1bc>
		else if (isButtonLongPress(2)){
 8000922:	2002      	movs	r0, #2
 8000924:	f7ff fd56 	bl	80003d4 <isButtonLongPress>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d00e      	beq.n	800094c <fsm_traffic_tunning_mode+0xb4>
			timeRed--;
 800092e:	4b4f      	ldr	r3, [pc, #316]	; (8000a6c <fsm_traffic_tunning_mode+0x1d4>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	4a4d      	ldr	r2, [pc, #308]	; (8000a6c <fsm_traffic_tunning_mode+0x1d4>)
 8000936:	6013      	str	r3, [r2, #0]
			if (timeRed < 0) timeRed = 99;
 8000938:	4b4c      	ldr	r3, [pc, #304]	; (8000a6c <fsm_traffic_tunning_mode+0x1d4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	da02      	bge.n	8000946 <fsm_traffic_tunning_mode+0xae>
 8000940:	4b4a      	ldr	r3, [pc, #296]	; (8000a6c <fsm_traffic_tunning_mode+0x1d4>)
 8000942:	2263      	movs	r2, #99	; 0x63
 8000944:	601a      	str	r2, [r3, #0]
			logNewTime();
 8000946:	f7ff ff57 	bl	80007f8 <logNewTime>
		break;
 800094a:	e083      	b.n	8000a54 <fsm_traffic_tunning_mode+0x1bc>
		else if (isButtonShortPress(1)){
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff fd1d 	bl	800038c <isButtonShortPress>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d07d      	beq.n	8000a54 <fsm_traffic_tunning_mode+0x1bc>
			tuningStatus = GREEN_ADJ;
 8000958:	4b42      	ldr	r3, [pc, #264]	; (8000a64 <fsm_traffic_tunning_mode+0x1cc>)
 800095a:	2203      	movs	r2, #3
 800095c:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 800095e:	f000 fce9 	bl	8001334 <clearRoadLed>
			logNewTime();
 8000962:	f7ff ff49 	bl	80007f8 <logNewTime>
		break;
 8000966:	e075      	b.n	8000a54 <fsm_traffic_tunning_mode+0x1bc>
	case GREEN_ADJ:
		blinkyGreen();
 8000968:	f000 fcca 	bl	8001300 <blinkyGreen>
		if(isButtonShortPress(2)){
 800096c:	2002      	movs	r0, #2
 800096e:	f7ff fd0d 	bl	800038c <isButtonShortPress>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00e      	beq.n	8000996 <fsm_traffic_tunning_mode+0xfe>
			timeGreen++;
 8000978:	4b3d      	ldr	r3, [pc, #244]	; (8000a70 <fsm_traffic_tunning_mode+0x1d8>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	4a3c      	ldr	r2, [pc, #240]	; (8000a70 <fsm_traffic_tunning_mode+0x1d8>)
 8000980:	6013      	str	r3, [r2, #0]
			if (timeGreen > 99) timeGreen = 0;
 8000982:	4b3b      	ldr	r3, [pc, #236]	; (8000a70 <fsm_traffic_tunning_mode+0x1d8>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b63      	cmp	r3, #99	; 0x63
 8000988:	dd02      	ble.n	8000990 <fsm_traffic_tunning_mode+0xf8>
 800098a:	4b39      	ldr	r3, [pc, #228]	; (8000a70 <fsm_traffic_tunning_mode+0x1d8>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
			logNewTime();
 8000990:	f7ff ff32 	bl	80007f8 <logNewTime>
		else if(isButtonShortPress(1)){
			tuningStatus = AMBER_ADJ;
			clearRoadLed();
			logNewTime();
		}
		break;
 8000994:	e060      	b.n	8000a58 <fsm_traffic_tunning_mode+0x1c0>
		else if(isButtonLongPress(2)){
 8000996:	2002      	movs	r0, #2
 8000998:	f7ff fd1c 	bl	80003d4 <isButtonLongPress>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d00e      	beq.n	80009c0 <fsm_traffic_tunning_mode+0x128>
			timeGreen--;
 80009a2:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <fsm_traffic_tunning_mode+0x1d8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	4a31      	ldr	r2, [pc, #196]	; (8000a70 <fsm_traffic_tunning_mode+0x1d8>)
 80009aa:	6013      	str	r3, [r2, #0]
			if (timeGreen < 0) timeGreen = 99;
 80009ac:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <fsm_traffic_tunning_mode+0x1d8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	da02      	bge.n	80009ba <fsm_traffic_tunning_mode+0x122>
 80009b4:	4b2e      	ldr	r3, [pc, #184]	; (8000a70 <fsm_traffic_tunning_mode+0x1d8>)
 80009b6:	2263      	movs	r2, #99	; 0x63
 80009b8:	601a      	str	r2, [r3, #0]
			logNewTime();
 80009ba:	f7ff ff1d 	bl	80007f8 <logNewTime>
		break;
 80009be:	e04b      	b.n	8000a58 <fsm_traffic_tunning_mode+0x1c0>
		else if(isButtonShortPress(1)){
 80009c0:	2001      	movs	r0, #1
 80009c2:	f7ff fce3 	bl	800038c <isButtonShortPress>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d045      	beq.n	8000a58 <fsm_traffic_tunning_mode+0x1c0>
			tuningStatus = AMBER_ADJ;
 80009cc:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <fsm_traffic_tunning_mode+0x1cc>)
 80009ce:	2202      	movs	r2, #2
 80009d0:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 80009d2:	f000 fcaf 	bl	8001334 <clearRoadLed>
			logNewTime();
 80009d6:	f7ff ff0f 	bl	80007f8 <logNewTime>
		break;
 80009da:	e03d      	b.n	8000a58 <fsm_traffic_tunning_mode+0x1c0>
	case AMBER_ADJ:
		blinkyAmber();
 80009dc:	f000 fc76 	bl	80012cc <blinkyAmber>
		if (isButtonShortPress(2)){
 80009e0:	2002      	movs	r0, #2
 80009e2:	f7ff fcd3 	bl	800038c <isButtonShortPress>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d00e      	beq.n	8000a0a <fsm_traffic_tunning_mode+0x172>
			timeAmber++;
 80009ec:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <fsm_traffic_tunning_mode+0x1dc>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <fsm_traffic_tunning_mode+0x1dc>)
 80009f4:	6013      	str	r3, [r2, #0]
			if (timeAmber > 99) timeAmber = 0;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <fsm_traffic_tunning_mode+0x1dc>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b63      	cmp	r3, #99	; 0x63
 80009fc:	dd02      	ble.n	8000a04 <fsm_traffic_tunning_mode+0x16c>
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <fsm_traffic_tunning_mode+0x1dc>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
			logNewTime();
 8000a04:	f7ff fef8 	bl	80007f8 <logNewTime>
		else if (isButtonShortPress(1)){
			tuningStatus = RED_ADJ;
			clearRoadLed();
			logNewTime();
		}
		break;
 8000a08:	e028      	b.n	8000a5c <fsm_traffic_tunning_mode+0x1c4>
		else if(isButtonLongPress(2)){
 8000a0a:	2002      	movs	r0, #2
 8000a0c:	f7ff fce2 	bl	80003d4 <isButtonLongPress>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d00e      	beq.n	8000a34 <fsm_traffic_tunning_mode+0x19c>
			timeAmber--;
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <fsm_traffic_tunning_mode+0x1dc>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	4a15      	ldr	r2, [pc, #84]	; (8000a74 <fsm_traffic_tunning_mode+0x1dc>)
 8000a1e:	6013      	str	r3, [r2, #0]
			if (timeAmber < 0) timeAmber = 99;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <fsm_traffic_tunning_mode+0x1dc>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	da02      	bge.n	8000a2e <fsm_traffic_tunning_mode+0x196>
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <fsm_traffic_tunning_mode+0x1dc>)
 8000a2a:	2263      	movs	r2, #99	; 0x63
 8000a2c:	601a      	str	r2, [r3, #0]
			logNewTime();
 8000a2e:	f7ff fee3 	bl	80007f8 <logNewTime>
		break;
 8000a32:	e013      	b.n	8000a5c <fsm_traffic_tunning_mode+0x1c4>
		else if (isButtonShortPress(1)){
 8000a34:	2001      	movs	r0, #1
 8000a36:	f7ff fca9 	bl	800038c <isButtonShortPress>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00d      	beq.n	8000a5c <fsm_traffic_tunning_mode+0x1c4>
			tuningStatus = RED_ADJ;
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <fsm_traffic_tunning_mode+0x1cc>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 8000a46:	f000 fc75 	bl	8001334 <clearRoadLed>
			logNewTime();
 8000a4a:	f7ff fed5 	bl	80007f8 <logNewTime>
		break;
 8000a4e:	e005      	b.n	8000a5c <fsm_traffic_tunning_mode+0x1c4>

	default:
		break;
 8000a50:	bf00      	nop
 8000a52:	e004      	b.n	8000a5e <fsm_traffic_tunning_mode+0x1c6>
		break;
 8000a54:	bf00      	nop
 8000a56:	e002      	b.n	8000a5e <fsm_traffic_tunning_mode+0x1c6>
		break;
 8000a58:	bf00      	nop
 8000a5a:	e000      	b.n	8000a5e <fsm_traffic_tunning_mode+0x1c6>
		break;
 8000a5c:	bf00      	nop
	}
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000013c 	.word	0x2000013c
 8000a68:	2000009c 	.word	0x2000009c
 8000a6c:	20000090 	.word	0x20000090
 8000a70:	20000098 	.word	0x20000098
 8000a74:	20000094 	.word	0x20000094

08000a78 <fsm_switch_mode>:

void fsm_switch_mode(void){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	if (isButtonLongPress(0)){
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff fca9 	bl	80003d4 <isButtonLongPress>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d031      	beq.n	8000aec <fsm_switch_mode+0x74>
		if (trafficMode != MANUAL_MODE) {
 8000a88:	4b35      	ldr	r3, [pc, #212]	; (8000b60 <fsm_switch_mode+0xe8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d01d      	beq.n	8000acc <fsm_switch_mode+0x54>
			trafficMode = MANUAL_MODE;
 8000a90:	4b33      	ldr	r3, [pc, #204]	; (8000b60 <fsm_switch_mode+0xe8>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO MANUAL MODE#\r\n"),500);
 8000a96:	4933      	ldr	r1, [pc, #204]	; (8000b64 <fsm_switch_mode+0xec>)
 8000a98:	4833      	ldr	r0, [pc, #204]	; (8000b68 <fsm_switch_mode+0xf0>)
 8000a9a:	f003 fd49 	bl	8004530 <siprintf>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000aa6:	4930      	ldr	r1, [pc, #192]	; (8000b68 <fsm_switch_mode+0xf0>)
 8000aa8:	4830      	ldr	r0, [pc, #192]	; (8000b6c <fsm_switch_mode+0xf4>)
 8000aaa:	f002 ffc6 	bl	8003a3a <HAL_UART_Transmit>
			// TODO: prepare for manual mode
			manualStatus = INIT;
 8000aae:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <fsm_switch_mode+0xf8>)
 8000ab0:	220a      	movs	r2, #10
 8000ab2:	601a      	str	r2, [r3, #0]
			autoStatus= OFF;
 8000ab4:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <fsm_switch_mode+0xfc>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
			tuningStatus = OFF;
 8000aba:	4b2f      	ldr	r3, [pc, #188]	; (8000b78 <fsm_switch_mode+0x100>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
			pedStatus = OFF;
 8000ac0:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <fsm_switch_mode+0x104>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
			fsm_pedestrian();
 8000ac6:	f7ff fd8f 	bl	80005e8 <fsm_pedestrian>
		else {
			trafficMode = INIT;
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO AUTO MODE#\r\n"),500);
		}
	}
}
 8000aca:	e046      	b.n	8000b5a <fsm_switch_mode+0xe2>
			trafficMode = INIT;
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <fsm_switch_mode+0xe8>)
 8000ace:	220a      	movs	r2, #10
 8000ad0:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO AUTO MODE#\r\n"),500);
 8000ad2:	492b      	ldr	r1, [pc, #172]	; (8000b80 <fsm_switch_mode+0x108>)
 8000ad4:	4824      	ldr	r0, [pc, #144]	; (8000b68 <fsm_switch_mode+0xf0>)
 8000ad6:	f003 fd2b 	bl	8004530 <siprintf>
 8000ada:	4603      	mov	r3, r0
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ae2:	4921      	ldr	r1, [pc, #132]	; (8000b68 <fsm_switch_mode+0xf0>)
 8000ae4:	4821      	ldr	r0, [pc, #132]	; (8000b6c <fsm_switch_mode+0xf4>)
 8000ae6:	f002 ffa8 	bl	8003a3a <HAL_UART_Transmit>
}
 8000aea:	e036      	b.n	8000b5a <fsm_switch_mode+0xe2>
	else if (isButtonLongPress(1)){
 8000aec:	2001      	movs	r0, #1
 8000aee:	f7ff fc71 	bl	80003d4 <isButtonLongPress>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d030      	beq.n	8000b5a <fsm_switch_mode+0xe2>
		if (trafficMode != TUNING_MODE) {
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <fsm_switch_mode+0xe8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d01d      	beq.n	8000b3c <fsm_switch_mode+0xc4>
			trafficMode = TUNING_MODE;
 8000b00:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <fsm_switch_mode+0xe8>)
 8000b02:	2203      	movs	r2, #3
 8000b04:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO TUNING MODE#\r\n"),500);
 8000b06:	491f      	ldr	r1, [pc, #124]	; (8000b84 <fsm_switch_mode+0x10c>)
 8000b08:	4817      	ldr	r0, [pc, #92]	; (8000b68 <fsm_switch_mode+0xf0>)
 8000b0a:	f003 fd11 	bl	8004530 <siprintf>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b16:	4914      	ldr	r1, [pc, #80]	; (8000b68 <fsm_switch_mode+0xf0>)
 8000b18:	4814      	ldr	r0, [pc, #80]	; (8000b6c <fsm_switch_mode+0xf4>)
 8000b1a:	f002 ff8e 	bl	8003a3a <HAL_UART_Transmit>
			tuningStatus = INIT;
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <fsm_switch_mode+0x100>)
 8000b20:	220a      	movs	r2, #10
 8000b22:	601a      	str	r2, [r3, #0]
			autoStatus = OFF;
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <fsm_switch_mode+0xfc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
			manualStatus = OFF;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <fsm_switch_mode+0xf8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
			pedStatus = OFF;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <fsm_switch_mode+0x104>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
			fsm_pedestrian();
 8000b36:	f7ff fd57 	bl	80005e8 <fsm_pedestrian>
}
 8000b3a:	e00e      	b.n	8000b5a <fsm_switch_mode+0xe2>
			trafficMode = INIT;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <fsm_switch_mode+0xe8>)
 8000b3e:	220a      	movs	r2, #10
 8000b40:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO AUTO MODE#\r\n"),500);
 8000b42:	490f      	ldr	r1, [pc, #60]	; (8000b80 <fsm_switch_mode+0x108>)
 8000b44:	4808      	ldr	r0, [pc, #32]	; (8000b68 <fsm_switch_mode+0xf0>)
 8000b46:	f003 fcf3 	bl	8004530 <siprintf>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b52:	4905      	ldr	r1, [pc, #20]	; (8000b68 <fsm_switch_mode+0xf0>)
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <fsm_switch_mode+0xf4>)
 8000b56:	f002 ff70 	bl	8003a3a <HAL_UART_Transmit>
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000088 	.word	0x20000088
 8000b64:	08004c8c 	.word	0x08004c8c
 8000b68:	20000210 	.word	0x20000210
 8000b6c:	200001cc 	.word	0x200001cc
 8000b70:	20000138 	.word	0x20000138
 8000b74:	2000008c 	.word	0x2000008c
 8000b78:	2000013c 	.word	0x2000013c
 8000b7c:	20000140 	.word	0x20000140
 8000b80:	08004ca8 	.word	0x08004ca8
 8000b84:	08004cc0 	.word	0x08004cc0

08000b88 <fsm_traffic>:

void fsm_traffic(void){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	switch(trafficMode){
 8000b8c:	4b45      	ldr	r3, [pc, #276]	; (8000ca4 <fsm_traffic+0x11c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	2b09      	cmp	r3, #9
 8000b94:	f200 8082 	bhi.w	8000c9c <fsm_traffic+0x114>
 8000b98:	a201      	add	r2, pc, #4	; (adr r2, 8000ba0 <fsm_traffic+0x18>)
 8000b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9e:	bf00      	nop
 8000ba0:	08000c43 	.word	0x08000c43
 8000ba4:	08000c91 	.word	0x08000c91
 8000ba8:	08000c97 	.word	0x08000c97
 8000bac:	08000c9d 	.word	0x08000c9d
 8000bb0:	08000c9d 	.word	0x08000c9d
 8000bb4:	08000c9d 	.word	0x08000c9d
 8000bb8:	08000c9d 	.word	0x08000c9d
 8000bbc:	08000c9d 	.word	0x08000c9d
 8000bc0:	08000c9d 	.word	0x08000c9d
 8000bc4:	08000bc9 	.word	0x08000bc9
	case INIT:
		if (timeRed != (timeAmber + timeGreen)){
 8000bc8:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <fsm_traffic+0x120>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b37      	ldr	r3, [pc, #220]	; (8000cac <fsm_traffic+0x124>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4b37      	ldr	r3, [pc, #220]	; (8000cb0 <fsm_traffic+0x128>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d01b      	beq.n	8000c12 <fsm_traffic+0x8a>
			trafficMode = ERROR_MODE;
 8000bda:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <fsm_traffic+0x11c>)
 8000bdc:	2204      	movs	r2, #4
 8000bde:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER ERROR#\r\n"),500);
 8000be0:	4934      	ldr	r1, [pc, #208]	; (8000cb4 <fsm_traffic+0x12c>)
 8000be2:	4835      	ldr	r0, [pc, #212]	; (8000cb8 <fsm_traffic+0x130>)
 8000be4:	f003 fca4 	bl	8004530 <siprintf>
 8000be8:	4603      	mov	r3, r0
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bf0:	4931      	ldr	r1, [pc, #196]	; (8000cb8 <fsm_traffic+0x130>)
 8000bf2:	4832      	ldr	r0, [pc, #200]	; (8000cbc <fsm_traffic+0x134>)
 8000bf4:	f002 ff21 	bl	8003a3a <HAL_UART_Transmit>
			autoStatus = OFF;
 8000bf8:	4b31      	ldr	r3, [pc, #196]	; (8000cc0 <fsm_traffic+0x138>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
			manualStatus = OFF;
 8000bfe:	4b31      	ldr	r3, [pc, #196]	; (8000cc4 <fsm_traffic+0x13c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
			tuningStatus = OFF;
 8000c04:	4b30      	ldr	r3, [pc, #192]	; (8000cc8 <fsm_traffic+0x140>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
			pedStatus = OFF;
 8000c0a:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <fsm_traffic+0x144>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	e014      	b.n	8000c3c <fsm_traffic+0xb4>
		}
		else {
			trafficMode = AUTO_MODE;
 8000c12:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <fsm_traffic+0x11c>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	601a      	str	r2, [r3, #0]
			autoStatus = INIT;
 8000c18:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <fsm_traffic+0x138>)
 8000c1a:	220a      	movs	r2, #10
 8000c1c:	601a      	str	r2, [r3, #0]
			manualStatus = OFF;
 8000c1e:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <fsm_traffic+0x13c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
			tuningStatus = OFF;
 8000c24:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <fsm_traffic+0x140>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
			pedStatus = OFF;
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <fsm_traffic+0x144>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
			setTimer(timer_duration[0], 0);
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <fsm_traffic+0x148>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fd98 	bl	800176c <setTimer>
		}
		turnOffAllLED();
 8000c3c:	f000 faa4 	bl	8001188 <turnOffAllLED>
		break;
 8000c40:	e02d      	b.n	8000c9e <fsm_traffic+0x116>
	case AUTO_MODE:
		if (isButtonShortPress(3)) {
 8000c42:	2003      	movs	r0, #3
 8000c44:	f7ff fba2 	bl	800038c <isButtonShortPress>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d014      	beq.n	8000c78 <fsm_traffic+0xf0>
			if (pedStatus == OFF) {
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <fsm_traffic+0x144>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10d      	bne.n	8000c72 <fsm_traffic+0xea>
				pedStatus = INIT;
 8000c56:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <fsm_traffic+0x144>)
 8000c58:	220a      	movs	r2, #10
 8000c5a:	601a      	str	r2, [r3, #0]
				setTimer(4*1000*timeRed, 2);
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <fsm_traffic+0x128>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000c64:	fb02 f303 	mul.w	r3, r2, r3
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fd7e 	bl	800176c <setTimer>
 8000c70:	e002      	b.n	8000c78 <fsm_traffic+0xf0>
			}
			else pedStatus = OFF;
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <fsm_traffic+0x144>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
		}
		if (timer_flag[2] == 1) pedStatus = OFF;
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <fsm_traffic+0x14c>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d102      	bne.n	8000c86 <fsm_traffic+0xfe>
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <fsm_traffic+0x144>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
		fsm_pedestrian();
 8000c86:	f7ff fcaf 	bl	80005e8 <fsm_pedestrian>
		fsm_traffic_auto_mode();
 8000c8a:	f7ff fbc7 	bl	800041c <fsm_traffic_auto_mode>
		break;
 8000c8e:	e006      	b.n	8000c9e <fsm_traffic+0x116>
	case MANUAL_MODE:
		fsm_traffic_manual_mode();
 8000c90:	f7ff fd36 	bl	8000700 <fsm_traffic_manual_mode>
		break;
 8000c94:	e003      	b.n	8000c9e <fsm_traffic+0x116>
	case TUNING_MODE:
		fsm_traffic_tunning_mode();
 8000c96:	f7ff fdff 	bl	8000898 <fsm_traffic_tunning_mode>
		break;
 8000c9a:	e000      	b.n	8000c9e <fsm_traffic+0x116>
	default:
		break;
 8000c9c:	bf00      	nop
	}
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000088 	.word	0x20000088
 8000ca8:	20000094 	.word	0x20000094
 8000cac:	20000098 	.word	0x20000098
 8000cb0:	20000090 	.word	0x20000090
 8000cb4:	08004cdc 	.word	0x08004cdc
 8000cb8:	20000210 	.word	0x20000210
 8000cbc:	200001cc 	.word	0x200001cc
 8000cc0:	2000008c 	.word	0x2000008c
 8000cc4:	20000138 	.word	0x20000138
 8000cc8:	2000013c 	.word	0x2000013c
 8000ccc:	20000140 	.word	0x20000140
 8000cd0:	2000009c 	.word	0x2000009c
 8000cd4:	20000168 	.word	0x20000168

08000cd8 <clock_counter_traffic_update>:

void clock_counter_traffic_update(void){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	if((timer_flag[0] == 1) && (trafficMode == AUTO_MODE)){
 8000cdc:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <clock_counter_traffic_update+0xcc>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d15c      	bne.n	8000d9e <clock_counter_traffic_update+0xc6>
 8000ce4:	4b30      	ldr	r3, [pc, #192]	; (8000da8 <clock_counter_traffic_update+0xd0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d158      	bne.n	8000d9e <clock_counter_traffic_update+0xc6>
		clock_counter_main--;
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <clock_counter_traffic_update+0xd4>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	4a2e      	ldr	r2, [pc, #184]	; (8000dac <clock_counter_traffic_update+0xd4>)
 8000cf4:	6013      	str	r3, [r2, #0]
		clock_counter_side--;
 8000cf6:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <clock_counter_traffic_update+0xd8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	4a2c      	ldr	r2, [pc, #176]	; (8000db0 <clock_counter_traffic_update+0xd8>)
 8000cfe:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "\n!7SEG WAY1:%d#\r\n",clock_counter_main),500);
 8000d00:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <clock_counter_traffic_update+0xd4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	492b      	ldr	r1, [pc, #172]	; (8000db4 <clock_counter_traffic_update+0xdc>)
 8000d08:	482b      	ldr	r0, [pc, #172]	; (8000db8 <clock_counter_traffic_update+0xe0>)
 8000d0a:	f003 fc11 	bl	8004530 <siprintf>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d16:	4928      	ldr	r1, [pc, #160]	; (8000db8 <clock_counter_traffic_update+0xe0>)
 8000d18:	4828      	ldr	r0, [pc, #160]	; (8000dbc <clock_counter_traffic_update+0xe4>)
 8000d1a:	f002 fe8e 	bl	8003a3a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!7SEG WAY2:%d#\r\n",clock_counter_side),500);
 8000d1e:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <clock_counter_traffic_update+0xd8>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	4926      	ldr	r1, [pc, #152]	; (8000dc0 <clock_counter_traffic_update+0xe8>)
 8000d26:	4824      	ldr	r0, [pc, #144]	; (8000db8 <clock_counter_traffic_update+0xe0>)
 8000d28:	f003 fc02 	bl	8004530 <siprintf>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d34:	4920      	ldr	r1, [pc, #128]	; (8000db8 <clock_counter_traffic_update+0xe0>)
 8000d36:	4821      	ldr	r0, [pc, #132]	; (8000dbc <clock_counter_traffic_update+0xe4>)
 8000d38:	f002 fe7f 	bl	8003a3a <HAL_UART_Transmit>
		if (pedStatus != OFF) {
 8000d3c:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <clock_counter_traffic_update+0xec>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d026      	beq.n	8000d92 <clock_counter_traffic_update+0xba>
			if (pedStatus == GREEN_PED)
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <clock_counter_traffic_update+0xec>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d10f      	bne.n	8000d6c <clock_counter_traffic_update+0x94>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!PEDESTRIAN: %d#\r\n", clock_counter_main),500);
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <clock_counter_traffic_update+0xd4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	491d      	ldr	r1, [pc, #116]	; (8000dc8 <clock_counter_traffic_update+0xf0>)
 8000d54:	4818      	ldr	r0, [pc, #96]	; (8000db8 <clock_counter_traffic_update+0xe0>)
 8000d56:	f003 fbeb 	bl	8004530 <siprintf>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d62:	4915      	ldr	r1, [pc, #84]	; (8000db8 <clock_counter_traffic_update+0xe0>)
 8000d64:	4815      	ldr	r0, [pc, #84]	; (8000dbc <clock_counter_traffic_update+0xe4>)
 8000d66:	f002 fe68 	bl	8003a3a <HAL_UART_Transmit>
 8000d6a:	e012      	b.n	8000d92 <clock_counter_traffic_update+0xba>
			else if (pedStatus == RED_PED)
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <clock_counter_traffic_update+0xec>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d10e      	bne.n	8000d92 <clock_counter_traffic_update+0xba>
				HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!PEDESTRIAN: %d#\r\n", clock_counter_side),500);
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <clock_counter_traffic_update+0xd8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4913      	ldr	r1, [pc, #76]	; (8000dc8 <clock_counter_traffic_update+0xf0>)
 8000d7c:	480e      	ldr	r0, [pc, #56]	; (8000db8 <clock_counter_traffic_update+0xe0>)
 8000d7e:	f003 fbd7 	bl	8004530 <siprintf>
 8000d82:	4603      	mov	r3, r0
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d8a:	490b      	ldr	r1, [pc, #44]	; (8000db8 <clock_counter_traffic_update+0xe0>)
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <clock_counter_traffic_update+0xe4>)
 8000d8e:	f002 fe54 	bl	8003a3a <HAL_UART_Transmit>
		}
		setTimer(timer_duration[0], 0);
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <clock_counter_traffic_update+0xf4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 fce7 	bl	800176c <setTimer>
	}
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000168 	.word	0x20000168
 8000da8:	20000088 	.word	0x20000088
 8000dac:	20000150 	.word	0x20000150
 8000db0:	20000154 	.word	0x20000154
 8000db4:	08004cec 	.word	0x08004cec
 8000db8:	20000210 	.word	0x20000210
 8000dbc:	200001cc 	.word	0x200001cc
 8000dc0:	08004d00 	.word	0x08004d00
 8000dc4:	20000140 	.word	0x20000140
 8000dc8:	08004d14 	.word	0x08004d14
 8000dcc:	2000009c 	.word	0x2000009c

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd4:	f000 fea6 	bl	8001b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd8:	f000 f844 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ddc:	f000 f96a 	bl	80010b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000de0:	f000 f87c 	bl	8000edc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000de4:	f000 f93c 	bl	8001060 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000de8:	f000 f8c4 	bl	8000f74 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000dec:	4815      	ldr	r0, [pc, #84]	; (8000e44 <main+0x74>)
 8000dee:	f001 fee5 	bl	8002bbc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000df2:	2100      	movs	r1, #0
 8000df4:	4814      	ldr	r0, [pc, #80]	; (8000e48 <main+0x78>)
 8000df6:	f001 ff85 	bl	8002d04 <HAL_TIM_PWM_Start>

  setTimer(timer_duration[0], 0);
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <main+0x7c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 fcb3 	bl	800176c <setTimer>

  SCH_Init();
 8000e06:	f000 fb0d 	bl	8001424 <SCH_Init>

  SCH_Add_Task(fsm_traffic, 0, 1);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4810      	ldr	r0, [pc, #64]	; (8000e50 <main+0x80>)
 8000e10:	f000 fb22 	bl	8001458 <SCH_Add_Task>
  SCH_Add_Task(clock_counter_traffic_update, 0, 1);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2100      	movs	r1, #0
 8000e18:	480e      	ldr	r0, [pc, #56]	; (8000e54 <main+0x84>)
 8000e1a:	f000 fb1d 	bl	8001458 <SCH_Add_Task>
  SCH_Add_Task(fsm_switch_mode, 0, 1);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2100      	movs	r1, #0
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <main+0x88>)
 8000e24:	f000 fb18 	bl	8001458 <SCH_Add_Task>
  SCH_Add_Task(timerRun, 0, 1);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	480b      	ldr	r0, [pc, #44]	; (8000e5c <main+0x8c>)
 8000e2e:	f000 fb13 	bl	8001458 <SCH_Add_Task>
  SCH_Add_Task(getButtonValue, 0, 1);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2100      	movs	r1, #0
 8000e36:	480a      	ldr	r0, [pc, #40]	; (8000e60 <main+0x90>)
 8000e38:	f000 fb0e 	bl	8001458 <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000e3c:	f000 fc68 	bl	8001710 <SCH_Dispatch_Tasks>
 8000e40:	e7fc      	b.n	8000e3c <main+0x6c>
 8000e42:	bf00      	nop
 8000e44:	20000244 	.word	0x20000244
 8000e48:	20000184 	.word	0x20000184
 8000e4c:	2000009c 	.word	0x2000009c
 8000e50:	08000b89 	.word	0x08000b89
 8000e54:	08000cd9 	.word	0x08000cd9
 8000e58:	08000a79 	.word	0x08000a79
 8000e5c:	080017ad 	.word	0x080017ad
 8000e60:	0800014d 	.word	0x0800014d

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b090      	sub	sp, #64	; 0x40
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	2228      	movs	r2, #40	; 0x28
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 fa9e 	bl	80043b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e8e:	2310      	movs	r3, #16
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e96:	f107 0318 	add.w	r3, r7, #24
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 fa24 	bl	80022e8 <HAL_RCC_OscConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ea6:	f000 f969 	bl	800117c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eaa:	230f      	movs	r3, #15
 8000eac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 fc90 	bl	80027e8 <HAL_RCC_ClockConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ece:	f000 f955 	bl	800117c <Error_Handler>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3740      	adds	r7, #64	; 0x40
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000efa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000efe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f02:	2209      	movs	r2, #9
 8000f04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f0e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f20:	4813      	ldr	r0, [pc, #76]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f22:	f001 fdfb 	bl	8002b1c <HAL_TIM_Base_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f2c:	f000 f926 	bl	800117c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f3e:	f002 f943 	bl	80031c8 <HAL_TIM_ConfigClockSource>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f48:	f000 f918 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f5a:	f002 fcb7 	bl	80038cc <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f64:	f000 f90a 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000244 	.word	0x20000244

08000f74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08e      	sub	sp, #56	; 0x38
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	f107 0320 	add.w	r3, r7, #32
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
 8000fa0:	615a      	str	r2, [r3, #20]
 8000fa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fa4:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000fa6:	4a2d      	ldr	r2, [pc, #180]	; (800105c <MX_TIM3_Init+0xe8>)
 8000fa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000fac:	2209      	movs	r2, #9
 8000fae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb0:	4b29      	ldr	r3, [pc, #164]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7999;
 8000fb6:	4b28      	ldr	r3, [pc, #160]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000fb8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fc4:	4b24      	ldr	r3, [pc, #144]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fca:	4823      	ldr	r0, [pc, #140]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000fcc:	f001 fda6 	bl	8002b1c <HAL_TIM_Base_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000fd6:	f000 f8d1 	bl	800117c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	481c      	ldr	r0, [pc, #112]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000fe8:	f002 f8ee 	bl	80031c8 <HAL_TIM_ConfigClockSource>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ff2:	f000 f8c3 	bl	800117c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ff6:	4818      	ldr	r0, [pc, #96]	; (8001058 <MX_TIM3_Init+0xe4>)
 8000ff8:	f001 fe2c 	bl	8002c54 <HAL_TIM_PWM_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001002:	f000 f8bb 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	4619      	mov	r1, r3
 8001014:	4810      	ldr	r0, [pc, #64]	; (8001058 <MX_TIM3_Init+0xe4>)
 8001016:	f002 fc59 	bl	80038cc <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001020:	f000 f8ac 	bl	800117c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001024:	2360      	movs	r3, #96	; 0x60
 8001026:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	4619      	mov	r1, r3
 800103a:	4807      	ldr	r0, [pc, #28]	; (8001058 <MX_TIM3_Init+0xe4>)
 800103c:	f002 f806 	bl	800304c <HAL_TIM_PWM_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001046:	f000 f899 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800104a:	4803      	ldr	r0, [pc, #12]	; (8001058 <MX_TIM3_Init+0xe4>)
 800104c:	f000 fc48 	bl	80018e0 <HAL_TIM_MspPostInit>

}
 8001050:	bf00      	nop
 8001052:	3738      	adds	r7, #56	; 0x38
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000184 	.word	0x20000184
 800105c:	40000400 	.word	0x40000400

08001060 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <MX_USART2_UART_Init+0x50>)
 8001068:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 800106c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001070:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001098:	f002 fc82 	bl	80039a0 <HAL_UART_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010a2:	f000 f86b 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200001cc 	.word	0x200001cc
 80010b0:	40004400 	.word	0x40004400

080010b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <MX_GPIO_Init+0xa8>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a23      	ldr	r2, [pc, #140]	; (800115c <MX_GPIO_Init+0xa8>)
 80010ce:	f043 0310 	orr.w	r3, r3, #16
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b21      	ldr	r3, [pc, #132]	; (800115c <MX_GPIO_Init+0xa8>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <MX_GPIO_Init+0xa8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a1d      	ldr	r2, [pc, #116]	; (800115c <MX_GPIO_Init+0xa8>)
 80010e6:	f043 0304 	orr.w	r3, r3, #4
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <MX_GPIO_Init+0xa8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_PERD_Pin|GREEN_PERD_Pin|RED_LED1_Pin|AMBER_LED1_Pin
 80010f8:	2200      	movs	r2, #0
 80010fa:	f641 71b0 	movw	r1, #8112	; 0x1fb0
 80010fe:	4818      	ldr	r0, [pc, #96]	; (8001160 <MX_GPIO_Init+0xac>)
 8001100:	f001 f8c1 	bl	8002286 <HAL_GPIO_WritePin>
                          |GREEN_LED1_Pin|RED_LED2_Pin|AMBER_LED2_Pin|GREEN_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001104:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001108:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800110e:	2301      	movs	r3, #1
 8001110:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	4619      	mov	r1, r3
 8001118:	4812      	ldr	r0, [pc, #72]	; (8001164 <MX_GPIO_Init+0xb0>)
 800111a:	f000 ff23 	bl	8001f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PERD_Pin */
  GPIO_InitStruct.Pin = BUTTON_PERD_Pin;
 800111e:	2301      	movs	r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001126:	2301      	movs	r3, #1
 8001128:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_PERD_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4619      	mov	r1, r3
 8001130:	480b      	ldr	r0, [pc, #44]	; (8001160 <MX_GPIO_Init+0xac>)
 8001132:	f000 ff17 	bl	8001f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_PERD_Pin GREEN_PERD_Pin RED_LED1_Pin AMBER_LED1_Pin
                           GREEN_LED1_Pin RED_LED2_Pin AMBER_LED2_Pin GREEN_LED2_Pin */
  GPIO_InitStruct.Pin = RED_PERD_Pin|GREEN_PERD_Pin|RED_LED1_Pin|AMBER_LED1_Pin
 8001136:	f641 73b0 	movw	r3, #8112	; 0x1fb0
 800113a:	60bb      	str	r3, [r7, #8]
                          |GREEN_LED1_Pin|RED_LED2_Pin|AMBER_LED2_Pin|GREEN_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2302      	movs	r3, #2
 8001146:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	4619      	mov	r1, r3
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_GPIO_Init+0xac>)
 8001150:	f000 ff08 	bl	8001f64 <HAL_GPIO_Init>

}
 8001154:	bf00      	nop
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021000 	.word	0x40021000
 8001160:	40010800 	.word	0x40010800
 8001164:	40011000 	.word	0x40011000

08001168 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001170:	f000 fab2 	bl	80016d8 <SCH_Update>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	e7fe      	b.n	8001184 <Error_Handler+0x8>
	...

08001188 <turnOffAllLED>:
 *      Author: TrongAnh
 */

#include "physics.h"

void turnOffAllLED(void){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin | RED_LED2_Pin |AMBER_LED1_Pin
 800118c:	2201      	movs	r2, #1
 800118e:	f641 71b0 	movw	r1, #8112	; 0x1fb0
 8001192:	4802      	ldr	r0, [pc, #8]	; (800119c <turnOffAllLED+0x14>)
 8001194:	f001 f877 	bl	8002286 <HAL_GPIO_WritePin>
			| AMBER_LED2_Pin | GREEN_LED1_Pin | GREEN_LED2_Pin | RED_PERD_Pin | GREEN_PERD_Pin, 1);
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40010800 	.word	0x40010800

080011a0 <turnOnRed>:
}

//AUTO / MANUAL MODE:
//turn on the led with index:	0: way 1
//								1: way 2
void turnOnRed(int index){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	if (index == 0){
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10b      	bne.n	80011c6 <turnOnRed+0x26>
		HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2180      	movs	r1, #128	; 0x80
 80011b2:	480e      	ldr	r0, [pc, #56]	; (80011ec <turnOnRed+0x4c>)
 80011b4:	f001 f867 	bl	8002286 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AMBER_LED1_Pin | GREEN_LED1_Pin, 1);
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 7140 	mov.w	r1, #768	; 0x300
 80011be:	480b      	ldr	r0, [pc, #44]	; (80011ec <turnOnRed+0x4c>)
 80011c0:	f001 f861 	bl	8002286 <HAL_GPIO_WritePin>
	}
	else if (index == 1){
		HAL_GPIO_WritePin(GPIOA, RED_LED2_Pin, 0);
		HAL_GPIO_WritePin(GPIOA, AMBER_LED2_Pin | GREEN_LED2_Pin, 1);
	}
}
 80011c4:	e00e      	b.n	80011e4 <turnOnRed+0x44>
	else if (index == 1){
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d10b      	bne.n	80011e4 <turnOnRed+0x44>
		HAL_GPIO_WritePin(GPIOA, RED_LED2_Pin, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <turnOnRed+0x4c>)
 80011d4:	f001 f857 	bl	8002286 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AMBER_LED2_Pin | GREEN_LED2_Pin, 1);
 80011d8:	2201      	movs	r2, #1
 80011da:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80011de:	4803      	ldr	r0, [pc, #12]	; (80011ec <turnOnRed+0x4c>)
 80011e0:	f001 f851 	bl	8002286 <HAL_GPIO_WritePin>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40010800 	.word	0x40010800

080011f0 <turnOnAmber>:
//turn on the led with index:	0: way 1
//								1: way 2
void turnOnAmber(int index){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	if (index == 0){
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10c      	bne.n	8001218 <turnOnAmber+0x28>
		HAL_GPIO_WritePin(GPIOA, AMBER_LED1_Pin, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001204:	480e      	ldr	r0, [pc, #56]	; (8001240 <turnOnAmber+0x50>)
 8001206:	f001 f83e 	bl	8002286 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin | GREEN_LED1_Pin, 1);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001210:	480b      	ldr	r0, [pc, #44]	; (8001240 <turnOnAmber+0x50>)
 8001212:	f001 f838 	bl	8002286 <HAL_GPIO_WritePin>
	}
	else if (index == 1){
		HAL_GPIO_WritePin(GPIOA, AMBER_LED2_Pin, 0);
		HAL_GPIO_WritePin(GPIOA, RED_LED2_Pin| GREEN_LED2_Pin, 1);
	}
}
 8001216:	e00e      	b.n	8001236 <turnOnAmber+0x46>
	else if (index == 1){
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d10b      	bne.n	8001236 <turnOnAmber+0x46>
		HAL_GPIO_WritePin(GPIOA, AMBER_LED2_Pin, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001224:	4806      	ldr	r0, [pc, #24]	; (8001240 <turnOnAmber+0x50>)
 8001226:	f001 f82e 	bl	8002286 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RED_LED2_Pin| GREEN_LED2_Pin, 1);
 800122a:	2201      	movs	r2, #1
 800122c:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <turnOnAmber+0x50>)
 8001232:	f001 f828 	bl	8002286 <HAL_GPIO_WritePin>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40010800 	.word	0x40010800

08001244 <turnOnGreen>:

//turn on the led with index:	0: way 1
//								1: way 2
void turnOnGreen(int index){
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	if (index == 0){
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10c      	bne.n	800126c <turnOnGreen+0x28>
		HAL_GPIO_WritePin(GPIOA, GREEN_LED1_Pin, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001258:	480e      	ldr	r0, [pc, #56]	; (8001294 <turnOnGreen+0x50>)
 800125a:	f001 f814 	bl	8002286 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin | AMBER_LED1_Pin, 1);
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001264:	480b      	ldr	r0, [pc, #44]	; (8001294 <turnOnGreen+0x50>)
 8001266:	f001 f80e 	bl	8002286 <HAL_GPIO_WritePin>
	}
	else if (index == 1){
		HAL_GPIO_WritePin(GPIOA, GREEN_LED2_Pin, 0);
		HAL_GPIO_WritePin(GPIOA, RED_LED2_Pin| AMBER_LED2_Pin, 1);
	}
}
 800126a:	e00e      	b.n	800128a <turnOnGreen+0x46>
	else if (index == 1){
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d10b      	bne.n	800128a <turnOnGreen+0x46>
		HAL_GPIO_WritePin(GPIOA, GREEN_LED2_Pin, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001278:	4806      	ldr	r0, [pc, #24]	; (8001294 <turnOnGreen+0x50>)
 800127a:	f001 f804 	bl	8002286 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, RED_LED2_Pin| AMBER_LED2_Pin, 1);
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <turnOnGreen+0x50>)
 8001286:	f000 fffe 	bl	8002286 <HAL_GPIO_WritePin>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40010800 	.word	0x40010800

08001298 <blinkyRed>:

//TUNING MODE:
//Blink the suitable led
void blinkyRed(void){
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	if(timer_flag[1] == 1){
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <blinkyRed+0x28>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d10a      	bne.n	80012ba <blinkyRed+0x22>
		HAL_GPIO_TogglePin(GPIOA, RED_LED1_Pin | RED_LED2_Pin);
 80012a4:	f44f 6190 	mov.w	r1, #1152	; 0x480
 80012a8:	4806      	ldr	r0, [pc, #24]	; (80012c4 <blinkyRed+0x2c>)
 80012aa:	f001 f804 	bl	80022b6 <HAL_GPIO_TogglePin>
		setTimer(timer_duration[1], 1);
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <blinkyRed+0x30>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2101      	movs	r1, #1
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fa59 	bl	800176c <setTimer>
	}
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000168 	.word	0x20000168
 80012c4:	40010800 	.word	0x40010800
 80012c8:	2000009c 	.word	0x2000009c

080012cc <blinkyAmber>:

void blinkyAmber(void){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	if(timer_flag[1] == 1){
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <blinkyAmber+0x28>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d10a      	bne.n	80012ee <blinkyAmber+0x22>
		HAL_GPIO_TogglePin(GPIOA, AMBER_LED1_Pin | AMBER_LED2_Pin);
 80012d8:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80012dc:	4806      	ldr	r0, [pc, #24]	; (80012f8 <blinkyAmber+0x2c>)
 80012de:	f000 ffea 	bl	80022b6 <HAL_GPIO_TogglePin>
		setTimer(timer_duration[1], 1);
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <blinkyAmber+0x30>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2101      	movs	r1, #1
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fa3f 	bl	800176c <setTimer>
	}
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000168 	.word	0x20000168
 80012f8:	40010800 	.word	0x40010800
 80012fc:	2000009c 	.word	0x2000009c

08001300 <blinkyGreen>:

void blinkyGreen(void){
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	if (timer_flag[1] == 1){
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <blinkyGreen+0x28>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d10a      	bne.n	8001322 <blinkyGreen+0x22>
		HAL_GPIO_TogglePin(GPIOA, GREEN_LED1_Pin | GREEN_LED2_Pin);
 800130c:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8001310:	4806      	ldr	r0, [pc, #24]	; (800132c <blinkyGreen+0x2c>)
 8001312:	f000 ffd0 	bl	80022b6 <HAL_GPIO_TogglePin>
		setTimer(timer_duration[1], 1);
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <blinkyGreen+0x30>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2101      	movs	r1, #1
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fa25 	bl	800176c <setTimer>
	}
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000168 	.word	0x20000168
 800132c:	40010800 	.word	0x40010800
 8001330:	2000009c 	.word	0x2000009c

08001334 <clearRoadLed>:

void clearRoadLed(void){
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin | RED_LED2_Pin |
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 800133e:	4802      	ldr	r0, [pc, #8]	; (8001348 <clearRoadLed+0x14>)
 8001340:	f000 ffa1 	bl	8002286 <HAL_GPIO_WritePin>
			AMBER_LED1_Pin | AMBER_LED2_Pin | GREEN_LED1_Pin | GREEN_LED2_Pin, 1);
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40010800 	.word	0x40010800

0800134c <setPedestrianLed>:
 *
 * @param:	0	-	RED
 * 			1	-	GREEN
 * @retval: None
 */
void setPedestrianLed(int index){
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	if(index == 0){
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10a      	bne.n	8001370 <setPedestrianLed+0x24>
		HAL_GPIO_WritePin(GPIOA, RED_PERD_Pin, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2110      	movs	r1, #16
 800135e:	480d      	ldr	r0, [pc, #52]	; (8001394 <setPedestrianLed+0x48>)
 8001360:	f000 ff91 	bl	8002286 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GREEN_PERD_Pin, 1);
 8001364:	2201      	movs	r2, #1
 8001366:	2120      	movs	r1, #32
 8001368:	480a      	ldr	r0, [pc, #40]	; (8001394 <setPedestrianLed+0x48>)
 800136a:	f000 ff8c 	bl	8002286 <HAL_GPIO_WritePin>
	}
	else if (index == 1){
		HAL_GPIO_WritePin(GPIOA, RED_PERD_Pin, 1);
		HAL_GPIO_WritePin(GPIOA, GREEN_PERD_Pin, 0);
	}
}
 800136e:	e00c      	b.n	800138a <setPedestrianLed+0x3e>
	else if (index == 1){
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d109      	bne.n	800138a <setPedestrianLed+0x3e>
		HAL_GPIO_WritePin(GPIOA, RED_PERD_Pin, 1);
 8001376:	2201      	movs	r2, #1
 8001378:	2110      	movs	r1, #16
 800137a:	4806      	ldr	r0, [pc, #24]	; (8001394 <setPedestrianLed+0x48>)
 800137c:	f000 ff83 	bl	8002286 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GREEN_PERD_Pin, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2120      	movs	r1, #32
 8001384:	4803      	ldr	r0, [pc, #12]	; (8001394 <setPedestrianLed+0x48>)
 8001386:	f000 ff7e 	bl	8002286 <HAL_GPIO_WritePin>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40010800 	.word	0x40010800

08001398 <unsetPedestrianLed>:

void unsetPedestrianLed(int index) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	if (index == 0)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d105      	bne.n	80013b2 <unsetPedestrianLed+0x1a>
		HAL_GPIO_WritePin(GPIOA, RED_PERD_Pin, 1);
 80013a6:	2201      	movs	r2, #1
 80013a8:	2110      	movs	r1, #16
 80013aa:	4808      	ldr	r0, [pc, #32]	; (80013cc <unsetPedestrianLed+0x34>)
 80013ac:	f000 ff6b 	bl	8002286 <HAL_GPIO_WritePin>
	else if (index == 1)
		HAL_GPIO_WritePin(GPIOA, GREEN_PERD_Pin, 1);
}
 80013b0:	e007      	b.n	80013c2 <unsetPedestrianLed+0x2a>
	else if (index == 1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d104      	bne.n	80013c2 <unsetPedestrianLed+0x2a>
		HAL_GPIO_WritePin(GPIOA, GREEN_PERD_Pin, 1);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2120      	movs	r1, #32
 80013bc:	4803      	ldr	r0, [pc, #12]	; (80013cc <unsetPedestrianLed+0x34>)
 80013be:	f000 ff62 	bl	8002286 <HAL_GPIO_WritePin>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40010800 	.word	0x40010800

080013d0 <Add_Node>:
};

struct container* container;


struct sTask* Add_Node(struct sTask** curr, void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	603b      	str	r3, [r7, #0]
    struct sTask *temp = (struct sTask*)malloc(sizeof(struct sTask));
 80013de:	2010      	movs	r0, #16
 80013e0:	f002 ffe0 	bl	80043a4 <malloc>
 80013e4:	4603      	mov	r3, r0
 80013e6:	617b      	str	r3, [r7, #20]
    temp -> pTask = pFunction;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	601a      	str	r2, [r3, #0]
    temp -> Delay = DELAY;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	605a      	str	r2, [r3, #4]
    temp -> Period = PERIOD;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	609a      	str	r2, [r3, #8]
    if (curr == NULL || *curr == NULL) {
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <Add_Node+0x38>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d103      	bne.n	8001410 <Add_Node+0x40>
        temp -> next = temp;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e004      	b.n	800141a <Add_Node+0x4a>
    }
    else {
        temp -> next = (*curr) -> next;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	60da      	str	r2, [r3, #12]
    }
    return temp;
 800141a:	697b      	ldr	r3, [r7, #20]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <SCH_Init>:

void SCH_Init(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
    container = (struct container*)malloc(sizeof(struct container));
 8001428:	200c      	movs	r0, #12
 800142a:	f002 ffbb 	bl	80043a4 <malloc>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <SCH_Init+0x30>)
 8001434:	601a      	str	r2, [r3, #0]
	container -> tail = NULL;
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <SCH_Init+0x30>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
	container -> numSlot = 0;
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <SCH_Init+0x30>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2200      	movs	r2, #0
 8001444:	605a      	str	r2, [r3, #4]
	container -> emptySlot = 0;
 8001446:	4b03      	ldr	r3, [pc, #12]	; (8001454 <SCH_Init+0x30>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000028c 	.word	0x2000028c

08001458 <SCH_Add_Task>:

void SCH_Add_Task(void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b08b      	sub	sp, #44	; 0x2c
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
	// container empty
	if (container -> tail == NULL) {
 8001464:	4b6e      	ldr	r3, [pc, #440]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10f      	bne.n	800148e <SCH_Add_Task+0x36>
		container -> tail = Add_Node(NULL, pFunction, DELAY, PERIOD);
 800146e:	4b6c      	ldr	r3, [pc, #432]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001470:	681c      	ldr	r4, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	68f9      	ldr	r1, [r7, #12]
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff ffa9 	bl	80013d0 <Add_Node>
 800147e:	4603      	mov	r3, r0
 8001480:	6023      	str	r3, [r4, #0]
		(container -> numSlot)++;
 8001482:	4b67      	ldr	r3, [pc, #412]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	3201      	adds	r2, #1
 800148a:	605a      	str	r2, [r3, #4]
			}
			temp = temp -> next;
		}
	}

}
 800148c:	e0c4      	b.n	8001618 <SCH_Add_Task+0x1c0>
		struct sTask* temp = container -> tail;
 800148e:	4b64      	ldr	r3, [pc, #400]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	617b      	str	r3, [r7, #20]
		uint32_t sumDelay = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t newDelay = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < container -> numSlot; i++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
 80014a2:	e0b1      	b.n	8001608 <SCH_Add_Task+0x1b0>
			sumDelay = sumDelay + temp -> next -> Delay;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ac:	4413      	add	r3, r2
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
			if (sumDelay > DELAY) {
 80014b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d965      	bls.n	8001584 <SCH_Add_Task+0x12c>
				newDelay = DELAY - (sumDelay - temp -> next -> Delay);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	4413      	add	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
				temp -> next -> Delay = sumDelay - DELAY;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	1a8a      	subs	r2, r1, r2
 80014d2:	605a      	str	r2, [r3, #4]
				if (container -> emptySlot == 0) {
 80014d4:	4b52      	ldr	r3, [pc, #328]	; (8001620 <SCH_Add_Task+0x1c8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10f      	bne.n	80014fe <SCH_Add_Task+0xa6>
					temp -> next = Add_Node(&temp, pFunction, newDelay, PERIOD);
 80014de:	697c      	ldr	r4, [r7, #20]
 80014e0:	f107 0014 	add.w	r0, r7, #20
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	68f9      	ldr	r1, [r7, #12]
 80014ea:	f7ff ff71 	bl	80013d0 <Add_Node>
 80014ee:	4603      	mov	r3, r0
 80014f0:	60e3      	str	r3, [r4, #12]
					(container -> numSlot)++;
 80014f2:	4b4b      	ldr	r3, [pc, #300]	; (8001620 <SCH_Add_Task+0x1c8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	3201      	adds	r2, #1
 80014fa:	605a      	str	r2, [r3, #4]
                break;
 80014fc:	e08c      	b.n	8001618 <SCH_Add_Task+0x1c0>
					container -> tail -> pTask = pFunction;
 80014fe:	4b48      	ldr	r3, [pc, #288]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	601a      	str	r2, [r3, #0]
					container -> tail -> Delay = newDelay;
 8001508:	4b45      	ldr	r3, [pc, #276]	; (8001620 <SCH_Add_Task+0x1c8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	605a      	str	r2, [r3, #4]
					container -> tail -> Period = PERIOD;
 8001512:	4b43      	ldr	r3, [pc, #268]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	609a      	str	r2, [r3, #8]
					struct sTask *newTail = temp -> next;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	61fb      	str	r3, [r7, #28]
					while (newTail -> next != container -> tail) {
 8001522:	e002      	b.n	800152a <SCH_Add_Task+0xd2>
						newTail = newTail -> next;
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	61fb      	str	r3, [r7, #28]
					while (newTail -> next != container -> tail) {
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	4b3c      	ldr	r3, [pc, #240]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d1f5      	bne.n	8001524 <SCH_Add_Task+0xcc>
					if (temp == container -> tail) container -> tail = newTail;
 8001538:	4b39      	ldr	r3, [pc, #228]	; (8001620 <SCH_Add_Task+0x1c8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	429a      	cmp	r2, r3
 8001542:	d104      	bne.n	800154e <SCH_Add_Task+0xf6>
 8001544:	4b36      	ldr	r3, [pc, #216]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	e014      	b.n	8001578 <SCH_Add_Task+0x120>
						newTail -> next = container -> tail -> next;
 800154e:	4b34      	ldr	r3, [pc, #208]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	60da      	str	r2, [r3, #12]
						container -> tail -> next = temp -> next;
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	4b30      	ldr	r3, [pc, #192]	; (8001620 <SCH_Add_Task+0x1c8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68d2      	ldr	r2, [r2, #12]
 8001564:	60da      	str	r2, [r3, #12]
						temp -> next = container -> tail;
 8001566:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	60da      	str	r2, [r3, #12]
						container -> tail = newTail;
 8001570:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <SCH_Add_Task+0x1c8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	601a      	str	r2, [r3, #0]
                    (container -> emptySlot)--;
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <SCH_Add_Task+0x1c8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	3a01      	subs	r2, #1
 8001580:	609a      	str	r2, [r3, #8]
                break;
 8001582:	e049      	b.n	8001618 <SCH_Add_Task+0x1c0>
                if (temp -> next -> pTask == 0x0000) {
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d113      	bne.n	80015b6 <SCH_Add_Task+0x15e>
					temp -> next -> pTask = pFunction;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	601a      	str	r2, [r3, #0]
					temp -> next -> Delay = DELAY - sumDelay;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	68b9      	ldr	r1, [r7, #8]
 800159c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159e:	1a8a      	subs	r2, r1, r2
 80015a0:	605a      	str	r2, [r3, #4]
					temp -> next -> Period = PERIOD;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	609a      	str	r2, [r3, #8]
                    (container -> emptySlot)--;
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <SCH_Add_Task+0x1c8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	3a01      	subs	r2, #1
 80015b2:	609a      	str	r2, [r3, #8]
					break;
 80015b4:	e030      	b.n	8001618 <SCH_Add_Task+0x1c0>
					if (temp -> next == container -> tail) {
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <SCH_Add_Task+0x1c8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d11b      	bne.n	80015fc <SCH_Add_Task+0x1a4>
						container -> tail -> next = Add_Node(&(container -> tail), pFunction, DELAY - sumDelay, PERIOD);
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <SCH_Add_Task+0x1c8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	1ad2      	subs	r2, r2, r3
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <SCH_Add_Task+0x1c8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681c      	ldr	r4, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68f9      	ldr	r1, [r7, #12]
 80015da:	f7ff fef9 	bl	80013d0 <Add_Node>
 80015de:	4603      	mov	r3, r0
 80015e0:	60e3      	str	r3, [r4, #12]
						container -> tail = container -> tail -> next;
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <SCH_Add_Task+0x1c8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <SCH_Add_Task+0x1c8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68d2      	ldr	r2, [r2, #12]
 80015ee:	601a      	str	r2, [r3, #0]
						(container -> numSlot)++;
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <SCH_Add_Task+0x1c8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	3201      	adds	r2, #1
 80015f8:	605a      	str	r2, [r3, #4]
						break;
 80015fa:	e00d      	b.n	8001618 <SCH_Add_Task+0x1c0>
			temp = temp -> next;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < container -> numSlot; i++) {
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	3301      	adds	r3, #1
 8001606:	623b      	str	r3, [r7, #32]
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <SCH_Add_Task+0x1c8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	6a3a      	ldr	r2, [r7, #32]
 8001610:	429a      	cmp	r2, r3
 8001612:	f6ff af47 	blt.w	80014a4 <SCH_Add_Task+0x4c>
}
 8001616:	e7ff      	b.n	8001618 <SCH_Add_Task+0x1c0>
 8001618:	bf00      	nop
 800161a:	372c      	adds	r7, #44	; 0x2c
 800161c:	46bd      	mov	sp, r7
 800161e:	bd90      	pop	{r4, r7, pc}
 8001620:	2000028c 	.word	0x2000028c

08001624 <SCH_Delete_Task>:

void SCH_Delete_Task(struct sTask** preDel) {
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
    struct sTask* del = (*preDel) -> next;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	60fb      	str	r3, [r7, #12]
    if (del != container -> tail) del -> next -> Delay += del -> Delay;
 8001634:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <SCH_Delete_Task+0xb0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	429a      	cmp	r2, r3
 800163e:	d008      	beq.n	8001652 <SCH_Delete_Task+0x2e>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	6859      	ldr	r1, [r3, #4]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	440a      	add	r2, r1
 8001650:	605a      	str	r2, [r3, #4]
	del -> pTask = 0x0000;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
	del -> Delay = 0;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	605a      	str	r2, [r3, #4]
	del -> Period = 0;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
	if (*preDel == container -> tail)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <SCH_Delete_Task+0xb0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d107      	bne.n	8001682 <SCH_Delete_Task+0x5e>
		container -> tail = container -> tail -> next;
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <SCH_Delete_Task+0xb0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <SCH_Delete_Task+0xb0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68d2      	ldr	r2, [r2, #12]
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e01e      	b.n	80016c0 <SCH_Delete_Task+0x9c>
	else {
		if (del -> next -> pTask != 0 && del != container -> tail) {
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d019      	beq.n	80016c0 <SCH_Delete_Task+0x9c>
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <SCH_Delete_Task+0xb0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d013      	beq.n	80016c0 <SCH_Delete_Task+0x9c>
			(*preDel) -> next = del -> next;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	68d2      	ldr	r2, [r2, #12]
 80016a0:	60da      	str	r2, [r3, #12]
			del -> next = container -> tail -> next;
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <SCH_Delete_Task+0xb0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	60da      	str	r2, [r3, #12]
			container -> tail -> next = del;
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <SCH_Delete_Task+0xb0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	60da      	str	r2, [r3, #12]
			container -> tail = del;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <SCH_Delete_Task+0xb0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	601a      	str	r2, [r3, #0]
		}
	}
	(container -> emptySlot)++;
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <SCH_Delete_Task+0xb0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	3201      	adds	r2, #1
 80016c8:	609a      	str	r2, [r3, #8]
}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	2000028c 	.word	0x2000028c

080016d8 <SCH_Update>:


void SCH_Update(void) {
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
	if (container -> tail) {
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <SCH_Update+0x34>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00d      	beq.n	8001702 <SCH_Update+0x2a>
		if (container -> tail -> next -> Delay > 0)
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <SCH_Update+0x34>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d006      	beq.n	8001702 <SCH_Update+0x2a>
			(container -> tail -> next -> Delay)--;
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <SCH_Update+0x34>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	3a01      	subs	r2, #1
 8001700:	605a      	str	r2, [r3, #4]
	}
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	2000028c 	.word	0x2000028c

08001710 <SCH_Dispatch_Tasks>:


void SCH_Dispatch_Tasks(void) {
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
	while (container -> tail -> next -> Delay <= 0) {
 8001716:	e01b      	b.n	8001750 <SCH_Dispatch_Tasks+0x40>
		(*(container -> tail -> next -> pTask))();
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <SCH_Dispatch_Tasks+0x58>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4798      	blx	r3
		struct sTask temp = *(container -> tail -> next);
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <SCH_Dispatch_Tasks+0x58>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	463c      	mov	r4, r7
 800172e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		SCH_Delete_Task(&(container -> tail));
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <SCH_Dispatch_Tasks+0x58>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff73 	bl	8001624 <SCH_Delete_Task>
		if (temp.Period != 0) {
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <SCH_Dispatch_Tasks+0x40>
			SCH_Add_Task(temp.pTask, temp.Period, temp.Period);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68b9      	ldr	r1, [r7, #8]
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fe84 	bl	8001458 <SCH_Add_Task>
	while (container -> tail -> next -> Delay <= 0) {
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <SCH_Dispatch_Tasks+0x58>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0dc      	beq.n	8001718 <SCH_Dispatch_Tasks+0x8>
		}
	}
}
 800175e:	bf00      	nop
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	bd90      	pop	{r4, r7, pc}
 8001768:	2000028c 	.word	0x2000028c

0800176c <setTimer>:
int timer_counter[NUM_TIMER] = {0};
int timer_flag[NUM_TIMER] = {0};
int timer_duration[NUM_TIMER] = {1000, 250, 0, 0};

// set timer flag and timer counter
void setTimer(int duration, int index){
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIME_CYCLE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a09      	ldr	r2, [pc, #36]	; (80017a0 <setTimer+0x34>)
 800177a:	fb82 1203 	smull	r1, r2, r2, r3
 800177e:	1092      	asrs	r2, r2, #2
 8001780:	17db      	asrs	r3, r3, #31
 8001782:	1ad2      	subs	r2, r2, r3
 8001784:	4907      	ldr	r1, [pc, #28]	; (80017a4 <setTimer+0x38>)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 800178c:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <setTimer+0x3c>)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2100      	movs	r1, #0
 8001792:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	66666667 	.word	0x66666667
 80017a4:	20000158 	.word	0x20000158
 80017a8:	20000168 	.word	0x20000168

080017ac <timerRun>:

void timerRun(){
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_TIMER; i++){
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	e01c      	b.n	80017f2 <timerRun+0x46>
		if (timer_counter[i] > 0){
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <timerRun+0x58>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	dd13      	ble.n	80017ec <timerRun+0x40>
			timer_counter[i]--;
 80017c4:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <timerRun+0x58>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017cc:	1e5a      	subs	r2, r3, #1
 80017ce:	490d      	ldr	r1, [pc, #52]	; (8001804 <timerRun+0x58>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0){
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <timerRun+0x58>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	dc04      	bgt.n	80017ec <timerRun+0x40>
				timer_flag[i] = 1;
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <timerRun+0x5c>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2101      	movs	r1, #1
 80017e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_TIMER; i++){
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3301      	adds	r3, #1
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	dddf      	ble.n	80017b8 <timerRun+0xc>
			}
		}
	}
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	20000158 	.word	0x20000158
 8001808:	20000168 	.word	0x20000168

0800180c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_MspInit+0x5c>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	4a14      	ldr	r2, [pc, #80]	; (8001868 <HAL_MspInit+0x5c>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6193      	str	r3, [r2, #24]
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_MspInit+0x5c>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_MspInit+0x5c>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <HAL_MspInit+0x5c>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001834:	61d3      	str	r3, [r2, #28]
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_MspInit+0x5c>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_MspInit+0x60>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	4a04      	ldr	r2, [pc, #16]	; (800186c <HAL_MspInit+0x60>)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	40021000 	.word	0x40021000
 800186c:	40010000 	.word	0x40010000

08001870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001880:	d114      	bne.n	80018ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_TIM_Base_MspInit+0x68>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <HAL_TIM_Base_MspInit+0x68>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	61d3      	str	r3, [r2, #28]
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_TIM_Base_MspInit+0x68>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	201c      	movs	r0, #28
 80018a0:	f000 fa79 	bl	8001d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018a4:	201c      	movs	r0, #28
 80018a6:	f000 fa92 	bl	8001dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018aa:	e010      	b.n	80018ce <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_TIM_Base_MspInit+0x6c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d10b      	bne.n	80018ce <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_TIM_Base_MspInit+0x68>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_TIM_Base_MspInit+0x68>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	61d3      	str	r3, [r2, #28]
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_TIM_Base_MspInit+0x68>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40000400 	.word	0x40000400

080018e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <HAL_TIM_MspPostInit+0x58>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d117      	bne.n	8001930 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_TIM_MspPostInit+0x5c>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <HAL_TIM_MspPostInit+0x5c>)
 8001906:	f043 0304 	orr.w	r3, r3, #4
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_TIM_MspPostInit+0x5c>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001918:	2340      	movs	r3, #64	; 0x40
 800191a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2302      	movs	r3, #2
 8001922:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	4619      	mov	r1, r3
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <HAL_TIM_MspPostInit+0x60>)
 800192c:	f000 fb1a 	bl	8001f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001930:	bf00      	nop
 8001932:	3720      	adds	r7, #32
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40000400 	.word	0x40000400
 800193c:	40021000 	.word	0x40021000
 8001940:	40010800 	.word	0x40010800

08001944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1f      	ldr	r2, [pc, #124]	; (80019dc <HAL_UART_MspInit+0x98>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d137      	bne.n	80019d4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 800196a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196e:	61d3      	str	r3, [r2, #28]
 8001970:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197c:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001994:	2304      	movs	r3, #4
 8001996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	4619      	mov	r1, r3
 80019a6:	480f      	ldr	r0, [pc, #60]	; (80019e4 <HAL_UART_MspInit+0xa0>)
 80019a8:	f000 fadc 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019ac:	2308      	movs	r3, #8
 80019ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	4619      	mov	r1, r3
 80019be:	4809      	ldr	r0, [pc, #36]	; (80019e4 <HAL_UART_MspInit+0xa0>)
 80019c0:	f000 fad0 	bl	8001f64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	2026      	movs	r0, #38	; 0x26
 80019ca:	f000 f9e4 	bl	8001d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019ce:	2026      	movs	r0, #38	; 0x26
 80019d0:	f000 f9fd 	bl	8001dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019d4:	bf00      	nop
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40004400 	.word	0x40004400
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40010800 	.word	0x40010800

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <NMI_Handler+0x4>

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler+0x4>

080019fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2e:	f000 f8bf 	bl	8001bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <TIM2_IRQHandler+0x10>)
 8001a3e:	f001 f9fd 	bl	8002e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000244 	.word	0x20000244

08001a4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <USART2_IRQHandler+0x10>)
 8001a52:	f002 f885 	bl	8003b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200001cc 	.word	0x200001cc

08001a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a68:	4a14      	ldr	r2, [pc, #80]	; (8001abc <_sbrk+0x5c>)
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <_sbrk+0x60>)
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a74:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <_sbrk+0x64>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <_sbrk+0x68>)
 8001a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d207      	bcs.n	8001aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a90:	f002 fc5e 	bl	8004350 <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	220c      	movs	r2, #12
 8001a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	e009      	b.n	8001ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <_sbrk+0x64>)
 8001ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20002800 	.word	0x20002800
 8001ac0:	00000400 	.word	0x00000400
 8001ac4:	20000178 	.word	0x20000178
 8001ac8:	200002a8 	.word	0x200002a8

08001acc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ad8:	f7ff fff8 	bl	8001acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001adc:	480b      	ldr	r0, [pc, #44]	; (8001b0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ade:	490c      	ldr	r1, [pc, #48]	; (8001b10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ae0:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae4:	e002      	b.n	8001aec <LoopCopyDataInit>

08001ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aea:	3304      	adds	r3, #4

08001aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af0:	d3f9      	bcc.n	8001ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af2:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001af4:	4c09      	ldr	r4, [pc, #36]	; (8001b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af8:	e001      	b.n	8001afe <LoopFillZerobss>

08001afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001afc:	3204      	adds	r2, #4

08001afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b00:	d3fb      	bcc.n	8001afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b02:	f002 fc2b 	bl	800435c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b06:	f7ff f963 	bl	8000dd0 <main>
  bx lr
 8001b0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b10:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8001b14:	08004d8c 	.word	0x08004d8c
  ldr r2, =_sbss
 8001b18:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8001b1c:	200002a4 	.word	0x200002a4

08001b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC1_2_IRQHandler>
	...

08001b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <HAL_Init+0x28>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <HAL_Init+0x28>)
 8001b2e:	f043 0310 	orr.w	r3, r3, #16
 8001b32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b34:	2003      	movs	r0, #3
 8001b36:	f000 f923 	bl	8001d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b3a:	200f      	movs	r0, #15
 8001b3c:	f000 f808 	bl	8001b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b40:	f7ff fe64 	bl	800180c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40022000 	.word	0x40022000

08001b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_InitTick+0x54>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_InitTick+0x58>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 f93b 	bl	8001dea <HAL_SYSTICK_Config>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00e      	b.n	8001b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b0f      	cmp	r3, #15
 8001b82:	d80a      	bhi.n	8001b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b84:	2200      	movs	r2, #0
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f000 f903 	bl	8001d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b90:	4a06      	ldr	r2, [pc, #24]	; (8001bac <HAL_InitTick+0x5c>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e000      	b.n	8001b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200000ac 	.word	0x200000ac
 8001ba8:	200000b4 	.word	0x200000b4
 8001bac:	200000b0 	.word	0x200000b0

08001bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_IncTick+0x1c>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_IncTick+0x20>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a03      	ldr	r2, [pc, #12]	; (8001bd0 <HAL_IncTick+0x20>)
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	200000b4 	.word	0x200000b4
 8001bd0:	20000290 	.word	0x20000290

08001bd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd8:	4b02      	ldr	r3, [pc, #8]	; (8001be4 <HAL_GetTick+0x10>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	20000290 	.word	0x20000290

08001be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4906      	ldr	r1, [pc, #24]	; (8001c80 <__NVIC_EnableIRQ+0x34>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0a      	blt.n	8001cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	490c      	ldr	r1, [pc, #48]	; (8001cd0 <__NVIC_SetPriority+0x4c>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	0112      	lsls	r2, r2, #4
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cac:	e00a      	b.n	8001cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <__NVIC_SetPriority+0x50>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf28      	it	cs
 8001cf6:	2304      	movcs	r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <NVIC_EncodePriority+0x30>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	e000      	b.n	8001d0a <NVIC_EncodePriority+0x32>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	4313      	orrs	r3, r2
         );
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d4c:	d301      	bcc.n	8001d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00f      	b.n	8001d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <SysTick_Config+0x40>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5a:	210f      	movs	r1, #15
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f7ff ff90 	bl	8001c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <SysTick_Config+0x40>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <SysTick_Config+0x40>)
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	e000e010 	.word	0xe000e010

08001d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff2d 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da8:	f7ff ff42 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	6978      	ldr	r0, [r7, #20]
 8001db4:	f7ff ff90 	bl	8001cd8 <NVIC_EncodePriority>
 8001db8:	4602      	mov	r2, r0
 8001dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff5f 	bl	8001c84 <__NVIC_SetPriority>
}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff35 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff ffa2 	bl	8001d3c <SysTick_Config>
 8001df8:	4603      	mov	r3, r0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b085      	sub	sp, #20
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d008      	beq.n	8001e2a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e020      	b.n	8001e6c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 020e 	bic.w	r2, r2, #14
 8001e38:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0201 	bic.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e52:	2101      	movs	r1, #1
 8001e54:	fa01 f202 	lsl.w	r2, r1, r2
 8001e58:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d005      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2204      	movs	r2, #4
 8001e92:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e051      	b.n	8001f3e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 020e 	bic.w	r2, r2, #14
 8001ea8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a22      	ldr	r2, [pc, #136]	; (8001f48 <HAL_DMA_Abort_IT+0xd0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d029      	beq.n	8001f18 <HAL_DMA_Abort_IT+0xa0>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a20      	ldr	r2, [pc, #128]	; (8001f4c <HAL_DMA_Abort_IT+0xd4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d022      	beq.n	8001f14 <HAL_DMA_Abort_IT+0x9c>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a1f      	ldr	r2, [pc, #124]	; (8001f50 <HAL_DMA_Abort_IT+0xd8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d01a      	beq.n	8001f0e <HAL_DMA_Abort_IT+0x96>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1d      	ldr	r2, [pc, #116]	; (8001f54 <HAL_DMA_Abort_IT+0xdc>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d012      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x90>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a1c      	ldr	r2, [pc, #112]	; (8001f58 <HAL_DMA_Abort_IT+0xe0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d00a      	beq.n	8001f02 <HAL_DMA_Abort_IT+0x8a>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1a      	ldr	r2, [pc, #104]	; (8001f5c <HAL_DMA_Abort_IT+0xe4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d102      	bne.n	8001efc <HAL_DMA_Abort_IT+0x84>
 8001ef6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001efa:	e00e      	b.n	8001f1a <HAL_DMA_Abort_IT+0xa2>
 8001efc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f00:	e00b      	b.n	8001f1a <HAL_DMA_Abort_IT+0xa2>
 8001f02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f06:	e008      	b.n	8001f1a <HAL_DMA_Abort_IT+0xa2>
 8001f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0c:	e005      	b.n	8001f1a <HAL_DMA_Abort_IT+0xa2>
 8001f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f12:	e002      	b.n	8001f1a <HAL_DMA_Abort_IT+0xa2>
 8001f14:	2310      	movs	r3, #16
 8001f16:	e000      	b.n	8001f1a <HAL_DMA_Abort_IT+0xa2>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	4a11      	ldr	r2, [pc, #68]	; (8001f60 <HAL_DMA_Abort_IT+0xe8>)
 8001f1c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	4798      	blx	r3
    } 
  }
  return status;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40020008 	.word	0x40020008
 8001f4c:	4002001c 	.word	0x4002001c
 8001f50:	40020030 	.word	0x40020030
 8001f54:	40020044 	.word	0x40020044
 8001f58:	40020058 	.word	0x40020058
 8001f5c:	4002006c 	.word	0x4002006c
 8001f60:	40020000 	.word	0x40020000

08001f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b08b      	sub	sp, #44	; 0x2c
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f76:	e148      	b.n	800220a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	f040 8137 	bne.w	8002204 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4aa3      	ldr	r2, [pc, #652]	; (8002228 <HAL_GPIO_Init+0x2c4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d05e      	beq.n	800205e <HAL_GPIO_Init+0xfa>
 8001fa0:	4aa1      	ldr	r2, [pc, #644]	; (8002228 <HAL_GPIO_Init+0x2c4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d875      	bhi.n	8002092 <HAL_GPIO_Init+0x12e>
 8001fa6:	4aa1      	ldr	r2, [pc, #644]	; (800222c <HAL_GPIO_Init+0x2c8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d058      	beq.n	800205e <HAL_GPIO_Init+0xfa>
 8001fac:	4a9f      	ldr	r2, [pc, #636]	; (800222c <HAL_GPIO_Init+0x2c8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d86f      	bhi.n	8002092 <HAL_GPIO_Init+0x12e>
 8001fb2:	4a9f      	ldr	r2, [pc, #636]	; (8002230 <HAL_GPIO_Init+0x2cc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d052      	beq.n	800205e <HAL_GPIO_Init+0xfa>
 8001fb8:	4a9d      	ldr	r2, [pc, #628]	; (8002230 <HAL_GPIO_Init+0x2cc>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d869      	bhi.n	8002092 <HAL_GPIO_Init+0x12e>
 8001fbe:	4a9d      	ldr	r2, [pc, #628]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d04c      	beq.n	800205e <HAL_GPIO_Init+0xfa>
 8001fc4:	4a9b      	ldr	r2, [pc, #620]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d863      	bhi.n	8002092 <HAL_GPIO_Init+0x12e>
 8001fca:	4a9b      	ldr	r2, [pc, #620]	; (8002238 <HAL_GPIO_Init+0x2d4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d046      	beq.n	800205e <HAL_GPIO_Init+0xfa>
 8001fd0:	4a99      	ldr	r2, [pc, #612]	; (8002238 <HAL_GPIO_Init+0x2d4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d85d      	bhi.n	8002092 <HAL_GPIO_Init+0x12e>
 8001fd6:	2b12      	cmp	r3, #18
 8001fd8:	d82a      	bhi.n	8002030 <HAL_GPIO_Init+0xcc>
 8001fda:	2b12      	cmp	r3, #18
 8001fdc:	d859      	bhi.n	8002092 <HAL_GPIO_Init+0x12e>
 8001fde:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <HAL_GPIO_Init+0x80>)
 8001fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe4:	0800205f 	.word	0x0800205f
 8001fe8:	08002039 	.word	0x08002039
 8001fec:	0800204b 	.word	0x0800204b
 8001ff0:	0800208d 	.word	0x0800208d
 8001ff4:	08002093 	.word	0x08002093
 8001ff8:	08002093 	.word	0x08002093
 8001ffc:	08002093 	.word	0x08002093
 8002000:	08002093 	.word	0x08002093
 8002004:	08002093 	.word	0x08002093
 8002008:	08002093 	.word	0x08002093
 800200c:	08002093 	.word	0x08002093
 8002010:	08002093 	.word	0x08002093
 8002014:	08002093 	.word	0x08002093
 8002018:	08002093 	.word	0x08002093
 800201c:	08002093 	.word	0x08002093
 8002020:	08002093 	.word	0x08002093
 8002024:	08002093 	.word	0x08002093
 8002028:	08002041 	.word	0x08002041
 800202c:	08002055 	.word	0x08002055
 8002030:	4a82      	ldr	r2, [pc, #520]	; (800223c <HAL_GPIO_Init+0x2d8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002036:	e02c      	b.n	8002092 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	623b      	str	r3, [r7, #32]
          break;
 800203e:	e029      	b.n	8002094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	3304      	adds	r3, #4
 8002046:	623b      	str	r3, [r7, #32]
          break;
 8002048:	e024      	b.n	8002094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	3308      	adds	r3, #8
 8002050:	623b      	str	r3, [r7, #32]
          break;
 8002052:	e01f      	b.n	8002094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	330c      	adds	r3, #12
 800205a:	623b      	str	r3, [r7, #32]
          break;
 800205c:	e01a      	b.n	8002094 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002066:	2304      	movs	r3, #4
 8002068:	623b      	str	r3, [r7, #32]
          break;
 800206a:	e013      	b.n	8002094 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d105      	bne.n	8002080 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002074:	2308      	movs	r3, #8
 8002076:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	611a      	str	r2, [r3, #16]
          break;
 800207e:	e009      	b.n	8002094 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002080:	2308      	movs	r3, #8
 8002082:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	615a      	str	r2, [r3, #20]
          break;
 800208a:	e003      	b.n	8002094 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
          break;
 8002090:	e000      	b.n	8002094 <HAL_GPIO_Init+0x130>
          break;
 8002092:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2bff      	cmp	r3, #255	; 0xff
 8002098:	d801      	bhi.n	800209e <HAL_GPIO_Init+0x13a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	e001      	b.n	80020a2 <HAL_GPIO_Init+0x13e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3304      	adds	r3, #4
 80020a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2bff      	cmp	r3, #255	; 0xff
 80020a8:	d802      	bhi.n	80020b0 <HAL_GPIO_Init+0x14c>
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	e002      	b.n	80020b6 <HAL_GPIO_Init+0x152>
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	3b08      	subs	r3, #8
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	210f      	movs	r1, #15
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	401a      	ands	r2, r3
 80020c8:	6a39      	ldr	r1, [r7, #32]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	431a      	orrs	r2, r3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 8090 	beq.w	8002204 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020e4:	4b56      	ldr	r3, [pc, #344]	; (8002240 <HAL_GPIO_Init+0x2dc>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a55      	ldr	r2, [pc, #340]	; (8002240 <HAL_GPIO_Init+0x2dc>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b53      	ldr	r3, [pc, #332]	; (8002240 <HAL_GPIO_Init+0x2dc>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020fc:	4a51      	ldr	r2, [pc, #324]	; (8002244 <HAL_GPIO_Init+0x2e0>)
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	089b      	lsrs	r3, r3, #2
 8002102:	3302      	adds	r3, #2
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	220f      	movs	r2, #15
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4013      	ands	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a49      	ldr	r2, [pc, #292]	; (8002248 <HAL_GPIO_Init+0x2e4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d00d      	beq.n	8002144 <HAL_GPIO_Init+0x1e0>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a48      	ldr	r2, [pc, #288]	; (800224c <HAL_GPIO_Init+0x2e8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d007      	beq.n	8002140 <HAL_GPIO_Init+0x1dc>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a47      	ldr	r2, [pc, #284]	; (8002250 <HAL_GPIO_Init+0x2ec>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d101      	bne.n	800213c <HAL_GPIO_Init+0x1d8>
 8002138:	2302      	movs	r3, #2
 800213a:	e004      	b.n	8002146 <HAL_GPIO_Init+0x1e2>
 800213c:	2303      	movs	r3, #3
 800213e:	e002      	b.n	8002146 <HAL_GPIO_Init+0x1e2>
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <HAL_GPIO_Init+0x1e2>
 8002144:	2300      	movs	r3, #0
 8002146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002148:	f002 0203 	and.w	r2, r2, #3
 800214c:	0092      	lsls	r2, r2, #2
 800214e:	4093      	lsls	r3, r2
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002156:	493b      	ldr	r1, [pc, #236]	; (8002244 <HAL_GPIO_Init+0x2e0>)
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	3302      	adds	r3, #2
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002170:	4b38      	ldr	r3, [pc, #224]	; (8002254 <HAL_GPIO_Init+0x2f0>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4937      	ldr	r1, [pc, #220]	; (8002254 <HAL_GPIO_Init+0x2f0>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]
 800217c:	e006      	b.n	800218c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800217e:	4b35      	ldr	r3, [pc, #212]	; (8002254 <HAL_GPIO_Init+0x2f0>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	43db      	mvns	r3, r3
 8002186:	4933      	ldr	r1, [pc, #204]	; (8002254 <HAL_GPIO_Init+0x2f0>)
 8002188:	4013      	ands	r3, r2
 800218a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d006      	beq.n	80021a6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002198:	4b2e      	ldr	r3, [pc, #184]	; (8002254 <HAL_GPIO_Init+0x2f0>)
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	492d      	ldr	r1, [pc, #180]	; (8002254 <HAL_GPIO_Init+0x2f0>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
 80021a4:	e006      	b.n	80021b4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021a6:	4b2b      	ldr	r3, [pc, #172]	; (8002254 <HAL_GPIO_Init+0x2f0>)
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	4929      	ldr	r1, [pc, #164]	; (8002254 <HAL_GPIO_Init+0x2f0>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d006      	beq.n	80021ce <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021c0:	4b24      	ldr	r3, [pc, #144]	; (8002254 <HAL_GPIO_Init+0x2f0>)
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	4923      	ldr	r1, [pc, #140]	; (8002254 <HAL_GPIO_Init+0x2f0>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	608b      	str	r3, [r1, #8]
 80021cc:	e006      	b.n	80021dc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021ce:	4b21      	ldr	r3, [pc, #132]	; (8002254 <HAL_GPIO_Init+0x2f0>)
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	491f      	ldr	r1, [pc, #124]	; (8002254 <HAL_GPIO_Init+0x2f0>)
 80021d8:	4013      	ands	r3, r2
 80021da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d006      	beq.n	80021f6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021e8:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <HAL_GPIO_Init+0x2f0>)
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	4919      	ldr	r1, [pc, #100]	; (8002254 <HAL_GPIO_Init+0x2f0>)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60cb      	str	r3, [r1, #12]
 80021f4:	e006      	b.n	8002204 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <HAL_GPIO_Init+0x2f0>)
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	4915      	ldr	r1, [pc, #84]	; (8002254 <HAL_GPIO_Init+0x2f0>)
 8002200:	4013      	ands	r3, r2
 8002202:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	3301      	adds	r3, #1
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	f47f aeaf 	bne.w	8001f78 <HAL_GPIO_Init+0x14>
  }
}
 800221a:	bf00      	nop
 800221c:	bf00      	nop
 800221e:	372c      	adds	r7, #44	; 0x2c
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	10320000 	.word	0x10320000
 800222c:	10310000 	.word	0x10310000
 8002230:	10220000 	.word	0x10220000
 8002234:	10210000 	.word	0x10210000
 8002238:	10120000 	.word	0x10120000
 800223c:	10110000 	.word	0x10110000
 8002240:	40021000 	.word	0x40021000
 8002244:	40010000 	.word	0x40010000
 8002248:	40010800 	.word	0x40010800
 800224c:	40010c00 	.word	0x40010c00
 8002250:	40011000 	.word	0x40011000
 8002254:	40010400 	.word	0x40010400

08002258 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	887b      	ldrh	r3, [r7, #2]
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	e001      	b.n	800227a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800227a:	7bfb      	ldrb	r3, [r7, #15]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr

08002286 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	460b      	mov	r3, r1
 8002290:	807b      	strh	r3, [r7, #2]
 8002292:	4613      	mov	r3, r2
 8002294:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002296:	787b      	ldrb	r3, [r7, #1]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800229c:	887a      	ldrh	r2, [r7, #2]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022a2:	e003      	b.n	80022ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022a4:	887b      	ldrh	r3, [r7, #2]
 80022a6:	041a      	lsls	r2, r3, #16
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	611a      	str	r2, [r3, #16]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b085      	sub	sp, #20
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022c8:	887a      	ldrh	r2, [r7, #2]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4013      	ands	r3, r2
 80022ce:	041a      	lsls	r2, r3, #16
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	43d9      	mvns	r1, r3
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	400b      	ands	r3, r1
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	611a      	str	r2, [r3, #16]
}
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e26c      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 8087 	beq.w	8002416 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002308:	4b92      	ldr	r3, [pc, #584]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b04      	cmp	r3, #4
 8002312:	d00c      	beq.n	800232e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002314:	4b8f      	ldr	r3, [pc, #572]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b08      	cmp	r3, #8
 800231e:	d112      	bne.n	8002346 <HAL_RCC_OscConfig+0x5e>
 8002320:	4b8c      	ldr	r3, [pc, #560]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800232c:	d10b      	bne.n	8002346 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232e:	4b89      	ldr	r3, [pc, #548]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d06c      	beq.n	8002414 <HAL_RCC_OscConfig+0x12c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d168      	bne.n	8002414 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e246      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234e:	d106      	bne.n	800235e <HAL_RCC_OscConfig+0x76>
 8002350:	4b80      	ldr	r3, [pc, #512]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a7f      	ldr	r2, [pc, #508]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	e02e      	b.n	80023bc <HAL_RCC_OscConfig+0xd4>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x98>
 8002366:	4b7b      	ldr	r3, [pc, #492]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a7a      	ldr	r2, [pc, #488]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 800236c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b78      	ldr	r3, [pc, #480]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a77      	ldr	r2, [pc, #476]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002378:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e01d      	b.n	80023bc <HAL_RCC_OscConfig+0xd4>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002388:	d10c      	bne.n	80023a4 <HAL_RCC_OscConfig+0xbc>
 800238a:	4b72      	ldr	r3, [pc, #456]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a71      	ldr	r2, [pc, #452]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	4b6f      	ldr	r3, [pc, #444]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a6e      	ldr	r2, [pc, #440]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e00b      	b.n	80023bc <HAL_RCC_OscConfig+0xd4>
 80023a4:	4b6b      	ldr	r3, [pc, #428]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a6a      	ldr	r2, [pc, #424]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 80023aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b68      	ldr	r3, [pc, #416]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a67      	ldr	r2, [pc, #412]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 80023b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d013      	beq.n	80023ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7ff fc06 	bl	8001bd4 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023cc:	f7ff fc02 	bl	8001bd4 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1fa      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	4b5d      	ldr	r3, [pc, #372]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0xe4>
 80023ea:	e014      	b.n	8002416 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7ff fbf2 	bl	8001bd4 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f4:	f7ff fbee 	bl	8001bd4 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e1e6      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002406:	4b53      	ldr	r3, [pc, #332]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x10c>
 8002412:	e000      	b.n	8002416 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d063      	beq.n	80024ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002422:	4b4c      	ldr	r3, [pc, #304]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00b      	beq.n	8002446 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800242e:	4b49      	ldr	r3, [pc, #292]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b08      	cmp	r3, #8
 8002438:	d11c      	bne.n	8002474 <HAL_RCC_OscConfig+0x18c>
 800243a:	4b46      	ldr	r3, [pc, #280]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d116      	bne.n	8002474 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002446:	4b43      	ldr	r3, [pc, #268]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_RCC_OscConfig+0x176>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d001      	beq.n	800245e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e1ba      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245e:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4939      	ldr	r1, [pc, #228]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	e03a      	b.n	80024ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d020      	beq.n	80024be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800247c:	4b36      	ldr	r3, [pc, #216]	; (8002558 <HAL_RCC_OscConfig+0x270>)
 800247e:	2201      	movs	r2, #1
 8002480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002482:	f7ff fba7 	bl	8001bd4 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248a:	f7ff fba3 	bl	8001bd4 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e19b      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a8:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4927      	ldr	r1, [pc, #156]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]
 80024bc:	e015      	b.n	80024ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024be:	4b26      	ldr	r3, [pc, #152]	; (8002558 <HAL_RCC_OscConfig+0x270>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7ff fb86 	bl	8001bd4 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024cc:	f7ff fb82 	bl	8001bd4 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e17a      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d03a      	beq.n	800256c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d019      	beq.n	8002532 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fe:	4b17      	ldr	r3, [pc, #92]	; (800255c <HAL_RCC_OscConfig+0x274>)
 8002500:	2201      	movs	r2, #1
 8002502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002504:	f7ff fb66 	bl	8001bd4 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250c:	f7ff fb62 	bl	8001bd4 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e15a      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251e:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800252a:	2001      	movs	r0, #1
 800252c:	f000 fad8 	bl	8002ae0 <RCC_Delay>
 8002530:	e01c      	b.n	800256c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_RCC_OscConfig+0x274>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002538:	f7ff fb4c 	bl	8001bd4 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253e:	e00f      	b.n	8002560 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002540:	f7ff fb48 	bl	8001bd4 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d908      	bls.n	8002560 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e140      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	42420000 	.word	0x42420000
 800255c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002560:	4b9e      	ldr	r3, [pc, #632]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1e9      	bne.n	8002540 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80a6 	beq.w	80026c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257e:	4b97      	ldr	r3, [pc, #604]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10d      	bne.n	80025a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	4b94      	ldr	r3, [pc, #592]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a93      	ldr	r2, [pc, #588]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002594:	61d3      	str	r3, [r2, #28]
 8002596:	4b91      	ldr	r3, [pc, #580]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a2:	2301      	movs	r3, #1
 80025a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a6:	4b8e      	ldr	r3, [pc, #568]	; (80027e0 <HAL_RCC_OscConfig+0x4f8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d118      	bne.n	80025e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b2:	4b8b      	ldr	r3, [pc, #556]	; (80027e0 <HAL_RCC_OscConfig+0x4f8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a8a      	ldr	r2, [pc, #552]	; (80027e0 <HAL_RCC_OscConfig+0x4f8>)
 80025b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025be:	f7ff fb09 	bl	8001bd4 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c6:	f7ff fb05 	bl	8001bd4 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b64      	cmp	r3, #100	; 0x64
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e0fd      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	4b81      	ldr	r3, [pc, #516]	; (80027e0 <HAL_RCC_OscConfig+0x4f8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x312>
 80025ec:	4b7b      	ldr	r3, [pc, #492]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	4a7a      	ldr	r2, [pc, #488]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6213      	str	r3, [r2, #32]
 80025f8:	e02d      	b.n	8002656 <HAL_RCC_OscConfig+0x36e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x334>
 8002602:	4b76      	ldr	r3, [pc, #472]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	4a75      	ldr	r2, [pc, #468]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002608:	f023 0301 	bic.w	r3, r3, #1
 800260c:	6213      	str	r3, [r2, #32]
 800260e:	4b73      	ldr	r3, [pc, #460]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	4a72      	ldr	r2, [pc, #456]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002614:	f023 0304 	bic.w	r3, r3, #4
 8002618:	6213      	str	r3, [r2, #32]
 800261a:	e01c      	b.n	8002656 <HAL_RCC_OscConfig+0x36e>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b05      	cmp	r3, #5
 8002622:	d10c      	bne.n	800263e <HAL_RCC_OscConfig+0x356>
 8002624:	4b6d      	ldr	r3, [pc, #436]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	4a6c      	ldr	r2, [pc, #432]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800262a:	f043 0304 	orr.w	r3, r3, #4
 800262e:	6213      	str	r3, [r2, #32]
 8002630:	4b6a      	ldr	r3, [pc, #424]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4a69      	ldr	r2, [pc, #420]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6213      	str	r3, [r2, #32]
 800263c:	e00b      	b.n	8002656 <HAL_RCC_OscConfig+0x36e>
 800263e:	4b67      	ldr	r3, [pc, #412]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	4a66      	ldr	r2, [pc, #408]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	6213      	str	r3, [r2, #32]
 800264a:	4b64      	ldr	r3, [pc, #400]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	4a63      	ldr	r2, [pc, #396]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002650:	f023 0304 	bic.w	r3, r3, #4
 8002654:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d015      	beq.n	800268a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265e:	f7ff fab9 	bl	8001bd4 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002664:	e00a      	b.n	800267c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002666:	f7ff fab5 	bl	8001bd4 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	f241 3288 	movw	r2, #5000	; 0x1388
 8002674:	4293      	cmp	r3, r2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e0ab      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267c:	4b57      	ldr	r3, [pc, #348]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0ee      	beq.n	8002666 <HAL_RCC_OscConfig+0x37e>
 8002688:	e014      	b.n	80026b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268a:	f7ff faa3 	bl	8001bd4 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002690:	e00a      	b.n	80026a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002692:	f7ff fa9f 	bl	8001bd4 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e095      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a8:	4b4c      	ldr	r3, [pc, #304]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1ee      	bne.n	8002692 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026b4:	7dfb      	ldrb	r3, [r7, #23]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d105      	bne.n	80026c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ba:	4b48      	ldr	r3, [pc, #288]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	4a47      	ldr	r2, [pc, #284]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 8081 	beq.w	80027d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d0:	4b42      	ldr	r3, [pc, #264]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d061      	beq.n	80027a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d146      	bne.n	8002772 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e4:	4b3f      	ldr	r3, [pc, #252]	; (80027e4 <HAL_RCC_OscConfig+0x4fc>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ea:	f7ff fa73 	bl	8001bd4 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f2:	f7ff fa6f 	bl	8001bd4 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e067      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002704:	4b35      	ldr	r3, [pc, #212]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002718:	d108      	bne.n	800272c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800271a:	4b30      	ldr	r3, [pc, #192]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	492d      	ldr	r1, [pc, #180]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800272c:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a19      	ldr	r1, [r3, #32]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	430b      	orrs	r3, r1
 800273e:	4927      	ldr	r1, [pc, #156]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <HAL_RCC_OscConfig+0x4fc>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7ff fa43 	bl	8001bd4 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002752:	f7ff fa3f 	bl	8001bd4 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e037      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002764:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x46a>
 8002770:	e02f      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <HAL_RCC_OscConfig+0x4fc>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7ff fa2c 	bl	8001bd4 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002780:	f7ff fa28 	bl	8001bd4 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e020      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x498>
 800279e:	e018      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e013      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d106      	bne.n	80027ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40007000 	.word	0x40007000
 80027e4:	42420060 	.word	0x42420060

080027e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0d0      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027fc:	4b6a      	ldr	r3, [pc, #424]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d910      	bls.n	800282c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b67      	ldr	r3, [pc, #412]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 0207 	bic.w	r2, r3, #7
 8002812:	4965      	ldr	r1, [pc, #404]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b63      	ldr	r3, [pc, #396]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0b8      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d020      	beq.n	800287a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002844:	4b59      	ldr	r3, [pc, #356]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4a58      	ldr	r2, [pc, #352]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800284e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800285c:	4b53      	ldr	r3, [pc, #332]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4a52      	ldr	r2, [pc, #328]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002866:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002868:	4b50      	ldr	r3, [pc, #320]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	494d      	ldr	r1, [pc, #308]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	4313      	orrs	r3, r2
 8002878:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d040      	beq.n	8002908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b47      	ldr	r3, [pc, #284]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d115      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e07f      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a6:	4b41      	ldr	r3, [pc, #260]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e073      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b6:	4b3d      	ldr	r3, [pc, #244]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e06b      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c6:	4b39      	ldr	r3, [pc, #228]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f023 0203 	bic.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4936      	ldr	r1, [pc, #216]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d8:	f7ff f97c 	bl	8001bd4 <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e0:	f7ff f978 	bl	8001bd4 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e053      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	4b2d      	ldr	r3, [pc, #180]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 020c 	and.w	r2, r3, #12
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	429a      	cmp	r2, r3
 8002906:	d1eb      	bne.n	80028e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002908:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d210      	bcs.n	8002938 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 0207 	bic.w	r2, r3, #7
 800291e:	4922      	ldr	r1, [pc, #136]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e032      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4916      	ldr	r1, [pc, #88]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002962:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	490e      	ldr	r1, [pc, #56]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002976:	f000 f821 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 800297a:	4602      	mov	r2, r0
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	490a      	ldr	r1, [pc, #40]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002988:	5ccb      	ldrb	r3, [r1, r3]
 800298a:	fa22 f303 	lsr.w	r3, r2, r3
 800298e:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff f8da 	bl	8001b50 <HAL_InitTick>

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40022000 	.word	0x40022000
 80029ac:	40021000 	.word	0x40021000
 80029b0:	08004d38 	.word	0x08004d38
 80029b4:	200000ac 	.word	0x200000ac
 80029b8:	200000b0 	.word	0x200000b0

080029bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029bc:	b490      	push	{r4, r7}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029c2:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xb0>)
 80029c4:	1d3c      	adds	r4, r7, #4
 80029c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029cc:	f240 2301 	movw	r3, #513	; 0x201
 80029d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
 80029d6:	2300      	movs	r3, #0
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	2300      	movs	r3, #0
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029e6:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d002      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0x40>
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d003      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0x46>
 80029fa:	e02d      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029fe:	623b      	str	r3, [r7, #32]
      break;
 8002a00:	e02d      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	0c9b      	lsrs	r3, r3, #18
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a0e:	4413      	add	r3, r2
 8002a10:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a14:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a20:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	0c5b      	lsrs	r3, r3, #17
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a2e:	4413      	add	r3, r2
 8002a30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a34:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a3a:	fb02 f203 	mul.w	r2, r2, r3
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
 8002a46:	e004      	b.n	8002a52 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	4a0b      	ldr	r2, [pc, #44]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a4c:	fb02 f303 	mul.w	r3, r2, r3
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	623b      	str	r3, [r7, #32]
      break;
 8002a56:	e002      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a5a:	623b      	str	r3, [r7, #32]
      break;
 8002a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3728      	adds	r7, #40	; 0x28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc90      	pop	{r4, r7}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	08004d28 	.word	0x08004d28
 8002a70:	40021000 	.word	0x40021000
 8002a74:	007a1200 	.word	0x007a1200
 8002a78:	003d0900 	.word	0x003d0900

08002a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a80:	4b02      	ldr	r3, [pc, #8]	; (8002a8c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	200000ac 	.word	0x200000ac

08002a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a94:	f7ff fff2 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	08004d48 	.word	0x08004d48

08002ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002abc:	f7ff ffde 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	0adb      	lsrs	r3, r3, #11
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	; (8002adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	08004d48 	.word	0x08004d48

08002ae0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <RCC_Delay+0x34>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <RCC_Delay+0x38>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	0a5b      	lsrs	r3, r3, #9
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002afc:	bf00      	nop
  }
  while (Delay --);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1e5a      	subs	r2, r3, #1
 8002b02:	60fa      	str	r2, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f9      	bne.n	8002afc <RCC_Delay+0x1c>
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	200000ac 	.word	0x200000ac
 8002b18:	10624dd3 	.word	0x10624dd3

08002b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e041      	b.n	8002bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fe fe94 	bl	8001870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3304      	adds	r3, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f000 fc1c 	bl	8003398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d001      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e035      	b.n	8002c40 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a16      	ldr	r2, [pc, #88]	; (8002c4c <HAL_TIM_Base_Start_IT+0x90>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d009      	beq.n	8002c0a <HAL_TIM_Base_Start_IT+0x4e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfe:	d004      	beq.n	8002c0a <HAL_TIM_Base_Start_IT+0x4e>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a12      	ldr	r2, [pc, #72]	; (8002c50 <HAL_TIM_Base_Start_IT+0x94>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d111      	bne.n	8002c2e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b06      	cmp	r3, #6
 8002c1a:	d010      	beq.n	8002c3e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2c:	e007      	b.n	8002c3e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40012c00 	.word	0x40012c00
 8002c50:	40000400 	.word	0x40000400

08002c54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e041      	b.n	8002cea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f839 	bl	8002cf2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	4619      	mov	r1, r3
 8002c92:	4610      	mov	r0, r2
 8002c94:	f000 fb80 	bl	8003398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d109      	bne.n	8002d28 <HAL_TIM_PWM_Start+0x24>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	e022      	b.n	8002d6e <HAL_TIM_PWM_Start+0x6a>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d109      	bne.n	8002d42 <HAL_TIM_PWM_Start+0x3e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	bf14      	ite	ne
 8002d3a:	2301      	movne	r3, #1
 8002d3c:	2300      	moveq	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	e015      	b.n	8002d6e <HAL_TIM_PWM_Start+0x6a>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d109      	bne.n	8002d5c <HAL_TIM_PWM_Start+0x58>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	bf14      	ite	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	2300      	moveq	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	e008      	b.n	8002d6e <HAL_TIM_PWM_Start+0x6a>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	bf14      	ite	ne
 8002d68:	2301      	movne	r3, #1
 8002d6a:	2300      	moveq	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e059      	b.n	8002e2a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d104      	bne.n	8002d86 <HAL_TIM_PWM_Start+0x82>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d84:	e013      	b.n	8002dae <HAL_TIM_PWM_Start+0xaa>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d104      	bne.n	8002d96 <HAL_TIM_PWM_Start+0x92>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d94:	e00b      	b.n	8002dae <HAL_TIM_PWM_Start+0xaa>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d104      	bne.n	8002da6 <HAL_TIM_PWM_Start+0xa2>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002da4:	e003      	b.n	8002dae <HAL_TIM_PWM_Start+0xaa>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2202      	movs	r2, #2
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2201      	movs	r2, #1
 8002db4:	6839      	ldr	r1, [r7, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fd64 	bl	8003884 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1c      	ldr	r2, [pc, #112]	; (8002e34 <HAL_TIM_PWM_Start+0x130>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d107      	bne.n	8002dd6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a16      	ldr	r2, [pc, #88]	; (8002e34 <HAL_TIM_PWM_Start+0x130>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d009      	beq.n	8002df4 <HAL_TIM_PWM_Start+0xf0>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de8:	d004      	beq.n	8002df4 <HAL_TIM_PWM_Start+0xf0>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <HAL_TIM_PWM_Start+0x134>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d111      	bne.n	8002e18 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	d010      	beq.n	8002e28 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0201 	orr.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e16:	e007      	b.n	8002e28 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40012c00 	.word	0x40012c00
 8002e38:	40000400 	.word	0x40000400

08002e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d122      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d11b      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0202 	mvn.w	r2, #2
 8002e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fa6f 	bl	8003362 <HAL_TIM_IC_CaptureCallback>
 8002e84:	e005      	b.n	8002e92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fa62 	bl	8003350 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 fa71 	bl	8003374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d122      	bne.n	8002eec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d11b      	bne.n	8002eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0204 	mvn.w	r2, #4
 8002ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fa45 	bl	8003362 <HAL_TIM_IC_CaptureCallback>
 8002ed8:	e005      	b.n	8002ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fa38 	bl	8003350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fa47 	bl	8003374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d122      	bne.n	8002f40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d11b      	bne.n	8002f40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0208 	mvn.w	r2, #8
 8002f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2204      	movs	r2, #4
 8002f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fa1b 	bl	8003362 <HAL_TIM_IC_CaptureCallback>
 8002f2c:	e005      	b.n	8002f3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fa0e 	bl	8003350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fa1d 	bl	8003374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b10      	cmp	r3, #16
 8002f4c:	d122      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b10      	cmp	r3, #16
 8002f5a:	d11b      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f06f 0210 	mvn.w	r2, #16
 8002f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2208      	movs	r2, #8
 8002f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f9f1 	bl	8003362 <HAL_TIM_IC_CaptureCallback>
 8002f80:	e005      	b.n	8002f8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f9e4 	bl	8003350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f9f3 	bl	8003374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d10e      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d107      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0201 	mvn.w	r2, #1
 8002fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fe f8d4 	bl	8001168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fca:	2b80      	cmp	r3, #128	; 0x80
 8002fcc:	d10e      	bne.n	8002fec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd8:	2b80      	cmp	r3, #128	; 0x80
 8002fda:	d107      	bne.n	8002fec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fcd1 	bl	800398e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff6:	2b40      	cmp	r3, #64	; 0x40
 8002ff8:	d10e      	bne.n	8003018 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003004:	2b40      	cmp	r3, #64	; 0x40
 8003006:	d107      	bne.n	8003018 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f9b7 	bl	8003386 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b20      	cmp	r3, #32
 8003024:	d10e      	bne.n	8003044 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b20      	cmp	r3, #32
 8003032:	d107      	bne.n	8003044 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0220 	mvn.w	r2, #32
 800303c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fc9c 	bl	800397c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003062:	2302      	movs	r3, #2
 8003064:	e0ac      	b.n	80031c0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b0c      	cmp	r3, #12
 8003072:	f200 809f 	bhi.w	80031b4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003076:	a201      	add	r2, pc, #4	; (adr r2, 800307c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307c:	080030b1 	.word	0x080030b1
 8003080:	080031b5 	.word	0x080031b5
 8003084:	080031b5 	.word	0x080031b5
 8003088:	080031b5 	.word	0x080031b5
 800308c:	080030f1 	.word	0x080030f1
 8003090:	080031b5 	.word	0x080031b5
 8003094:	080031b5 	.word	0x080031b5
 8003098:	080031b5 	.word	0x080031b5
 800309c:	08003133 	.word	0x08003133
 80030a0:	080031b5 	.word	0x080031b5
 80030a4:	080031b5 	.word	0x080031b5
 80030a8:	080031b5 	.word	0x080031b5
 80030ac:	08003173 	.word	0x08003173
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 f9c6 	bl	8003448 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699a      	ldr	r2, [r3, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0208 	orr.w	r2, r2, #8
 80030ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0204 	bic.w	r2, r2, #4
 80030da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6999      	ldr	r1, [r3, #24]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	619a      	str	r2, [r3, #24]
      break;
 80030ee:	e062      	b.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fa0c 	bl	8003514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699a      	ldr	r2, [r3, #24]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800310a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6999      	ldr	r1, [r3, #24]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	021a      	lsls	r2, r3, #8
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	619a      	str	r2, [r3, #24]
      break;
 8003130:	e041      	b.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fa55 	bl	80035e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69da      	ldr	r2, [r3, #28]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0208 	orr.w	r2, r2, #8
 800314c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0204 	bic.w	r2, r2, #4
 800315c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69d9      	ldr	r1, [r3, #28]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	61da      	str	r2, [r3, #28]
      break;
 8003170:	e021      	b.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fa9f 	bl	80036bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69da      	ldr	r2, [r3, #28]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800318c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69da      	ldr	r2, [r3, #28]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69d9      	ldr	r1, [r3, #28]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	021a      	lsls	r2, r3, #8
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	61da      	str	r2, [r3, #28]
      break;
 80031b2:	e000      	b.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80031b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_TIM_ConfigClockSource+0x18>
 80031dc:	2302      	movs	r3, #2
 80031de:	e0b3      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x180>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003206:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003218:	d03e      	beq.n	8003298 <HAL_TIM_ConfigClockSource+0xd0>
 800321a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800321e:	f200 8087 	bhi.w	8003330 <HAL_TIM_ConfigClockSource+0x168>
 8003222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003226:	f000 8085 	beq.w	8003334 <HAL_TIM_ConfigClockSource+0x16c>
 800322a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322e:	d87f      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x168>
 8003230:	2b70      	cmp	r3, #112	; 0x70
 8003232:	d01a      	beq.n	800326a <HAL_TIM_ConfigClockSource+0xa2>
 8003234:	2b70      	cmp	r3, #112	; 0x70
 8003236:	d87b      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x168>
 8003238:	2b60      	cmp	r3, #96	; 0x60
 800323a:	d050      	beq.n	80032de <HAL_TIM_ConfigClockSource+0x116>
 800323c:	2b60      	cmp	r3, #96	; 0x60
 800323e:	d877      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x168>
 8003240:	2b50      	cmp	r3, #80	; 0x50
 8003242:	d03c      	beq.n	80032be <HAL_TIM_ConfigClockSource+0xf6>
 8003244:	2b50      	cmp	r3, #80	; 0x50
 8003246:	d873      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x168>
 8003248:	2b40      	cmp	r3, #64	; 0x40
 800324a:	d058      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x136>
 800324c:	2b40      	cmp	r3, #64	; 0x40
 800324e:	d86f      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x168>
 8003250:	2b30      	cmp	r3, #48	; 0x30
 8003252:	d064      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x156>
 8003254:	2b30      	cmp	r3, #48	; 0x30
 8003256:	d86b      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x168>
 8003258:	2b20      	cmp	r3, #32
 800325a:	d060      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x156>
 800325c:	2b20      	cmp	r3, #32
 800325e:	d867      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x168>
 8003260:	2b00      	cmp	r3, #0
 8003262:	d05c      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x156>
 8003264:	2b10      	cmp	r3, #16
 8003266:	d05a      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003268:	e062      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6899      	ldr	r1, [r3, #8]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f000 fae4 	bl	8003846 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800328c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	609a      	str	r2, [r3, #8]
      break;
 8003296:	e04e      	b.n	8003336 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6818      	ldr	r0, [r3, #0]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	6899      	ldr	r1, [r3, #8]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f000 facd 	bl	8003846 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ba:	609a      	str	r2, [r3, #8]
      break;
 80032bc:	e03b      	b.n	8003336 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6859      	ldr	r1, [r3, #4]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	461a      	mov	r2, r3
 80032cc:	f000 fa44 	bl	8003758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2150      	movs	r1, #80	; 0x50
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fa9b 	bl	8003812 <TIM_ITRx_SetConfig>
      break;
 80032dc:	e02b      	b.n	8003336 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6859      	ldr	r1, [r3, #4]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	461a      	mov	r2, r3
 80032ec:	f000 fa62 	bl	80037b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2160      	movs	r1, #96	; 0x60
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fa8b 	bl	8003812 <TIM_ITRx_SetConfig>
      break;
 80032fc:	e01b      	b.n	8003336 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6859      	ldr	r1, [r3, #4]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	461a      	mov	r2, r3
 800330c:	f000 fa24 	bl	8003758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2140      	movs	r1, #64	; 0x40
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fa7b 	bl	8003812 <TIM_ITRx_SetConfig>
      break;
 800331c:	e00b      	b.n	8003336 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4619      	mov	r1, r3
 8003328:	4610      	mov	r0, r2
 800332a:	f000 fa72 	bl	8003812 <TIM_ITRx_SetConfig>
        break;
 800332e:	e002      	b.n	8003336 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003330:	bf00      	nop
 8003332:	e000      	b.n	8003336 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003334:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr

08003362 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr

08003386 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a25      	ldr	r2, [pc, #148]	; (8003440 <TIM_Base_SetConfig+0xa8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d007      	beq.n	80033c0 <TIM_Base_SetConfig+0x28>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b6:	d003      	beq.n	80033c0 <TIM_Base_SetConfig+0x28>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a22      	ldr	r2, [pc, #136]	; (8003444 <TIM_Base_SetConfig+0xac>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d108      	bne.n	80033d2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a1a      	ldr	r2, [pc, #104]	; (8003440 <TIM_Base_SetConfig+0xa8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d007      	beq.n	80033ea <TIM_Base_SetConfig+0x52>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e0:	d003      	beq.n	80033ea <TIM_Base_SetConfig+0x52>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a17      	ldr	r2, [pc, #92]	; (8003444 <TIM_Base_SetConfig+0xac>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d108      	bne.n	80033fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a07      	ldr	r2, [pc, #28]	; (8003440 <TIM_Base_SetConfig+0xa8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d103      	bne.n	8003430 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	615a      	str	r2, [r3, #20]
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr
 8003440:	40012c00 	.word	0x40012c00
 8003444:	40000400 	.word	0x40000400

08003448 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	f023 0201 	bic.w	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0303 	bic.w	r3, r3, #3
 800347e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f023 0302 	bic.w	r3, r3, #2
 8003490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <TIM_OC1_SetConfig+0xc8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d10c      	bne.n	80034be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f023 0308 	bic.w	r3, r3, #8
 80034aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f023 0304 	bic.w	r3, r3, #4
 80034bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a13      	ldr	r2, [pc, #76]	; (8003510 <TIM_OC1_SetConfig+0xc8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d111      	bne.n	80034ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	621a      	str	r2, [r3, #32]
}
 8003504:	bf00      	nop
 8003506:	371c      	adds	r7, #28
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40012c00 	.word	0x40012c00

08003514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f023 0210 	bic.w	r2, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f023 0320 	bic.w	r3, r3, #32
 800355e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <TIM_OC2_SetConfig+0xd0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d10d      	bne.n	8003590 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800357a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800358e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a14      	ldr	r2, [pc, #80]	; (80035e4 <TIM_OC2_SetConfig+0xd0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d113      	bne.n	80035c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800359e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	621a      	str	r2, [r3, #32]
}
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	40012c00 	.word	0x40012c00

080035e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0303 	bic.w	r3, r3, #3
 800361e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <TIM_OC3_SetConfig+0xd0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d10d      	bne.n	8003662 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800364c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a14      	ldr	r2, [pc, #80]	; (80036b8 <TIM_OC3_SetConfig+0xd0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d113      	bne.n	8003692 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	621a      	str	r2, [r3, #32]
}
 80036ac:	bf00      	nop
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40012c00 	.word	0x40012c00

080036bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	021b      	lsls	r3, r3, #8
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	031b      	lsls	r3, r3, #12
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a0f      	ldr	r2, [pc, #60]	; (8003754 <TIM_OC4_SetConfig+0x98>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d109      	bne.n	8003730 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003722:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	019b      	lsls	r3, r3, #6
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	621a      	str	r2, [r3, #32]
}
 800374a:	bf00      	nop
 800374c:	371c      	adds	r7, #28
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr
 8003754:	40012c00 	.word	0x40012c00

08003758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f023 0201 	bic.w	r2, r3, #1
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f023 030a 	bic.w	r3, r3, #10
 8003794:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	621a      	str	r2, [r3, #32]
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr

080037b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f023 0210 	bic.w	r2, r3, #16
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	031b      	lsls	r3, r3, #12
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	621a      	str	r2, [r3, #32]
}
 8003808:	bf00      	nop
 800380a:	371c      	adds	r7, #28
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr

08003812 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003812:	b480      	push	{r7}
 8003814:	b085      	sub	sp, #20
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003828:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	f043 0307 	orr.w	r3, r3, #7
 8003834:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	609a      	str	r2, [r3, #8]
}
 800383c:	bf00      	nop
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr

08003846 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003846:	b480      	push	{r7}
 8003848:	b087      	sub	sp, #28
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
 8003852:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003860:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	021a      	lsls	r2, r3, #8
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	431a      	orrs	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4313      	orrs	r3, r2
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	609a      	str	r2, [r3, #8]
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr

08003884 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 031f 	and.w	r3, r3, #31
 8003896:	2201      	movs	r2, #1
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a1a      	ldr	r2, [r3, #32]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	43db      	mvns	r3, r3
 80038a6:	401a      	ands	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a1a      	ldr	r2, [r3, #32]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f003 031f 	and.w	r3, r3, #31
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	fa01 f303 	lsl.w	r3, r1, r3
 80038bc:	431a      	orrs	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	621a      	str	r2, [r3, #32]
}
 80038c2:	bf00      	nop
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e041      	b.n	8003968 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a14      	ldr	r2, [pc, #80]	; (8003974 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d009      	beq.n	800393c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003930:	d004      	beq.n	800393c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a10      	ldr	r2, [pc, #64]	; (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d10c      	bne.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003942:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	4313      	orrs	r3, r2
 800394c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40012c00 	.word	0x40012c00
 8003978:	40000400 	.word	0x40000400

0800397c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e03f      	b.n	8003a32 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fd ffbc 	bl	8001944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2224      	movs	r2, #36	; 0x24
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fc25 	bl	8004234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b08a      	sub	sp, #40	; 0x28
 8003a3e:	af02      	add	r7, sp, #8
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	603b      	str	r3, [r7, #0]
 8003a46:	4613      	mov	r3, r2
 8003a48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b20      	cmp	r3, #32
 8003a58:	d17c      	bne.n	8003b54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <HAL_UART_Transmit+0x2c>
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e075      	b.n	8003b56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_UART_Transmit+0x3e>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e06e      	b.n	8003b56 <HAL_UART_Transmit+0x11c>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2221      	movs	r2, #33	; 0x21
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a8e:	f7fe f8a1 	bl	8001bd4 <HAL_GetTick>
 8003a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	88fa      	ldrh	r2, [r7, #6]
 8003a98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	88fa      	ldrh	r2, [r7, #6]
 8003a9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa8:	d108      	bne.n	8003abc <HAL_UART_Transmit+0x82>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d104      	bne.n	8003abc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	61bb      	str	r3, [r7, #24]
 8003aba:	e003      	b.n	8003ac4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003acc:	e02a      	b.n	8003b24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2180      	movs	r1, #128	; 0x80
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fa11 	bl	8003f00 <UART_WaitOnFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e036      	b.n	8003b56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10b      	bne.n	8003b06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003afc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	3302      	adds	r3, #2
 8003b02:	61bb      	str	r3, [r7, #24]
 8003b04:	e007      	b.n	8003b16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	781a      	ldrb	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	3301      	adds	r3, #1
 8003b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1cf      	bne.n	8003ace <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2200      	movs	r2, #0
 8003b36:	2140      	movs	r1, #64	; 0x40
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f9e1 	bl	8003f00 <UART_WaitOnFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e006      	b.n	8003b56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	e000      	b.n	8003b56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b54:	2302      	movs	r3, #2
  }
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3720      	adds	r7, #32
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08a      	sub	sp, #40	; 0x28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10d      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x52>
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fa99 	bl	80040e2 <UART_Receive_IT>
      return;
 8003bb0:	e17b      	b.n	8003eaa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80b1 	beq.w	8003d1c <HAL_UART_IRQHandler+0x1bc>
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d105      	bne.n	8003bd0 <HAL_UART_IRQHandler+0x70>
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 80a6 	beq.w	8003d1c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <HAL_UART_IRQHandler+0x90>
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	f043 0201 	orr.w	r2, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_UART_IRQHandler+0xb0>
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f043 0202 	orr.w	r2, r3, #2
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_UART_IRQHandler+0xd0>
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	f043 0204 	orr.w	r2, r3, #4
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00f      	beq.n	8003c5a <HAL_UART_IRQHandler+0xfa>
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d104      	bne.n	8003c4e <HAL_UART_IRQHandler+0xee>
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d005      	beq.n	8003c5a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f043 0208 	orr.w	r2, r3, #8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 811e 	beq.w	8003ea0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <HAL_UART_IRQHandler+0x11e>
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fa32 	bl	80040e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bf14      	ite	ne
 8003c8c:	2301      	movne	r3, #1
 8003c8e:	2300      	moveq	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d102      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x146>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d031      	beq.n	8003d0a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f974 	bl	8003f94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d023      	beq.n	8003d02 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695a      	ldr	r2, [r3, #20]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cc8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d013      	beq.n	8003cfa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	4a76      	ldr	r2, [pc, #472]	; (8003eb0 <HAL_UART_IRQHandler+0x350>)
 8003cd8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fe f8ca 	bl	8001e78 <HAL_DMA_Abort_IT>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d016      	beq.n	8003d18 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf8:	e00e      	b.n	8003d18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f8ec 	bl	8003ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d00:	e00a      	b.n	8003d18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f8e8 	bl	8003ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d08:	e006      	b.n	8003d18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f8e4 	bl	8003ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d16:	e0c3      	b.n	8003ea0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d18:	bf00      	nop
    return;
 8003d1a:	e0c1      	b.n	8003ea0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	f040 80a1 	bne.w	8003e68 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 809b 	beq.w	8003e68 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 8095 	beq.w	8003e68 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d04e      	beq.n	8003e00 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003d6c:	8a3b      	ldrh	r3, [r7, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 8098 	beq.w	8003ea4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d78:	8a3a      	ldrh	r2, [r7, #16]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	f080 8092 	bcs.w	8003ea4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8a3a      	ldrh	r2, [r7, #16]
 8003d84:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d02b      	beq.n	8003de8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d9e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695a      	ldr	r2, [r3, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0201 	bic.w	r2, r2, #1
 8003dae:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dbe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0210 	bic.w	r2, r2, #16
 8003ddc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fe f80d 	bl	8001e02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	4619      	mov	r1, r3
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f876 	bl	8003eea <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003dfe:	e051      	b.n	8003ea4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d047      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003e18:	8a7b      	ldrh	r3, [r7, #18]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d044      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e2c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0201 	bic.w	r2, r2, #1
 8003e3c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0210 	bic.w	r2, r2, #16
 8003e5a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e5c:	8a7b      	ldrh	r3, [r7, #18]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f842 	bl	8003eea <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e66:	e01f      	b.n	8003ea8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <HAL_UART_IRQHandler+0x324>
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f8c9 	bl	8004014 <UART_Transmit_IT>
    return;
 8003e82:	e012      	b.n	8003eaa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00d      	beq.n	8003eaa <HAL_UART_IRQHandler+0x34a>
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d008      	beq.n	8003eaa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f90a 	bl	80040b2 <UART_EndTransmit_IT>
    return;
 8003e9e:	e004      	b.n	8003eaa <HAL_UART_IRQHandler+0x34a>
    return;
 8003ea0:	bf00      	nop
 8003ea2:	e002      	b.n	8003eaa <HAL_UART_IRQHandler+0x34a>
      return;
 8003ea4:	bf00      	nop
 8003ea6:	e000      	b.n	8003eaa <HAL_UART_IRQHandler+0x34a>
      return;
 8003ea8:	bf00      	nop
  }
}
 8003eaa:	3728      	adds	r7, #40	; 0x28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	08003fed 	.word	0x08003fed

08003eb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f10:	e02c      	b.n	8003f6c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f18:	d028      	beq.n	8003f6c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d007      	beq.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f20:	f7fd fe58 	bl	8001bd4 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d21d      	bcs.n	8003f6c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f3e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695a      	ldr	r2, [r3, #20]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0201 	bic.w	r2, r2, #1
 8003f4e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e00f      	b.n	8003f8c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	4013      	ands	r3, r2
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	bf0c      	ite	eq
 8003f7c:	2301      	moveq	r3, #1
 8003f7e:	2300      	movne	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d0c3      	beq.n	8003f12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003faa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d107      	bne.n	8003fd4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0210 	bic.w	r2, r2, #16
 8003fd2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr

08003fec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f7ff ff66 	bl	8003ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800400c:	bf00      	nop
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b21      	cmp	r3, #33	; 0x21
 8004026:	d13e      	bne.n	80040a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004030:	d114      	bne.n	800405c <UART_Transmit_IT+0x48>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d110      	bne.n	800405c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800404e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	1c9a      	adds	r2, r3, #2
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	621a      	str	r2, [r3, #32]
 800405a:	e008      	b.n	800406e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	1c59      	adds	r1, r3, #1
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6211      	str	r1, [r2, #32]
 8004066:	781a      	ldrb	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29b      	uxth	r3, r3
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	4619      	mov	r1, r3
 800407c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10f      	bne.n	80040a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004090:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	e000      	b.n	80040a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040a6:	2302      	movs	r3, #2
  }
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff feee 	bl	8003eb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b086      	sub	sp, #24
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b22      	cmp	r3, #34	; 0x22
 80040f4:	f040 8099 	bne.w	800422a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004100:	d117      	bne.n	8004132 <UART_Receive_IT+0x50>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d113      	bne.n	8004132 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800410a:	2300      	movs	r3, #0
 800410c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	b29b      	uxth	r3, r3
 800411c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004120:	b29a      	uxth	r2, r3
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	1c9a      	adds	r2, r3, #2
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
 8004130:	e026      	b.n	8004180 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004138:	2300      	movs	r3, #0
 800413a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004144:	d007      	beq.n	8004156 <UART_Receive_IT+0x74>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10a      	bne.n	8004164 <UART_Receive_IT+0x82>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	b2da      	uxtb	r2, r3
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	701a      	strb	r2, [r3, #0]
 8004162:	e008      	b.n	8004176 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004170:	b2da      	uxtb	r2, r3
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29b      	uxth	r3, r3
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	4619      	mov	r1, r3
 800418e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004190:	2b00      	cmp	r3, #0
 8004192:	d148      	bne.n	8004226 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0220 	bic.w	r2, r2, #32
 80041a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d123      	bne.n	800421c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0210 	bic.w	r2, r2, #16
 80041e8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d10a      	bne.n	800420e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff fe68 	bl	8003eea <HAL_UARTEx_RxEventCallback>
 800421a:	e002      	b.n	8004222 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff fe52 	bl	8003ec6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e002      	b.n	800422c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	e000      	b.n	800422c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800422a:	2302      	movs	r3, #2
  }
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800426e:	f023 030c 	bic.w	r3, r3, #12
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	430b      	orrs	r3, r1
 800427a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a2c      	ldr	r2, [pc, #176]	; (8004348 <UART_SetConfig+0x114>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d103      	bne.n	80042a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800429c:	f7fe fc0c 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	e002      	b.n	80042aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042a4:	f7fe fbf4 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 80042a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	009a      	lsls	r2, r3, #2
 80042b4:	441a      	add	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c0:	4a22      	ldr	r2, [pc, #136]	; (800434c <UART_SetConfig+0x118>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	0119      	lsls	r1, r3, #4
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	009a      	lsls	r2, r3, #2
 80042d4:	441a      	add	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80042e0:	4b1a      	ldr	r3, [pc, #104]	; (800434c <UART_SetConfig+0x118>)
 80042e2:	fba3 0302 	umull	r0, r3, r3, r2
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	2064      	movs	r0, #100	; 0x64
 80042ea:	fb00 f303 	mul.w	r3, r0, r3
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	3332      	adds	r3, #50	; 0x32
 80042f4:	4a15      	ldr	r2, [pc, #84]	; (800434c <UART_SetConfig+0x118>)
 80042f6:	fba2 2303 	umull	r2, r3, r2, r3
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004300:	4419      	add	r1, r3
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	009a      	lsls	r2, r3, #2
 800430c:	441a      	add	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	fbb2 f2f3 	udiv	r2, r2, r3
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <UART_SetConfig+0x118>)
 800431a:	fba3 0302 	umull	r0, r3, r3, r2
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	2064      	movs	r0, #100	; 0x64
 8004322:	fb00 f303 	mul.w	r3, r0, r3
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	3332      	adds	r3, #50	; 0x32
 800432c:	4a07      	ldr	r2, [pc, #28]	; (800434c <UART_SetConfig+0x118>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	f003 020f 	and.w	r2, r3, #15
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	440a      	add	r2, r1
 800433e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40013800 	.word	0x40013800
 800434c:	51eb851f 	.word	0x51eb851f

08004350 <__errno>:
 8004350:	4b01      	ldr	r3, [pc, #4]	; (8004358 <__errno+0x8>)
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	200000b8 	.word	0x200000b8

0800435c <__libc_init_array>:
 800435c:	b570      	push	{r4, r5, r6, lr}
 800435e:	2600      	movs	r6, #0
 8004360:	4d0c      	ldr	r5, [pc, #48]	; (8004394 <__libc_init_array+0x38>)
 8004362:	4c0d      	ldr	r4, [pc, #52]	; (8004398 <__libc_init_array+0x3c>)
 8004364:	1b64      	subs	r4, r4, r5
 8004366:	10a4      	asrs	r4, r4, #2
 8004368:	42a6      	cmp	r6, r4
 800436a:	d109      	bne.n	8004380 <__libc_init_array+0x24>
 800436c:	f000 fc64 	bl	8004c38 <_init>
 8004370:	2600      	movs	r6, #0
 8004372:	4d0a      	ldr	r5, [pc, #40]	; (800439c <__libc_init_array+0x40>)
 8004374:	4c0a      	ldr	r4, [pc, #40]	; (80043a0 <__libc_init_array+0x44>)
 8004376:	1b64      	subs	r4, r4, r5
 8004378:	10a4      	asrs	r4, r4, #2
 800437a:	42a6      	cmp	r6, r4
 800437c:	d105      	bne.n	800438a <__libc_init_array+0x2e>
 800437e:	bd70      	pop	{r4, r5, r6, pc}
 8004380:	f855 3b04 	ldr.w	r3, [r5], #4
 8004384:	4798      	blx	r3
 8004386:	3601      	adds	r6, #1
 8004388:	e7ee      	b.n	8004368 <__libc_init_array+0xc>
 800438a:	f855 3b04 	ldr.w	r3, [r5], #4
 800438e:	4798      	blx	r3
 8004390:	3601      	adds	r6, #1
 8004392:	e7f2      	b.n	800437a <__libc_init_array+0x1e>
 8004394:	08004d84 	.word	0x08004d84
 8004398:	08004d84 	.word	0x08004d84
 800439c:	08004d84 	.word	0x08004d84
 80043a0:	08004d88 	.word	0x08004d88

080043a4 <malloc>:
 80043a4:	4b02      	ldr	r3, [pc, #8]	; (80043b0 <malloc+0xc>)
 80043a6:	4601      	mov	r1, r0
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	f000 b857 	b.w	800445c <_malloc_r>
 80043ae:	bf00      	nop
 80043b0:	200000b8 	.word	0x200000b8

080043b4 <memset>:
 80043b4:	4603      	mov	r3, r0
 80043b6:	4402      	add	r2, r0
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d100      	bne.n	80043be <memset+0xa>
 80043bc:	4770      	bx	lr
 80043be:	f803 1b01 	strb.w	r1, [r3], #1
 80043c2:	e7f9      	b.n	80043b8 <memset+0x4>

080043c4 <_free_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	4605      	mov	r5, r0
 80043c8:	2900      	cmp	r1, #0
 80043ca:	d043      	beq.n	8004454 <_free_r+0x90>
 80043cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043d0:	1f0c      	subs	r4, r1, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bfb8      	it	lt
 80043d6:	18e4      	addlt	r4, r4, r3
 80043d8:	f000 f8ca 	bl	8004570 <__malloc_lock>
 80043dc:	4a1e      	ldr	r2, [pc, #120]	; (8004458 <_free_r+0x94>)
 80043de:	6813      	ldr	r3, [r2, #0]
 80043e0:	4610      	mov	r0, r2
 80043e2:	b933      	cbnz	r3, 80043f2 <_free_r+0x2e>
 80043e4:	6063      	str	r3, [r4, #4]
 80043e6:	6014      	str	r4, [r2, #0]
 80043e8:	4628      	mov	r0, r5
 80043ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043ee:	f000 b8c5 	b.w	800457c <__malloc_unlock>
 80043f2:	42a3      	cmp	r3, r4
 80043f4:	d90a      	bls.n	800440c <_free_r+0x48>
 80043f6:	6821      	ldr	r1, [r4, #0]
 80043f8:	1862      	adds	r2, r4, r1
 80043fa:	4293      	cmp	r3, r2
 80043fc:	bf01      	itttt	eq
 80043fe:	681a      	ldreq	r2, [r3, #0]
 8004400:	685b      	ldreq	r3, [r3, #4]
 8004402:	1852      	addeq	r2, r2, r1
 8004404:	6022      	streq	r2, [r4, #0]
 8004406:	6063      	str	r3, [r4, #4]
 8004408:	6004      	str	r4, [r0, #0]
 800440a:	e7ed      	b.n	80043e8 <_free_r+0x24>
 800440c:	461a      	mov	r2, r3
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	b10b      	cbz	r3, 8004416 <_free_r+0x52>
 8004412:	42a3      	cmp	r3, r4
 8004414:	d9fa      	bls.n	800440c <_free_r+0x48>
 8004416:	6811      	ldr	r1, [r2, #0]
 8004418:	1850      	adds	r0, r2, r1
 800441a:	42a0      	cmp	r0, r4
 800441c:	d10b      	bne.n	8004436 <_free_r+0x72>
 800441e:	6820      	ldr	r0, [r4, #0]
 8004420:	4401      	add	r1, r0
 8004422:	1850      	adds	r0, r2, r1
 8004424:	4283      	cmp	r3, r0
 8004426:	6011      	str	r1, [r2, #0]
 8004428:	d1de      	bne.n	80043e8 <_free_r+0x24>
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4401      	add	r1, r0
 8004430:	6011      	str	r1, [r2, #0]
 8004432:	6053      	str	r3, [r2, #4]
 8004434:	e7d8      	b.n	80043e8 <_free_r+0x24>
 8004436:	d902      	bls.n	800443e <_free_r+0x7a>
 8004438:	230c      	movs	r3, #12
 800443a:	602b      	str	r3, [r5, #0]
 800443c:	e7d4      	b.n	80043e8 <_free_r+0x24>
 800443e:	6820      	ldr	r0, [r4, #0]
 8004440:	1821      	adds	r1, r4, r0
 8004442:	428b      	cmp	r3, r1
 8004444:	bf01      	itttt	eq
 8004446:	6819      	ldreq	r1, [r3, #0]
 8004448:	685b      	ldreq	r3, [r3, #4]
 800444a:	1809      	addeq	r1, r1, r0
 800444c:	6021      	streq	r1, [r4, #0]
 800444e:	6063      	str	r3, [r4, #4]
 8004450:	6054      	str	r4, [r2, #4]
 8004452:	e7c9      	b.n	80043e8 <_free_r+0x24>
 8004454:	bd38      	pop	{r3, r4, r5, pc}
 8004456:	bf00      	nop
 8004458:	2000017c 	.word	0x2000017c

0800445c <_malloc_r>:
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445e:	1ccd      	adds	r5, r1, #3
 8004460:	f025 0503 	bic.w	r5, r5, #3
 8004464:	3508      	adds	r5, #8
 8004466:	2d0c      	cmp	r5, #12
 8004468:	bf38      	it	cc
 800446a:	250c      	movcc	r5, #12
 800446c:	2d00      	cmp	r5, #0
 800446e:	4606      	mov	r6, r0
 8004470:	db01      	blt.n	8004476 <_malloc_r+0x1a>
 8004472:	42a9      	cmp	r1, r5
 8004474:	d903      	bls.n	800447e <_malloc_r+0x22>
 8004476:	230c      	movs	r3, #12
 8004478:	6033      	str	r3, [r6, #0]
 800447a:	2000      	movs	r0, #0
 800447c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800447e:	f000 f877 	bl	8004570 <__malloc_lock>
 8004482:	4921      	ldr	r1, [pc, #132]	; (8004508 <_malloc_r+0xac>)
 8004484:	680a      	ldr	r2, [r1, #0]
 8004486:	4614      	mov	r4, r2
 8004488:	b99c      	cbnz	r4, 80044b2 <_malloc_r+0x56>
 800448a:	4f20      	ldr	r7, [pc, #128]	; (800450c <_malloc_r+0xb0>)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	b923      	cbnz	r3, 800449a <_malloc_r+0x3e>
 8004490:	4621      	mov	r1, r4
 8004492:	4630      	mov	r0, r6
 8004494:	f000 f83c 	bl	8004510 <_sbrk_r>
 8004498:	6038      	str	r0, [r7, #0]
 800449a:	4629      	mov	r1, r5
 800449c:	4630      	mov	r0, r6
 800449e:	f000 f837 	bl	8004510 <_sbrk_r>
 80044a2:	1c43      	adds	r3, r0, #1
 80044a4:	d123      	bne.n	80044ee <_malloc_r+0x92>
 80044a6:	230c      	movs	r3, #12
 80044a8:	4630      	mov	r0, r6
 80044aa:	6033      	str	r3, [r6, #0]
 80044ac:	f000 f866 	bl	800457c <__malloc_unlock>
 80044b0:	e7e3      	b.n	800447a <_malloc_r+0x1e>
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	1b5b      	subs	r3, r3, r5
 80044b6:	d417      	bmi.n	80044e8 <_malloc_r+0x8c>
 80044b8:	2b0b      	cmp	r3, #11
 80044ba:	d903      	bls.n	80044c4 <_malloc_r+0x68>
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	441c      	add	r4, r3
 80044c0:	6025      	str	r5, [r4, #0]
 80044c2:	e004      	b.n	80044ce <_malloc_r+0x72>
 80044c4:	6863      	ldr	r3, [r4, #4]
 80044c6:	42a2      	cmp	r2, r4
 80044c8:	bf0c      	ite	eq
 80044ca:	600b      	streq	r3, [r1, #0]
 80044cc:	6053      	strne	r3, [r2, #4]
 80044ce:	4630      	mov	r0, r6
 80044d0:	f000 f854 	bl	800457c <__malloc_unlock>
 80044d4:	f104 000b 	add.w	r0, r4, #11
 80044d8:	1d23      	adds	r3, r4, #4
 80044da:	f020 0007 	bic.w	r0, r0, #7
 80044de:	1ac2      	subs	r2, r0, r3
 80044e0:	d0cc      	beq.n	800447c <_malloc_r+0x20>
 80044e2:	1a1b      	subs	r3, r3, r0
 80044e4:	50a3      	str	r3, [r4, r2]
 80044e6:	e7c9      	b.n	800447c <_malloc_r+0x20>
 80044e8:	4622      	mov	r2, r4
 80044ea:	6864      	ldr	r4, [r4, #4]
 80044ec:	e7cc      	b.n	8004488 <_malloc_r+0x2c>
 80044ee:	1cc4      	adds	r4, r0, #3
 80044f0:	f024 0403 	bic.w	r4, r4, #3
 80044f4:	42a0      	cmp	r0, r4
 80044f6:	d0e3      	beq.n	80044c0 <_malloc_r+0x64>
 80044f8:	1a21      	subs	r1, r4, r0
 80044fa:	4630      	mov	r0, r6
 80044fc:	f000 f808 	bl	8004510 <_sbrk_r>
 8004500:	3001      	adds	r0, #1
 8004502:	d1dd      	bne.n	80044c0 <_malloc_r+0x64>
 8004504:	e7cf      	b.n	80044a6 <_malloc_r+0x4a>
 8004506:	bf00      	nop
 8004508:	2000017c 	.word	0x2000017c
 800450c:	20000180 	.word	0x20000180

08004510 <_sbrk_r>:
 8004510:	b538      	push	{r3, r4, r5, lr}
 8004512:	2300      	movs	r3, #0
 8004514:	4d05      	ldr	r5, [pc, #20]	; (800452c <_sbrk_r+0x1c>)
 8004516:	4604      	mov	r4, r0
 8004518:	4608      	mov	r0, r1
 800451a:	602b      	str	r3, [r5, #0]
 800451c:	f7fd faa0 	bl	8001a60 <_sbrk>
 8004520:	1c43      	adds	r3, r0, #1
 8004522:	d102      	bne.n	800452a <_sbrk_r+0x1a>
 8004524:	682b      	ldr	r3, [r5, #0]
 8004526:	b103      	cbz	r3, 800452a <_sbrk_r+0x1a>
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	bd38      	pop	{r3, r4, r5, pc}
 800452c:	20000294 	.word	0x20000294

08004530 <siprintf>:
 8004530:	b40e      	push	{r1, r2, r3}
 8004532:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004536:	b500      	push	{lr}
 8004538:	b09c      	sub	sp, #112	; 0x70
 800453a:	ab1d      	add	r3, sp, #116	; 0x74
 800453c:	9002      	str	r0, [sp, #8]
 800453e:	9006      	str	r0, [sp, #24]
 8004540:	9107      	str	r1, [sp, #28]
 8004542:	9104      	str	r1, [sp, #16]
 8004544:	4808      	ldr	r0, [pc, #32]	; (8004568 <siprintf+0x38>)
 8004546:	4909      	ldr	r1, [pc, #36]	; (800456c <siprintf+0x3c>)
 8004548:	f853 2b04 	ldr.w	r2, [r3], #4
 800454c:	9105      	str	r1, [sp, #20]
 800454e:	6800      	ldr	r0, [r0, #0]
 8004550:	a902      	add	r1, sp, #8
 8004552:	9301      	str	r3, [sp, #4]
 8004554:	f000 f874 	bl	8004640 <_svfiprintf_r>
 8004558:	2200      	movs	r2, #0
 800455a:	9b02      	ldr	r3, [sp, #8]
 800455c:	701a      	strb	r2, [r3, #0]
 800455e:	b01c      	add	sp, #112	; 0x70
 8004560:	f85d eb04 	ldr.w	lr, [sp], #4
 8004564:	b003      	add	sp, #12
 8004566:	4770      	bx	lr
 8004568:	200000b8 	.word	0x200000b8
 800456c:	ffff0208 	.word	0xffff0208

08004570 <__malloc_lock>:
 8004570:	4801      	ldr	r0, [pc, #4]	; (8004578 <__malloc_lock+0x8>)
 8004572:	f000 bafb 	b.w	8004b6c <__retarget_lock_acquire_recursive>
 8004576:	bf00      	nop
 8004578:	2000029c 	.word	0x2000029c

0800457c <__malloc_unlock>:
 800457c:	4801      	ldr	r0, [pc, #4]	; (8004584 <__malloc_unlock+0x8>)
 800457e:	f000 baf6 	b.w	8004b6e <__retarget_lock_release_recursive>
 8004582:	bf00      	nop
 8004584:	2000029c 	.word	0x2000029c

08004588 <__ssputs_r>:
 8004588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800458c:	688e      	ldr	r6, [r1, #8]
 800458e:	4682      	mov	sl, r0
 8004590:	429e      	cmp	r6, r3
 8004592:	460c      	mov	r4, r1
 8004594:	4690      	mov	r8, r2
 8004596:	461f      	mov	r7, r3
 8004598:	d838      	bhi.n	800460c <__ssputs_r+0x84>
 800459a:	898a      	ldrh	r2, [r1, #12]
 800459c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045a0:	d032      	beq.n	8004608 <__ssputs_r+0x80>
 80045a2:	6825      	ldr	r5, [r4, #0]
 80045a4:	6909      	ldr	r1, [r1, #16]
 80045a6:	3301      	adds	r3, #1
 80045a8:	eba5 0901 	sub.w	r9, r5, r1
 80045ac:	6965      	ldr	r5, [r4, #20]
 80045ae:	444b      	add	r3, r9
 80045b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045b8:	106d      	asrs	r5, r5, #1
 80045ba:	429d      	cmp	r5, r3
 80045bc:	bf38      	it	cc
 80045be:	461d      	movcc	r5, r3
 80045c0:	0553      	lsls	r3, r2, #21
 80045c2:	d531      	bpl.n	8004628 <__ssputs_r+0xa0>
 80045c4:	4629      	mov	r1, r5
 80045c6:	f7ff ff49 	bl	800445c <_malloc_r>
 80045ca:	4606      	mov	r6, r0
 80045cc:	b950      	cbnz	r0, 80045e4 <__ssputs_r+0x5c>
 80045ce:	230c      	movs	r3, #12
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	f8ca 3000 	str.w	r3, [sl]
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045de:	81a3      	strh	r3, [r4, #12]
 80045e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e4:	464a      	mov	r2, r9
 80045e6:	6921      	ldr	r1, [r4, #16]
 80045e8:	f000 fad0 	bl	8004b8c <memcpy>
 80045ec:	89a3      	ldrh	r3, [r4, #12]
 80045ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f6:	81a3      	strh	r3, [r4, #12]
 80045f8:	6126      	str	r6, [r4, #16]
 80045fa:	444e      	add	r6, r9
 80045fc:	6026      	str	r6, [r4, #0]
 80045fe:	463e      	mov	r6, r7
 8004600:	6165      	str	r5, [r4, #20]
 8004602:	eba5 0509 	sub.w	r5, r5, r9
 8004606:	60a5      	str	r5, [r4, #8]
 8004608:	42be      	cmp	r6, r7
 800460a:	d900      	bls.n	800460e <__ssputs_r+0x86>
 800460c:	463e      	mov	r6, r7
 800460e:	4632      	mov	r2, r6
 8004610:	4641      	mov	r1, r8
 8004612:	6820      	ldr	r0, [r4, #0]
 8004614:	f000 fac8 	bl	8004ba8 <memmove>
 8004618:	68a3      	ldr	r3, [r4, #8]
 800461a:	6822      	ldr	r2, [r4, #0]
 800461c:	1b9b      	subs	r3, r3, r6
 800461e:	4432      	add	r2, r6
 8004620:	2000      	movs	r0, #0
 8004622:	60a3      	str	r3, [r4, #8]
 8004624:	6022      	str	r2, [r4, #0]
 8004626:	e7db      	b.n	80045e0 <__ssputs_r+0x58>
 8004628:	462a      	mov	r2, r5
 800462a:	f000 fad7 	bl	8004bdc <_realloc_r>
 800462e:	4606      	mov	r6, r0
 8004630:	2800      	cmp	r0, #0
 8004632:	d1e1      	bne.n	80045f8 <__ssputs_r+0x70>
 8004634:	4650      	mov	r0, sl
 8004636:	6921      	ldr	r1, [r4, #16]
 8004638:	f7ff fec4 	bl	80043c4 <_free_r>
 800463c:	e7c7      	b.n	80045ce <__ssputs_r+0x46>
	...

08004640 <_svfiprintf_r>:
 8004640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004644:	4698      	mov	r8, r3
 8004646:	898b      	ldrh	r3, [r1, #12]
 8004648:	4607      	mov	r7, r0
 800464a:	061b      	lsls	r3, r3, #24
 800464c:	460d      	mov	r5, r1
 800464e:	4614      	mov	r4, r2
 8004650:	b09d      	sub	sp, #116	; 0x74
 8004652:	d50e      	bpl.n	8004672 <_svfiprintf_r+0x32>
 8004654:	690b      	ldr	r3, [r1, #16]
 8004656:	b963      	cbnz	r3, 8004672 <_svfiprintf_r+0x32>
 8004658:	2140      	movs	r1, #64	; 0x40
 800465a:	f7ff feff 	bl	800445c <_malloc_r>
 800465e:	6028      	str	r0, [r5, #0]
 8004660:	6128      	str	r0, [r5, #16]
 8004662:	b920      	cbnz	r0, 800466e <_svfiprintf_r+0x2e>
 8004664:	230c      	movs	r3, #12
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	f04f 30ff 	mov.w	r0, #4294967295
 800466c:	e0d1      	b.n	8004812 <_svfiprintf_r+0x1d2>
 800466e:	2340      	movs	r3, #64	; 0x40
 8004670:	616b      	str	r3, [r5, #20]
 8004672:	2300      	movs	r3, #0
 8004674:	9309      	str	r3, [sp, #36]	; 0x24
 8004676:	2320      	movs	r3, #32
 8004678:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800467c:	2330      	movs	r3, #48	; 0x30
 800467e:	f04f 0901 	mov.w	r9, #1
 8004682:	f8cd 800c 	str.w	r8, [sp, #12]
 8004686:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800482c <_svfiprintf_r+0x1ec>
 800468a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800468e:	4623      	mov	r3, r4
 8004690:	469a      	mov	sl, r3
 8004692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004696:	b10a      	cbz	r2, 800469c <_svfiprintf_r+0x5c>
 8004698:	2a25      	cmp	r2, #37	; 0x25
 800469a:	d1f9      	bne.n	8004690 <_svfiprintf_r+0x50>
 800469c:	ebba 0b04 	subs.w	fp, sl, r4
 80046a0:	d00b      	beq.n	80046ba <_svfiprintf_r+0x7a>
 80046a2:	465b      	mov	r3, fp
 80046a4:	4622      	mov	r2, r4
 80046a6:	4629      	mov	r1, r5
 80046a8:	4638      	mov	r0, r7
 80046aa:	f7ff ff6d 	bl	8004588 <__ssputs_r>
 80046ae:	3001      	adds	r0, #1
 80046b0:	f000 80aa 	beq.w	8004808 <_svfiprintf_r+0x1c8>
 80046b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046b6:	445a      	add	r2, fp
 80046b8:	9209      	str	r2, [sp, #36]	; 0x24
 80046ba:	f89a 3000 	ldrb.w	r3, [sl]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 80a2 	beq.w	8004808 <_svfiprintf_r+0x1c8>
 80046c4:	2300      	movs	r3, #0
 80046c6:	f04f 32ff 	mov.w	r2, #4294967295
 80046ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046ce:	f10a 0a01 	add.w	sl, sl, #1
 80046d2:	9304      	str	r3, [sp, #16]
 80046d4:	9307      	str	r3, [sp, #28]
 80046d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046da:	931a      	str	r3, [sp, #104]	; 0x68
 80046dc:	4654      	mov	r4, sl
 80046de:	2205      	movs	r2, #5
 80046e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046e4:	4851      	ldr	r0, [pc, #324]	; (800482c <_svfiprintf_r+0x1ec>)
 80046e6:	f000 fa43 	bl	8004b70 <memchr>
 80046ea:	9a04      	ldr	r2, [sp, #16]
 80046ec:	b9d8      	cbnz	r0, 8004726 <_svfiprintf_r+0xe6>
 80046ee:	06d0      	lsls	r0, r2, #27
 80046f0:	bf44      	itt	mi
 80046f2:	2320      	movmi	r3, #32
 80046f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046f8:	0711      	lsls	r1, r2, #28
 80046fa:	bf44      	itt	mi
 80046fc:	232b      	movmi	r3, #43	; 0x2b
 80046fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004702:	f89a 3000 	ldrb.w	r3, [sl]
 8004706:	2b2a      	cmp	r3, #42	; 0x2a
 8004708:	d015      	beq.n	8004736 <_svfiprintf_r+0xf6>
 800470a:	4654      	mov	r4, sl
 800470c:	2000      	movs	r0, #0
 800470e:	f04f 0c0a 	mov.w	ip, #10
 8004712:	9a07      	ldr	r2, [sp, #28]
 8004714:	4621      	mov	r1, r4
 8004716:	f811 3b01 	ldrb.w	r3, [r1], #1
 800471a:	3b30      	subs	r3, #48	; 0x30
 800471c:	2b09      	cmp	r3, #9
 800471e:	d94e      	bls.n	80047be <_svfiprintf_r+0x17e>
 8004720:	b1b0      	cbz	r0, 8004750 <_svfiprintf_r+0x110>
 8004722:	9207      	str	r2, [sp, #28]
 8004724:	e014      	b.n	8004750 <_svfiprintf_r+0x110>
 8004726:	eba0 0308 	sub.w	r3, r0, r8
 800472a:	fa09 f303 	lsl.w	r3, r9, r3
 800472e:	4313      	orrs	r3, r2
 8004730:	46a2      	mov	sl, r4
 8004732:	9304      	str	r3, [sp, #16]
 8004734:	e7d2      	b.n	80046dc <_svfiprintf_r+0x9c>
 8004736:	9b03      	ldr	r3, [sp, #12]
 8004738:	1d19      	adds	r1, r3, #4
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	9103      	str	r1, [sp, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	bfbb      	ittet	lt
 8004742:	425b      	neglt	r3, r3
 8004744:	f042 0202 	orrlt.w	r2, r2, #2
 8004748:	9307      	strge	r3, [sp, #28]
 800474a:	9307      	strlt	r3, [sp, #28]
 800474c:	bfb8      	it	lt
 800474e:	9204      	strlt	r2, [sp, #16]
 8004750:	7823      	ldrb	r3, [r4, #0]
 8004752:	2b2e      	cmp	r3, #46	; 0x2e
 8004754:	d10c      	bne.n	8004770 <_svfiprintf_r+0x130>
 8004756:	7863      	ldrb	r3, [r4, #1]
 8004758:	2b2a      	cmp	r3, #42	; 0x2a
 800475a:	d135      	bne.n	80047c8 <_svfiprintf_r+0x188>
 800475c:	9b03      	ldr	r3, [sp, #12]
 800475e:	3402      	adds	r4, #2
 8004760:	1d1a      	adds	r2, r3, #4
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	9203      	str	r2, [sp, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	bfb8      	it	lt
 800476a:	f04f 33ff 	movlt.w	r3, #4294967295
 800476e:	9305      	str	r3, [sp, #20]
 8004770:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800483c <_svfiprintf_r+0x1fc>
 8004774:	2203      	movs	r2, #3
 8004776:	4650      	mov	r0, sl
 8004778:	7821      	ldrb	r1, [r4, #0]
 800477a:	f000 f9f9 	bl	8004b70 <memchr>
 800477e:	b140      	cbz	r0, 8004792 <_svfiprintf_r+0x152>
 8004780:	2340      	movs	r3, #64	; 0x40
 8004782:	eba0 000a 	sub.w	r0, r0, sl
 8004786:	fa03 f000 	lsl.w	r0, r3, r0
 800478a:	9b04      	ldr	r3, [sp, #16]
 800478c:	3401      	adds	r4, #1
 800478e:	4303      	orrs	r3, r0
 8004790:	9304      	str	r3, [sp, #16]
 8004792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004796:	2206      	movs	r2, #6
 8004798:	4825      	ldr	r0, [pc, #148]	; (8004830 <_svfiprintf_r+0x1f0>)
 800479a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800479e:	f000 f9e7 	bl	8004b70 <memchr>
 80047a2:	2800      	cmp	r0, #0
 80047a4:	d038      	beq.n	8004818 <_svfiprintf_r+0x1d8>
 80047a6:	4b23      	ldr	r3, [pc, #140]	; (8004834 <_svfiprintf_r+0x1f4>)
 80047a8:	bb1b      	cbnz	r3, 80047f2 <_svfiprintf_r+0x1b2>
 80047aa:	9b03      	ldr	r3, [sp, #12]
 80047ac:	3307      	adds	r3, #7
 80047ae:	f023 0307 	bic.w	r3, r3, #7
 80047b2:	3308      	adds	r3, #8
 80047b4:	9303      	str	r3, [sp, #12]
 80047b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047b8:	4433      	add	r3, r6
 80047ba:	9309      	str	r3, [sp, #36]	; 0x24
 80047bc:	e767      	b.n	800468e <_svfiprintf_r+0x4e>
 80047be:	460c      	mov	r4, r1
 80047c0:	2001      	movs	r0, #1
 80047c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80047c6:	e7a5      	b.n	8004714 <_svfiprintf_r+0xd4>
 80047c8:	2300      	movs	r3, #0
 80047ca:	f04f 0c0a 	mov.w	ip, #10
 80047ce:	4619      	mov	r1, r3
 80047d0:	3401      	adds	r4, #1
 80047d2:	9305      	str	r3, [sp, #20]
 80047d4:	4620      	mov	r0, r4
 80047d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047da:	3a30      	subs	r2, #48	; 0x30
 80047dc:	2a09      	cmp	r2, #9
 80047de:	d903      	bls.n	80047e8 <_svfiprintf_r+0x1a8>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0c5      	beq.n	8004770 <_svfiprintf_r+0x130>
 80047e4:	9105      	str	r1, [sp, #20]
 80047e6:	e7c3      	b.n	8004770 <_svfiprintf_r+0x130>
 80047e8:	4604      	mov	r4, r0
 80047ea:	2301      	movs	r3, #1
 80047ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80047f0:	e7f0      	b.n	80047d4 <_svfiprintf_r+0x194>
 80047f2:	ab03      	add	r3, sp, #12
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	462a      	mov	r2, r5
 80047f8:	4638      	mov	r0, r7
 80047fa:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <_svfiprintf_r+0x1f8>)
 80047fc:	a904      	add	r1, sp, #16
 80047fe:	f3af 8000 	nop.w
 8004802:	1c42      	adds	r2, r0, #1
 8004804:	4606      	mov	r6, r0
 8004806:	d1d6      	bne.n	80047b6 <_svfiprintf_r+0x176>
 8004808:	89ab      	ldrh	r3, [r5, #12]
 800480a:	065b      	lsls	r3, r3, #25
 800480c:	f53f af2c 	bmi.w	8004668 <_svfiprintf_r+0x28>
 8004810:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004812:	b01d      	add	sp, #116	; 0x74
 8004814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004818:	ab03      	add	r3, sp, #12
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	462a      	mov	r2, r5
 800481e:	4638      	mov	r0, r7
 8004820:	4b05      	ldr	r3, [pc, #20]	; (8004838 <_svfiprintf_r+0x1f8>)
 8004822:	a904      	add	r1, sp, #16
 8004824:	f000 f87c 	bl	8004920 <_printf_i>
 8004828:	e7eb      	b.n	8004802 <_svfiprintf_r+0x1c2>
 800482a:	bf00      	nop
 800482c:	08004d50 	.word	0x08004d50
 8004830:	08004d5a 	.word	0x08004d5a
 8004834:	00000000 	.word	0x00000000
 8004838:	08004589 	.word	0x08004589
 800483c:	08004d56 	.word	0x08004d56

08004840 <_printf_common>:
 8004840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004844:	4616      	mov	r6, r2
 8004846:	4699      	mov	r9, r3
 8004848:	688a      	ldr	r2, [r1, #8]
 800484a:	690b      	ldr	r3, [r1, #16]
 800484c:	4607      	mov	r7, r0
 800484e:	4293      	cmp	r3, r2
 8004850:	bfb8      	it	lt
 8004852:	4613      	movlt	r3, r2
 8004854:	6033      	str	r3, [r6, #0]
 8004856:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800485a:	460c      	mov	r4, r1
 800485c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004860:	b10a      	cbz	r2, 8004866 <_printf_common+0x26>
 8004862:	3301      	adds	r3, #1
 8004864:	6033      	str	r3, [r6, #0]
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	0699      	lsls	r1, r3, #26
 800486a:	bf42      	ittt	mi
 800486c:	6833      	ldrmi	r3, [r6, #0]
 800486e:	3302      	addmi	r3, #2
 8004870:	6033      	strmi	r3, [r6, #0]
 8004872:	6825      	ldr	r5, [r4, #0]
 8004874:	f015 0506 	ands.w	r5, r5, #6
 8004878:	d106      	bne.n	8004888 <_printf_common+0x48>
 800487a:	f104 0a19 	add.w	sl, r4, #25
 800487e:	68e3      	ldr	r3, [r4, #12]
 8004880:	6832      	ldr	r2, [r6, #0]
 8004882:	1a9b      	subs	r3, r3, r2
 8004884:	42ab      	cmp	r3, r5
 8004886:	dc28      	bgt.n	80048da <_printf_common+0x9a>
 8004888:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800488c:	1e13      	subs	r3, r2, #0
 800488e:	6822      	ldr	r2, [r4, #0]
 8004890:	bf18      	it	ne
 8004892:	2301      	movne	r3, #1
 8004894:	0692      	lsls	r2, r2, #26
 8004896:	d42d      	bmi.n	80048f4 <_printf_common+0xb4>
 8004898:	4649      	mov	r1, r9
 800489a:	4638      	mov	r0, r7
 800489c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048a0:	47c0      	blx	r8
 80048a2:	3001      	adds	r0, #1
 80048a4:	d020      	beq.n	80048e8 <_printf_common+0xa8>
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	68e5      	ldr	r5, [r4, #12]
 80048aa:	f003 0306 	and.w	r3, r3, #6
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	bf18      	it	ne
 80048b2:	2500      	movne	r5, #0
 80048b4:	6832      	ldr	r2, [r6, #0]
 80048b6:	f04f 0600 	mov.w	r6, #0
 80048ba:	68a3      	ldr	r3, [r4, #8]
 80048bc:	bf08      	it	eq
 80048be:	1aad      	subeq	r5, r5, r2
 80048c0:	6922      	ldr	r2, [r4, #16]
 80048c2:	bf08      	it	eq
 80048c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048c8:	4293      	cmp	r3, r2
 80048ca:	bfc4      	itt	gt
 80048cc:	1a9b      	subgt	r3, r3, r2
 80048ce:	18ed      	addgt	r5, r5, r3
 80048d0:	341a      	adds	r4, #26
 80048d2:	42b5      	cmp	r5, r6
 80048d4:	d11a      	bne.n	800490c <_printf_common+0xcc>
 80048d6:	2000      	movs	r0, #0
 80048d8:	e008      	b.n	80048ec <_printf_common+0xac>
 80048da:	2301      	movs	r3, #1
 80048dc:	4652      	mov	r2, sl
 80048de:	4649      	mov	r1, r9
 80048e0:	4638      	mov	r0, r7
 80048e2:	47c0      	blx	r8
 80048e4:	3001      	adds	r0, #1
 80048e6:	d103      	bne.n	80048f0 <_printf_common+0xb0>
 80048e8:	f04f 30ff 	mov.w	r0, #4294967295
 80048ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f0:	3501      	adds	r5, #1
 80048f2:	e7c4      	b.n	800487e <_printf_common+0x3e>
 80048f4:	2030      	movs	r0, #48	; 0x30
 80048f6:	18e1      	adds	r1, r4, r3
 80048f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004902:	4422      	add	r2, r4
 8004904:	3302      	adds	r3, #2
 8004906:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800490a:	e7c5      	b.n	8004898 <_printf_common+0x58>
 800490c:	2301      	movs	r3, #1
 800490e:	4622      	mov	r2, r4
 8004910:	4649      	mov	r1, r9
 8004912:	4638      	mov	r0, r7
 8004914:	47c0      	blx	r8
 8004916:	3001      	adds	r0, #1
 8004918:	d0e6      	beq.n	80048e8 <_printf_common+0xa8>
 800491a:	3601      	adds	r6, #1
 800491c:	e7d9      	b.n	80048d2 <_printf_common+0x92>
	...

08004920 <_printf_i>:
 8004920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004924:	460c      	mov	r4, r1
 8004926:	7e27      	ldrb	r7, [r4, #24]
 8004928:	4691      	mov	r9, r2
 800492a:	2f78      	cmp	r7, #120	; 0x78
 800492c:	4680      	mov	r8, r0
 800492e:	469a      	mov	sl, r3
 8004930:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004932:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004936:	d807      	bhi.n	8004948 <_printf_i+0x28>
 8004938:	2f62      	cmp	r7, #98	; 0x62
 800493a:	d80a      	bhi.n	8004952 <_printf_i+0x32>
 800493c:	2f00      	cmp	r7, #0
 800493e:	f000 80d9 	beq.w	8004af4 <_printf_i+0x1d4>
 8004942:	2f58      	cmp	r7, #88	; 0x58
 8004944:	f000 80a4 	beq.w	8004a90 <_printf_i+0x170>
 8004948:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800494c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004950:	e03a      	b.n	80049c8 <_printf_i+0xa8>
 8004952:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004956:	2b15      	cmp	r3, #21
 8004958:	d8f6      	bhi.n	8004948 <_printf_i+0x28>
 800495a:	a001      	add	r0, pc, #4	; (adr r0, 8004960 <_printf_i+0x40>)
 800495c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004960:	080049b9 	.word	0x080049b9
 8004964:	080049cd 	.word	0x080049cd
 8004968:	08004949 	.word	0x08004949
 800496c:	08004949 	.word	0x08004949
 8004970:	08004949 	.word	0x08004949
 8004974:	08004949 	.word	0x08004949
 8004978:	080049cd 	.word	0x080049cd
 800497c:	08004949 	.word	0x08004949
 8004980:	08004949 	.word	0x08004949
 8004984:	08004949 	.word	0x08004949
 8004988:	08004949 	.word	0x08004949
 800498c:	08004adb 	.word	0x08004adb
 8004990:	080049fd 	.word	0x080049fd
 8004994:	08004abd 	.word	0x08004abd
 8004998:	08004949 	.word	0x08004949
 800499c:	08004949 	.word	0x08004949
 80049a0:	08004afd 	.word	0x08004afd
 80049a4:	08004949 	.word	0x08004949
 80049a8:	080049fd 	.word	0x080049fd
 80049ac:	08004949 	.word	0x08004949
 80049b0:	08004949 	.word	0x08004949
 80049b4:	08004ac5 	.word	0x08004ac5
 80049b8:	680b      	ldr	r3, [r1, #0]
 80049ba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049be:	1d1a      	adds	r2, r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	600a      	str	r2, [r1, #0]
 80049c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0a4      	b.n	8004b16 <_printf_i+0x1f6>
 80049cc:	6825      	ldr	r5, [r4, #0]
 80049ce:	6808      	ldr	r0, [r1, #0]
 80049d0:	062e      	lsls	r6, r5, #24
 80049d2:	f100 0304 	add.w	r3, r0, #4
 80049d6:	d50a      	bpl.n	80049ee <_printf_i+0xce>
 80049d8:	6805      	ldr	r5, [r0, #0]
 80049da:	600b      	str	r3, [r1, #0]
 80049dc:	2d00      	cmp	r5, #0
 80049de:	da03      	bge.n	80049e8 <_printf_i+0xc8>
 80049e0:	232d      	movs	r3, #45	; 0x2d
 80049e2:	426d      	negs	r5, r5
 80049e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049e8:	230a      	movs	r3, #10
 80049ea:	485e      	ldr	r0, [pc, #376]	; (8004b64 <_printf_i+0x244>)
 80049ec:	e019      	b.n	8004a22 <_printf_i+0x102>
 80049ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80049f2:	6805      	ldr	r5, [r0, #0]
 80049f4:	600b      	str	r3, [r1, #0]
 80049f6:	bf18      	it	ne
 80049f8:	b22d      	sxthne	r5, r5
 80049fa:	e7ef      	b.n	80049dc <_printf_i+0xbc>
 80049fc:	680b      	ldr	r3, [r1, #0]
 80049fe:	6825      	ldr	r5, [r4, #0]
 8004a00:	1d18      	adds	r0, r3, #4
 8004a02:	6008      	str	r0, [r1, #0]
 8004a04:	0628      	lsls	r0, r5, #24
 8004a06:	d501      	bpl.n	8004a0c <_printf_i+0xec>
 8004a08:	681d      	ldr	r5, [r3, #0]
 8004a0a:	e002      	b.n	8004a12 <_printf_i+0xf2>
 8004a0c:	0669      	lsls	r1, r5, #25
 8004a0e:	d5fb      	bpl.n	8004a08 <_printf_i+0xe8>
 8004a10:	881d      	ldrh	r5, [r3, #0]
 8004a12:	2f6f      	cmp	r7, #111	; 0x6f
 8004a14:	bf0c      	ite	eq
 8004a16:	2308      	moveq	r3, #8
 8004a18:	230a      	movne	r3, #10
 8004a1a:	4852      	ldr	r0, [pc, #328]	; (8004b64 <_printf_i+0x244>)
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a22:	6866      	ldr	r6, [r4, #4]
 8004a24:	2e00      	cmp	r6, #0
 8004a26:	bfa8      	it	ge
 8004a28:	6821      	ldrge	r1, [r4, #0]
 8004a2a:	60a6      	str	r6, [r4, #8]
 8004a2c:	bfa4      	itt	ge
 8004a2e:	f021 0104 	bicge.w	r1, r1, #4
 8004a32:	6021      	strge	r1, [r4, #0]
 8004a34:	b90d      	cbnz	r5, 8004a3a <_printf_i+0x11a>
 8004a36:	2e00      	cmp	r6, #0
 8004a38:	d04d      	beq.n	8004ad6 <_printf_i+0x1b6>
 8004a3a:	4616      	mov	r6, r2
 8004a3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a40:	fb03 5711 	mls	r7, r3, r1, r5
 8004a44:	5dc7      	ldrb	r7, [r0, r7]
 8004a46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a4a:	462f      	mov	r7, r5
 8004a4c:	42bb      	cmp	r3, r7
 8004a4e:	460d      	mov	r5, r1
 8004a50:	d9f4      	bls.n	8004a3c <_printf_i+0x11c>
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d10b      	bne.n	8004a6e <_printf_i+0x14e>
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	07df      	lsls	r7, r3, #31
 8004a5a:	d508      	bpl.n	8004a6e <_printf_i+0x14e>
 8004a5c:	6923      	ldr	r3, [r4, #16]
 8004a5e:	6861      	ldr	r1, [r4, #4]
 8004a60:	4299      	cmp	r1, r3
 8004a62:	bfde      	ittt	le
 8004a64:	2330      	movle	r3, #48	; 0x30
 8004a66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a6e:	1b92      	subs	r2, r2, r6
 8004a70:	6122      	str	r2, [r4, #16]
 8004a72:	464b      	mov	r3, r9
 8004a74:	4621      	mov	r1, r4
 8004a76:	4640      	mov	r0, r8
 8004a78:	f8cd a000 	str.w	sl, [sp]
 8004a7c:	aa03      	add	r2, sp, #12
 8004a7e:	f7ff fedf 	bl	8004840 <_printf_common>
 8004a82:	3001      	adds	r0, #1
 8004a84:	d14c      	bne.n	8004b20 <_printf_i+0x200>
 8004a86:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8a:	b004      	add	sp, #16
 8004a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a90:	4834      	ldr	r0, [pc, #208]	; (8004b64 <_printf_i+0x244>)
 8004a92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a96:	680e      	ldr	r6, [r1, #0]
 8004a98:	6823      	ldr	r3, [r4, #0]
 8004a9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a9e:	061f      	lsls	r7, r3, #24
 8004aa0:	600e      	str	r6, [r1, #0]
 8004aa2:	d514      	bpl.n	8004ace <_printf_i+0x1ae>
 8004aa4:	07d9      	lsls	r1, r3, #31
 8004aa6:	bf44      	itt	mi
 8004aa8:	f043 0320 	orrmi.w	r3, r3, #32
 8004aac:	6023      	strmi	r3, [r4, #0]
 8004aae:	b91d      	cbnz	r5, 8004ab8 <_printf_i+0x198>
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	f023 0320 	bic.w	r3, r3, #32
 8004ab6:	6023      	str	r3, [r4, #0]
 8004ab8:	2310      	movs	r3, #16
 8004aba:	e7af      	b.n	8004a1c <_printf_i+0xfc>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	f043 0320 	orr.w	r3, r3, #32
 8004ac2:	6023      	str	r3, [r4, #0]
 8004ac4:	2378      	movs	r3, #120	; 0x78
 8004ac6:	4828      	ldr	r0, [pc, #160]	; (8004b68 <_printf_i+0x248>)
 8004ac8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004acc:	e7e3      	b.n	8004a96 <_printf_i+0x176>
 8004ace:	065e      	lsls	r6, r3, #25
 8004ad0:	bf48      	it	mi
 8004ad2:	b2ad      	uxthmi	r5, r5
 8004ad4:	e7e6      	b.n	8004aa4 <_printf_i+0x184>
 8004ad6:	4616      	mov	r6, r2
 8004ad8:	e7bb      	b.n	8004a52 <_printf_i+0x132>
 8004ada:	680b      	ldr	r3, [r1, #0]
 8004adc:	6826      	ldr	r6, [r4, #0]
 8004ade:	1d1d      	adds	r5, r3, #4
 8004ae0:	6960      	ldr	r0, [r4, #20]
 8004ae2:	600d      	str	r5, [r1, #0]
 8004ae4:	0635      	lsls	r5, r6, #24
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	d501      	bpl.n	8004aee <_printf_i+0x1ce>
 8004aea:	6018      	str	r0, [r3, #0]
 8004aec:	e002      	b.n	8004af4 <_printf_i+0x1d4>
 8004aee:	0671      	lsls	r1, r6, #25
 8004af0:	d5fb      	bpl.n	8004aea <_printf_i+0x1ca>
 8004af2:	8018      	strh	r0, [r3, #0]
 8004af4:	2300      	movs	r3, #0
 8004af6:	4616      	mov	r6, r2
 8004af8:	6123      	str	r3, [r4, #16]
 8004afa:	e7ba      	b.n	8004a72 <_printf_i+0x152>
 8004afc:	680b      	ldr	r3, [r1, #0]
 8004afe:	1d1a      	adds	r2, r3, #4
 8004b00:	600a      	str	r2, [r1, #0]
 8004b02:	681e      	ldr	r6, [r3, #0]
 8004b04:	2100      	movs	r1, #0
 8004b06:	4630      	mov	r0, r6
 8004b08:	6862      	ldr	r2, [r4, #4]
 8004b0a:	f000 f831 	bl	8004b70 <memchr>
 8004b0e:	b108      	cbz	r0, 8004b14 <_printf_i+0x1f4>
 8004b10:	1b80      	subs	r0, r0, r6
 8004b12:	6060      	str	r0, [r4, #4]
 8004b14:	6863      	ldr	r3, [r4, #4]
 8004b16:	6123      	str	r3, [r4, #16]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b1e:	e7a8      	b.n	8004a72 <_printf_i+0x152>
 8004b20:	4632      	mov	r2, r6
 8004b22:	4649      	mov	r1, r9
 8004b24:	4640      	mov	r0, r8
 8004b26:	6923      	ldr	r3, [r4, #16]
 8004b28:	47d0      	blx	sl
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	d0ab      	beq.n	8004a86 <_printf_i+0x166>
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	079b      	lsls	r3, r3, #30
 8004b32:	d413      	bmi.n	8004b5c <_printf_i+0x23c>
 8004b34:	68e0      	ldr	r0, [r4, #12]
 8004b36:	9b03      	ldr	r3, [sp, #12]
 8004b38:	4298      	cmp	r0, r3
 8004b3a:	bfb8      	it	lt
 8004b3c:	4618      	movlt	r0, r3
 8004b3e:	e7a4      	b.n	8004a8a <_printf_i+0x16a>
 8004b40:	2301      	movs	r3, #1
 8004b42:	4632      	mov	r2, r6
 8004b44:	4649      	mov	r1, r9
 8004b46:	4640      	mov	r0, r8
 8004b48:	47d0      	blx	sl
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	d09b      	beq.n	8004a86 <_printf_i+0x166>
 8004b4e:	3501      	adds	r5, #1
 8004b50:	68e3      	ldr	r3, [r4, #12]
 8004b52:	9903      	ldr	r1, [sp, #12]
 8004b54:	1a5b      	subs	r3, r3, r1
 8004b56:	42ab      	cmp	r3, r5
 8004b58:	dcf2      	bgt.n	8004b40 <_printf_i+0x220>
 8004b5a:	e7eb      	b.n	8004b34 <_printf_i+0x214>
 8004b5c:	2500      	movs	r5, #0
 8004b5e:	f104 0619 	add.w	r6, r4, #25
 8004b62:	e7f5      	b.n	8004b50 <_printf_i+0x230>
 8004b64:	08004d61 	.word	0x08004d61
 8004b68:	08004d72 	.word	0x08004d72

08004b6c <__retarget_lock_acquire_recursive>:
 8004b6c:	4770      	bx	lr

08004b6e <__retarget_lock_release_recursive>:
 8004b6e:	4770      	bx	lr

08004b70 <memchr>:
 8004b70:	4603      	mov	r3, r0
 8004b72:	b510      	push	{r4, lr}
 8004b74:	b2c9      	uxtb	r1, r1
 8004b76:	4402      	add	r2, r0
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	d101      	bne.n	8004b82 <memchr+0x12>
 8004b7e:	2000      	movs	r0, #0
 8004b80:	e003      	b.n	8004b8a <memchr+0x1a>
 8004b82:	7804      	ldrb	r4, [r0, #0]
 8004b84:	3301      	adds	r3, #1
 8004b86:	428c      	cmp	r4, r1
 8004b88:	d1f6      	bne.n	8004b78 <memchr+0x8>
 8004b8a:	bd10      	pop	{r4, pc}

08004b8c <memcpy>:
 8004b8c:	440a      	add	r2, r1
 8004b8e:	4291      	cmp	r1, r2
 8004b90:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b94:	d100      	bne.n	8004b98 <memcpy+0xc>
 8004b96:	4770      	bx	lr
 8004b98:	b510      	push	{r4, lr}
 8004b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b9e:	4291      	cmp	r1, r2
 8004ba0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ba4:	d1f9      	bne.n	8004b9a <memcpy+0xe>
 8004ba6:	bd10      	pop	{r4, pc}

08004ba8 <memmove>:
 8004ba8:	4288      	cmp	r0, r1
 8004baa:	b510      	push	{r4, lr}
 8004bac:	eb01 0402 	add.w	r4, r1, r2
 8004bb0:	d902      	bls.n	8004bb8 <memmove+0x10>
 8004bb2:	4284      	cmp	r4, r0
 8004bb4:	4623      	mov	r3, r4
 8004bb6:	d807      	bhi.n	8004bc8 <memmove+0x20>
 8004bb8:	1e43      	subs	r3, r0, #1
 8004bba:	42a1      	cmp	r1, r4
 8004bbc:	d008      	beq.n	8004bd0 <memmove+0x28>
 8004bbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bc6:	e7f8      	b.n	8004bba <memmove+0x12>
 8004bc8:	4601      	mov	r1, r0
 8004bca:	4402      	add	r2, r0
 8004bcc:	428a      	cmp	r2, r1
 8004bce:	d100      	bne.n	8004bd2 <memmove+0x2a>
 8004bd0:	bd10      	pop	{r4, pc}
 8004bd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bda:	e7f7      	b.n	8004bcc <memmove+0x24>

08004bdc <_realloc_r>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	4607      	mov	r7, r0
 8004be0:	4614      	mov	r4, r2
 8004be2:	460e      	mov	r6, r1
 8004be4:	b921      	cbnz	r1, 8004bf0 <_realloc_r+0x14>
 8004be6:	4611      	mov	r1, r2
 8004be8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004bec:	f7ff bc36 	b.w	800445c <_malloc_r>
 8004bf0:	b922      	cbnz	r2, 8004bfc <_realloc_r+0x20>
 8004bf2:	f7ff fbe7 	bl	80043c4 <_free_r>
 8004bf6:	4625      	mov	r5, r4
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bfc:	f000 f814 	bl	8004c28 <_malloc_usable_size_r>
 8004c00:	42a0      	cmp	r0, r4
 8004c02:	d20f      	bcs.n	8004c24 <_realloc_r+0x48>
 8004c04:	4621      	mov	r1, r4
 8004c06:	4638      	mov	r0, r7
 8004c08:	f7ff fc28 	bl	800445c <_malloc_r>
 8004c0c:	4605      	mov	r5, r0
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d0f2      	beq.n	8004bf8 <_realloc_r+0x1c>
 8004c12:	4631      	mov	r1, r6
 8004c14:	4622      	mov	r2, r4
 8004c16:	f7ff ffb9 	bl	8004b8c <memcpy>
 8004c1a:	4631      	mov	r1, r6
 8004c1c:	4638      	mov	r0, r7
 8004c1e:	f7ff fbd1 	bl	80043c4 <_free_r>
 8004c22:	e7e9      	b.n	8004bf8 <_realloc_r+0x1c>
 8004c24:	4635      	mov	r5, r6
 8004c26:	e7e7      	b.n	8004bf8 <_realloc_r+0x1c>

08004c28 <_malloc_usable_size_r>:
 8004c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c2c:	1f18      	subs	r0, r3, #4
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bfbc      	itt	lt
 8004c32:	580b      	ldrlt	r3, [r1, r0]
 8004c34:	18c0      	addlt	r0, r0, r3
 8004c36:	4770      	bx	lr

08004c38 <_init>:
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	bf00      	nop
 8004c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3e:	bc08      	pop	{r3}
 8004c40:	469e      	mov	lr, r3
 8004c42:	4770      	bx	lr

08004c44 <_fini>:
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	bf00      	nop
 8004c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4a:	bc08      	pop	{r3}
 8004c4c:	469e      	mov	lr, r3
 8004c4e:	4770      	bx	lr
